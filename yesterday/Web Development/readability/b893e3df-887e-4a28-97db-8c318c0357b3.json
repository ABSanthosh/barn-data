{
  "id": "b893e3df-887e-4a28-97db-8c318c0357b3",
  "title": "What's New in WebGPU (ChromeÂ 131)",
  "link": "https://developer.chrome.com/blog/new-in-webgpu-131?hl=en",
  "description": "Clip distances in WGSL, GPUCanvasContext getConfiguration(), point and line primitives must not have depth bias, inclusive scan built-in functions for subgroups, experimental support for multi-draw indirect, shader module compilation option strict math, remove GPUAdapter requestAdapterInfo(), and more.",
  "author": "",
  "published": "Wed, 06 Nov 2024 08:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "GitHub",
  "length": 12124,
  "excerpt": "Clip distances in WGSL, GPUCanvasContext getConfiguration(), point and line primitives must not have depth bias, inclusive scan built-in functions for subgroups, experimental support for multi-draw indirect, shader module compilation option strict math, remove GPUAdapter requestAdapterInfo(), and more.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/v960e539c2421c080b00a083e0adb1dad169131e34dcce8c54dbf76c94616f031/chrome/images/favicon.png",
  "text": "Stay organized with collections Save and categorize content based on your preferences. Clip distances in WGSL Clip distances allow you to restrict primitives' clip volume with user-defined half-spaces in the output of vertex stage. Defining your own clipping planes gives greater control over what's visible in your WebGPU scenes. This technique is particularly useful for applications like CAD software, where precise control over visualization is crucial. When the \"clip-distances\" feature is available in a GPUAdapter, request a GPUDevice with this feature to get clip distances support in WGSL, and explicitly enable this extension in your WGSL code with enable clip_distances;. Once enabled, you can use the clip_distances built-in array in your vertex shader. This array holds distances to a user-defined clip plane: A clip distance of 0 means the vertex lies on the plane. A positive distance means the vertex is inside the clip half-space (the side you want to keep). A negative distance means the vertex is outside the clip half-space (the side you want to discard). See the following snippet, the chromestatus entry, and issue 358408571. const adapter = await navigator.gpu.requestAdapter(); if (!adapter.features.has(\"clip-distances\")) { throw new Error(\"Clip distances support is not available\"); } // Explicitly request clip distances support. const device = await adapter.requestDevice({ requiredFeatures: [\"clip-distances\"], }); const vertexShaderModule = device.createShaderModule({ code: ` enable clip_distances; struct VertexOut { @builtin(clip_distances) my_clip_distances : array\u003cf32, 1\u003e, @builtin(position) my_position : vec4f, } @vertex fn main() -\u003e VertexOut { var output : VertexOut; output.my_clip_distances[0] = 1; output.my_position = vec4f(0, 0, 0, 1); return output; } `, }); // Send the appropriate commands to the GPU... GPUCanvasContext getConfiguration() Once GPUCanvasContext configure() has been called with a configuration dictionary, the GPUCanvasContext getConfiguration() method lets you check the canvas context configuration. It includes device, format, usage, viewFormats, colorSpace, toneMapping, and alphaMode members. This is useful for tasks like checking if the browser supports HDR canvas, as shown in the Particles (HDR) sample. See the following snippet, the chromestatus entry, and issue 370109829. const adapter = await navigator.gpu.requestAdapter(); const device = await adapter.requestDevice(); const canvas = document.querySelector(\"canvas\"); const context = canvas.getContext(\"webgpu\"); // Configure the canvas for HDR. context.configure({ device, format: \"rgba16float\", toneMapping: { mode: \"extended\" }, }); const configuration = context.getConfiguration(); if (configuration.toneMapping.mode === \"extended\") { // The browser supports HDR canvas. // Warning! The user still needs a HDR display to enjoy HDR content. } Point and line primitives must not have depth bias As announced previously, the WebGPU spec now makes it a validation error to set depthBias, depthBiasSlopeScale, and depthBiasClamp to a non-zero value when the topology for a render pipeline is a line or point type. See issue 352567424. Inclusive scan built-in functions for subgroups As part of the subgroups experimentation, the following subgroup built-in functions have been added in issue 361330160: subgroupInclusiveAdd(value): Returns the inclusive scan summation of all active invocations values across the subgroup. subgroupInclusiveMul(value): Returns the inclusive scan multiplication of all active invocations values across the subgroup. Experimental support for multi-draw indirect The multi-draw indirect GPU feature lets you issue multiple draw calls with a single GPU command. This is particularly useful in situations where a large number of objects need to be rendered, such as particle systems, instancing, and large scenes. The drawIndirect() and drawIndexedIndirect() GPURenderPassEncoder methods can only issue a single draw call at a time from a certain region of a GPU buffer. Until this experimental feature is standardized, enable the \"Unsafe WebGPU Support\" flag at chrome://flags/#enable-unsafe-webgpu to make it available in Chrome. With the \"chromium-experimental-multi-draw-indirect\" non-standard GPU feature available in a GPUAdapter, request a GPUDevice with this feature. Then create a GPUBuffer with the GPUBufferUsage.INDIRECT usage to store the draw calls. You can use it later in the new multiDrawIndirect() and multiDrawIndexedIndirect() GPURenderPassEncoder methods to issue draw calls inside a render pass. See the following snippet and issue 356461286. const adapter = await navigator.gpu.requestAdapter(); if (!adapter.features.has(\"chromium-experimental-multi-draw-indirect\")) { throw new Error(\"Experimental multi-draw indirect support is not available\"); } // Explicitly request experimental multi-draw indirect support. const device = await adapter.requestDevice({ requiredFeatures: [\"chromium-experimental-multi-draw-indirect\"], }); // Draw call have vertexCount, instanceCount, firstVertex, and firstInstance parameters. const drawData = new Uint32Array([ 3, 1, 0, 0, // First draw call 3, 1, 3, 0, // Second draw call ]); // Create a buffer to store the draw calls. const drawBuffer = device.createBuffer({ size: drawData.byteLength, usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_DST, }); device.queue.writeBuffer(drawBuffer, 0, drawData); // Create a render pipeline, a vertex buffer, and a render pass encoder... // Inside a render pass, issue the draw calls. myPassEncoder.setPipeline(myPipeline); myPassEncoder.setVertexBuffer(0, myVertexBuffer); myPassEncoder.multiDrawIndirect(drawBuffer, /*offset=*/ 0, /*maxDrawCount=*/ 2); myPassEncoder.end(); Shader module compilation option strict math A boolean strictMath developer option has been added to GPUShaderModuleDescriptor to let you enable or disable strict math during shader module compilation. It is available behind the \"WebGPU Developer Features\" flag at chrome://flags/#enable-webgpu-developer-features, which means it is a feature intended only for use during development. See issue 42241455. This option is currently supported on Metal and Direct3D. When strict math is disabled, the compiler may optimize your shaders by: Ignoring the possibility of NaN and Infinity values. Treating -0 as +0. Replacing division with faster multiplication by the reciprocal. Rearranging operations based on associative and distributive properties. const adapter = await navigator.gpu.requestAdapter(); const device = await adapter.requestDevice(); const code = ` // Examines the bit pattern of the floating-point number to // determine if it represents a NaN according to the IEEE 754 standard. fn isNan(x : f32) -\u003e bool { bool ones_exp = (bitcast\u003cu32\u003e(x) \u0026 0x7f8) == 0x7f8; bool non_zero_sig = (bitcast\u003cu32\u003e(x) \u0026 0x7ffff) != 0; return ones_exp \u0026\u0026 non_zero_sig; } // ... `; // Enable strict math during shader compilation. const shaderModule = device.createShaderModule({ code, strictMath: true }); Remove GPUAdapter requestAdapterInfo() The GPUAdapter requestAdapterInfo() asynchronous method is redundant as you can already get GPUAdapterInfo synchronously using the GPUAdapter info attribute. Hence, the non-standard GPUAdapter requestAdapterInfo() method is now removed. See the intent to remove. Dawn updates The tint_benchmark executable measures the cost of translating shaders from WGSL to each backend language. Check out the new documentation to learn more about it. This covers only some of the key highlights. Check out the exhaustive list of commits. What's New in WebGPU A list of everything that has been covered in the What's New in WebGPU series. Chrome 131 Clip distances in WGSL GPUCanvasContext getConfiguration() Point and line primitives must not have depth bias Inclusive scan built-in functions for subgroups Experimental support for multi-draw indirect Shader module compilation option strict math Remove GPUAdapter requestAdapterInfo() Dawn updates Chrome 130 Dual source blending Shader compilation time improvements on Metal Deprecation of GPUAdapter requestAdapterInfo() Dawn updates Chrome 129 HDR support with canvas tone mapping mode Expanded subgroups support Dawn updates Chrome 128 Experimenting with subgroups Deprecate setting depth bias for lines and points Hide uncaptured error DevTools warning if preventDefault WGSL interpolate sampling first and either Dawn updates Chrome 127 Experimental support for OpenGL ES on Android GPUAdapter info attribute WebAssembly interop improvements Improved command encoder errors Dawn updates Chrome 126 Increase maxTextureArrayLayers limit Buffer upload optimization for Vulkan backend Shader compilation time improvements Submitted command buffers must be unique Dawn updates Chrome 125 Subgroups (feature in development) Render to slice of 3D texture Dawn updates Chrome 124 Read-only and read-write storage textures Service workers and shared workers support New adapter information attributes Bug fixes Dawn updates Chrome 123 DP4a built-in functions support in WGSL Unrestricted pointer parameters in WGSL Syntax sugar for dereferencing composites in WGSL Separate read-only state for stencil and depth aspects Dawn updates Chrome 122 Expand reach with compatibility mode (feature in development) Increase maxVertexAttributes limit Dawn updates Chrome 121 Support WebGPU on Android Use DXC instead of FXC for shader compilation on Windows Timestamp queries in compute and render passes Default entry points to shader modules Support display-p3 as GPUExternalTexture color space Memory heaps info Dawn updates Chrome 120 Support for 16-bit floating-point values in WGSL Push the limits Changes to depth-stencil state Adapter information updates Timestamp queries quantization Spring-cleaning features Chrome 119 Filterable 32-bit float textures unorm10-10-10-2 vertex format rgb10a2uint texture format Dawn updates Chrome 118 HTMLImageElement and ImageData support in copyExternalImageToTexture() Experimental support for read-write and read-only storage texture Dawn updates Chrome 117 Unset vertex buffer Unset bind group Silence errors from async pipeline creation when device is lost SPIR-V shader module creation updates Improving developer experience Caching pipelines with automatically generated layout Dawn updates Chrome 116 WebCodecs integration Lost device returned by GPUAdapter requestDevice() Keep video playback smooth if importExternalTexture() is called Spec conformance Improving developer experience Dawn updates Chrome 115 Supported WGSL language extensions Experimental support for Direct3D 11 Get discrete GPU by default on AC power Improving developer experience Dawn updates Chrome 114 Optimize JavaScript getCurrentTexture() on unconfigured canvas throws InvalidStateError WGSL updates Dawn updates Chrome 113 Use WebCodecs VideoFrame source in importExternalTexture() Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-11-06 UTC. [[[\"Easy to understand\",\"easyToUnderstand\",\"thumb-up\"],[\"Solved my problem\",\"solvedMyProblem\",\"thumb-up\"],[\"Other\",\"otherUp\",\"thumb-up\"]],[[\"Missing the information I need\",\"missingTheInformationINeed\",\"thumb-down\"],[\"Too complicated / too many steps\",\"tooComplicatedTooManySteps\",\"thumb-down\"],[\"Out of date\",\"outOfDate\",\"thumb-down\"],[\"Samples / code issue\",\"samplesCodeIssue\",\"thumb-down\"],[\"Other\",\"otherDown\",\"thumb-down\"]],[\"Last updated 2024-11-06 UTC.\"],[],[]]",
  "image": "https://developer.chrome.com/static/blog/new-in-webgpu-131/image/new-in-webgpu-131.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\n    \u003cdevsite-progress type=\"indeterminate\" id=\"app-progress\"\u003e\u003c/devsite-progress\u003e\n  \n    \u003csection\u003e\n      \u003cdevsite-cookie-notification-bar\u003e\u003c/devsite-cookie-notification-bar\u003e\u003cdevsite-header role=\"banner\"\u003e\n  \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\u003c/devsite-header\u003e\n      \n      \u003csection id=\"gc-wrapper\"\u003e\n        \u003cmain role=\"main\" has-sidebar=\"\"\u003e\n          \n          \n          \n          \n          \u003cdevsite-content\u003e\n            \n              \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003carticle\u003e\n  \n  \n  \n  \n  \n\n  \n  \n    \n  \u003cdevsite-feature-tooltip ack-key=\"AckCollectionsBookmarkTooltipDismiss\" analytics-category=\"Site-Wide Custom Events\" analytics-action-show=\"Callout Profile displayed\" analytics-action-close=\"Callout Profile dismissed\" analytics-label=\"Create Collection Callout\" dismiss-button=\"true\" id=\"devsite-collections-dropdown\" dismiss-button-text=\"Dismiss\" close-button-text=\"Got it\"\u003e\n\n    \n    \u003cdevsite-bookmark\u003e\u003c/devsite-bookmark\u003e\n\n    \u003cspan slot=\"popout-heading\"\u003e\n      \n      Stay organized with collections\n    \u003c/span\u003e\n    \u003cspan slot=\"popout-contents\"\u003e\n      \n      Save and categorize content based on your preferences.\n    \u003c/span\u003e\n  \u003c/devsite-feature-tooltip\u003e\n  \n  \n\n  \u003cdevsite-toc depth=\"2\" devsite-toc-embedded=\"\"\u003e\n  \u003c/devsite-toc\u003e\n  \n    \n  \n\n  \n\n\n\n\n\n\n\u003cdiv\u003e\n\n  \n    \n\n\n\n\n\u003cdiv translate=\"no\"\u003e\n        \n          \u003cp\u003e\u003cimg alt=\"FranÃ§ois Beaufort\" src=\"https://web.dev/images/authors/beaufortfrancois.jpg\" decoding=\"async\" height=\"64\" loading=\"lazy\" width=\"64\"/\u003e\u003c/p\u003e\n      \u003c/div\u003e\n\n\u003ch2 id=\"clip_distances_in_wgsl\" data-text=\"Clip distances in WGSL\" tabindex=\"-1\"\u003eClip distances in WGSL\u003c/h2\u003e\n\n\u003cp\u003eClip distances allow you to restrict \u003ca href=\"https://gpuweb.github.io/gpuweb/#clip-volume\"\u003eprimitives\u0026#39; clip volume\u003c/a\u003e with user-defined half-spaces in the output of vertex stage. Defining your own clipping planes gives greater control over what\u0026#39;s visible in your WebGPU scenes. This technique is particularly useful for applications like CAD software, where precise control over visualization is crucial.\u003c/p\u003e\n\n\u003cp\u003eWhen the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;clip-distances\u0026#34;\u003c/code\u003e feature is available in a GPUAdapter, request a GPUDevice with this feature to get clip distances support in WGSL, and explicitly enable this extension in your WGSL code with \u003ccode translate=\"no\" dir=\"ltr\"\u003eenable clip_distances;\u003c/code\u003e. Once enabled, you can use the \u003ccode translate=\"no\" dir=\"ltr\"\u003eclip_distances\u003c/code\u003e built-in array in your vertex shader. This array holds distances to a user-defined clip plane:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA clip distance of 0 means the vertex lies on the plane.\u003c/li\u003e\n\u003cli\u003eA positive distance means the vertex is inside the clip half-space (the side you want to keep).\u003c/li\u003e\n\u003cli\u003eA negative distance means the vertex is outside the clip half-space (the side you want to discard).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSee the following snippet, the \u003ca href=\"https://chromestatus.com/feature/5141929256550400\"\u003echromestatus entry\u003c/a\u003e, and \u003ca href=\"https://issues.chromium.org/issues/358408571\"\u003eissue 358408571\u003c/a\u003e.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enavigator\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egpu\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestAdapter\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efeatures\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehas\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;clip-distances\u0026#34;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ethrow\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eError\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Clip distances support is not available\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e// Explicitly request clip distances support.\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestDevice\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erequiredFeatures\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;clip-distances\u0026#34;\u003c/span\u003e\u003cspan\u003e],\u003c/span\u003e\n\u003cspan\u003e});\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evertexShaderModule\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateShaderModule\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\n\u003cspan\u003e  enable clip_distances;\u003c/span\u003e\n\n\u003cspan\u003e  struct VertexOut {\u003c/span\u003e\n\u003cspan\u003e    @builtin(clip_distances) my_clip_distances : array\u0026lt;f32, 1\u0026gt;,\u003c/span\u003e\n\u003cspan\u003e    @builtin(position) my_position : vec4f,\u003c/span\u003e\n\u003cspan\u003e  }\u003c/span\u003e\n\u003cspan\u003e  @vertex fn main() -\u0026gt; VertexOut {\u003c/span\u003e\n\u003cspan\u003e    var output : VertexOut;\u003c/span\u003e\n\u003cspan\u003e    output.my_clip_distances[0] = 1;\u003c/span\u003e\n\u003cspan\u003e    output.my_position = vec4f(0, 0, 0, 1);\u003c/span\u003e\n\u003cspan\u003e    return output;\u003c/span\u003e\n\u003cspan\u003e  }\u003c/span\u003e\n\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e});\u003c/span\u003e\n\n\u003cspan\u003e// Send the appropriate commands to the GPU...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch2 id=\"gpucanvascontext_getconfiguration\" data-text=\"GPUCanvasContext getConfiguration()\" tabindex=\"-1\"\u003eGPUCanvasContext getConfiguration()\u003c/h2\u003e\n\n\u003cp\u003eOnce GPUCanvasContext \u003ccode translate=\"no\" dir=\"ltr\"\u003econfigure()\u003c/code\u003e has been called with a configuration dictionary, the GPUCanvasContext \u003ca href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-getconfiguration\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003egetConfiguration()\u003c/code\u003e\u003c/a\u003e method lets you check the canvas context configuration. It includes \u003ccode translate=\"no\" dir=\"ltr\"\u003edevice\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003eformat\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003eusage\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003eviewFormats\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003ecolorSpace\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003etoneMapping\u003c/code\u003e, and \u003ccode translate=\"no\" dir=\"ltr\"\u003ealphaMode\u003c/code\u003e members. This is useful for tasks like checking if the browser supports HDR canvas, as shown in the \u003ca href=\"https://webgpu.github.io/webgpu-samples/?sample=particles\"\u003eParticles (HDR) sample\u003c/a\u003e. See the following snippet, the \u003ca href=\"https://chromestatus.com/feature/6195110870777856\"\u003echromestatus entry\u003c/a\u003e, and \u003ca href=\"https://issues.chromium.org/issues/370109829\"\u003eissue 370109829\u003c/a\u003e.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enavigator\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egpu\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestAdapter\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestDevice\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecanvas\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equerySelector\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;canvas\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecanvas\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetContext\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;webgpu\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\n\u003cspan\u003e// Configure the canvas for HDR.\u003c/span\u003e\n\u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfigure\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eformat\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;rgba16float\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003etoneMapping\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emode\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;extended\u0026#34;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\n\u003cspan\u003e});\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetConfiguration\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoneMapping\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emode\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;extended\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// The browser supports HDR canvas.\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Warning! The user still needs a HDR display to enjoy HDR content.\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch2 id=\"point_and_line_primitives_must_not_have_depth_bias\" data-text=\"Point and line primitives must not have depth bias\" tabindex=\"-1\"\u003ePoint and line primitives must not have depth bias\u003c/h2\u003e\n\n\u003cp\u003eAs announced \u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-128#deprecate_setting_depth_bias_for_lines_and_points\"\u003epreviously\u003c/a\u003e, the WebGPU spec now makes it a validation error to set \u003ccode translate=\"no\" dir=\"ltr\"\u003edepthBias\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003edepthBiasSlopeScale\u003c/code\u003e, and \u003ccode translate=\"no\" dir=\"ltr\"\u003edepthBiasClamp\u003c/code\u003e to a non-zero value when the topology for a render pipeline is a line or point type. See \u003ca href=\"https://issues.chromium.org/issues/352567424\"\u003eissue 352567424\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"inclusive_scan_built-in_functions_for_subgroups\" data-text=\"Inclusive scan built-in functions for subgroups\" tabindex=\"-1\"\u003eInclusive scan built-in functions for subgroups\u003c/h2\u003e\n\n\u003cp\u003eAs part of the \u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-128#experimenting_with_subgroups\"\u003esubgroups experimentation\u003c/a\u003e, the following subgroup built-in functions have been added in \u003ca href=\"https://g-issues.chromium.org/issues/361330160\"\u003eissue 361330160\u003c/a\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003esubgroupInclusiveAdd(value)\u003c/code\u003e: Returns the inclusive scan summation of all active invocations \u003ccode translate=\"no\" dir=\"ltr\"\u003evalue\u003c/code\u003es across the subgroup.\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003esubgroupInclusiveMul(value)\u003c/code\u003e: Returns the inclusive scan multiplication of all active invocations \u003ccode translate=\"no\" dir=\"ltr\"\u003evalue\u003c/code\u003es across the subgroup.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"experimental_support_for_multi-draw_indirect\" data-text=\"Experimental support for multi-draw indirect\" tabindex=\"-1\"\u003eExperimental support for multi-draw indirect\u003c/h2\u003e\n\n\u003cp\u003eThe multi-draw indirect GPU feature lets you issue multiple draw calls with a single GPU command. This is particularly useful in situations where a large number of objects need to be rendered, such as particle systems, instancing, and large scenes. The \u003ccode translate=\"no\" dir=\"ltr\"\u003edrawIndirect()\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003edrawIndexedIndirect()\u003c/code\u003e GPURenderPassEncoder methods can only issue a single draw call at a time from a certain region of a GPU buffer.\u003c/p\u003e\n\n\u003cp\u003eUntil this experimental feature is \u003ca href=\"https://github.com/gpuweb/gpuweb/pull/2315\"\u003estandardized\u003c/a\u003e, enable the \u0026#34;Unsafe WebGPU Support\u0026#34; flag at \u003ccode translate=\"no\" dir=\"ltr\"\u003echrome://flags/#enable-unsafe-webgpu\u003c/code\u003e to make it available in Chrome.\u003c/p\u003e\n\n\u003cp\u003eWith the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;chromium-experimental-multi-draw-indirect\u0026#34;\u003c/code\u003e non-standard GPU feature available in a GPUAdapter, request a GPUDevice with this feature. Then create a GPUBuffer with the \u003ccode translate=\"no\" dir=\"ltr\"\u003eGPUBufferUsage.INDIRECT\u003c/code\u003e usage to store the draw calls. You can use it later in the new \u003ccode translate=\"no\" dir=\"ltr\"\u003emultiDrawIndirect()\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003emultiDrawIndexedIndirect()\u003c/code\u003e GPURenderPassEncoder methods to issue draw calls inside a render pass. See the following snippet and \u003ca href=\"https://issues.chromium.org/issues/356461286\"\u003eissue 356461286\u003c/a\u003e.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enavigator\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egpu\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestAdapter\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efeatures\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehas\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;chromium-experimental-multi-draw-indirect\u0026#34;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ethrow\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eError\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Experimental multi-draw indirect support is not available\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e// Explicitly request experimental multi-draw indirect support.\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestDevice\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erequiredFeatures\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;chromium-experimental-multi-draw-indirect\u0026#34;\u003c/span\u003e\u003cspan\u003e],\u003c/span\u003e\n\u003cspan\u003e});\u003c/span\u003e\n\n\u003cspan\u003e// Draw call have vertexCount, instanceCount, firstVertex, and firstInstance parameters.\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edrawData\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eUint32Array\u003c/span\u003e\u003cspan\u003e([\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// First draw call\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// Second draw call\u003c/span\u003e\n\u003cspan\u003e]);\u003c/span\u003e\n\u003cspan\u003e// Create a buffer to store the draw calls.\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edrawBuffer\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateBuffer\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edrawData\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebyteLength\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eusage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGPUBufferUsage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eINDIRECT\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGPUBufferUsage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eCOPY_DST\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e});\u003c/span\u003e\n\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equeue\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewriteBuffer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edrawBuffer\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edrawData\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\n\u003cspan\u003e// Create a render pipeline, a vertex buffer, and a render pass encoder...\u003c/span\u003e\n\n\u003cspan\u003e// Inside a render pass, issue the draw calls.\u003c/span\u003e\n\u003cspan\u003emyPassEncoder\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetPipeline\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emyPipeline\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003emyPassEncoder\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetVertexBuffer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emyVertexBuffer\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003emyPassEncoder\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emultiDrawIndirect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edrawBuffer\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/*offset=*/\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/*maxDrawCount=*/\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003emyPassEncoder\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eend\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch2 id=\"shader_module_compilation_option_strict_math\" data-text=\"Shader module compilation option strict math\" tabindex=\"-1\"\u003eShader module compilation option strict math\u003c/h2\u003e\n\n\u003cp\u003eA boolean \u003ccode translate=\"no\" dir=\"ltr\"\u003estrictMath\u003c/code\u003e developer option has been added to GPUShaderModuleDescriptor to let you enable or disable strict math during shader module compilation. It is available behind the \u0026#34;WebGPU Developer Features\u0026#34; flag at \u003ccode translate=\"no\" dir=\"ltr\"\u003echrome://flags/#enable-webgpu-developer-features\u003c/code\u003e, which means it is a feature intended only for use during development. See \u003ca href=\"https://issues.chromium.org/issues/42241455\"\u003eissue 42241455\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis option is currently supported on Metal and Direct3D. When strict math is disabled, the compiler may optimize your shaders by:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIgnoring the possibility of NaN and Infinity values.\u003c/li\u003e\n\u003cli\u003eTreating -0 as +0.\u003c/li\u003e\n\u003cli\u003eReplacing division with faster multiplication by the reciprocal.\u003c/li\u003e\n\u003cli\u003eRearranging operations based on associative and distributive properties.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enavigator\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egpu\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestAdapter\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestDevice\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\n\u003cspan\u003e  // Examines the bit pattern of the floating-point number to\u003c/span\u003e\n\u003cspan\u003e  // determine if it represents a NaN according to the IEEE 754 standard.\u003c/span\u003e\n\u003cspan\u003e  fn isNan(x : f32) -\u0026gt; bool {\u003c/span\u003e\n\u003cspan\u003e    bool ones_exp = (bitcast\u0026lt;u32\u0026gt;(x) \u0026amp; 0x7f8) == 0x7f8;\u003c/span\u003e\n\u003cspan\u003e    bool non_zero_sig = (bitcast\u0026lt;u32\u0026gt;(x) \u0026amp; 0x7ffff) != 0;\u003c/span\u003e\n\u003cspan\u003e    return ones_exp \u0026amp;\u0026amp; non_zero_sig;\u003c/span\u003e\n\u003cspan\u003e  }\u003c/span\u003e\n\u003cspan\u003e  // ...\u003c/span\u003e\n\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e// Enable strict math during shader compilation.\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eshaderModule\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateShaderModule\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estrictMath\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch2 id=\"remove_gpuadapter_requestadapterinfo\" data-text=\"Remove GPUAdapter requestAdapterInfo()\" tabindex=\"-1\"\u003eRemove GPUAdapter requestAdapterInfo()\u003c/h2\u003e\n\n\u003cp\u003eThe GPUAdapter \u003ccode translate=\"no\" dir=\"ltr\"\u003erequestAdapterInfo()\u003c/code\u003e asynchronous method is redundant as you can already get GPUAdapterInfo synchronously using the GPUAdapter \u003ccode translate=\"no\" dir=\"ltr\"\u003einfo\u003c/code\u003e attribute. Hence, the non-standard GPUAdapter \u003ccode translate=\"no\" dir=\"ltr\"\u003erequestAdapterInfo()\u003c/code\u003e method is now removed. See the \u003ca href=\"https://groups.google.com/a/chromium.org/g/blink-dev/c/HxOgGf4NzQ4\"\u003eintent to remove\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"dawn_updates\" data-text=\"Dawn updates\" tabindex=\"-1\"\u003eDawn updates\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003etint_benchmark\u003c/code\u003e executable measures the cost of translating shaders from WGSL to each backend language. Check out the new \u003ca href=\"https://dawn.googlesource.com/dawn/+/main/docs/tint/benchmark.md\"\u003edocumentation\u003c/a\u003e to learn more about it.\u003c/p\u003e\n\n\u003cp\u003eThis covers only some of the key highlights. Check out the exhaustive \u003ca href=\"https://dawn.googlesource.com/dawn/+log/chromium/6723..chromium/6778?n=1000\"\u003elist of commits\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"whats-new\" data-text=\"What\u0026#39;s New in WebGPU\" tabindex=\"-1\"\u003eWhat\u0026#39;s New in WebGPU\u003c/h2\u003e\n\n\u003cp\u003eA list of everything that has been covered in the \u003ca href=\"https://developer.chrome.com/docs/web-platform/webgpu/news\"\u003eWhat\u0026#39;s New in WebGPU\u003c/a\u003e series.\u003c/p\u003e\n\n\u003ch3 id=\"chrome131\" data-text=\"Chrome 131\" tabindex=\"-1\"\u003eChrome 131\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#clip_distances_in_wgsl\"\u003eClip distances in WGSL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#gpucanvascontext_getconfiguration\"\u003eGPUCanvasContext getConfiguration()\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#point_and_line_primitives_must_not_have_depth_bias\"\u003ePoint and line primitives must not have depth bias\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#inclusive_scan_built-in_functions_for_subgroups\"\u003eInclusive scan built-in functions for subgroups\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#experimental_support_for_multi-draw_indirect\"\u003eExperimental support for multi-draw indirect\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#shader_module_compilation_option_strict_math\"\u003eShader module compilation option strict math\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#remove_gpuadapter_requestadapterinfo\"\u003eRemove GPUAdapter requestAdapterInfo()\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome130\" data-text=\"Chrome 130\" tabindex=\"-1\"\u003eChrome 130\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-130#dual_source_blending\"\u003eDual source blending\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-130#shader_compilation_time_improvements_on_metal\"\u003eShader compilation time improvements on Metal\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-130#deprecation_of_gpuadapter_requestadapterinfo\"\u003eDeprecation of GPUAdapter requestAdapterInfo()\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-130#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome129\" data-text=\"Chrome 129\" tabindex=\"-1\"\u003eChrome 129\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-129#hdr_support_with_canvas_tone_mapping_mode\"\u003eHDR support with canvas tone mapping mode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-129#expanded_subgroups_support\"\u003eExpanded subgroups support\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-129#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome128\" data-text=\"Chrome 128\" tabindex=\"-1\"\u003eChrome 128\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-128#experimenting_with_subgroups\"\u003eExperimenting with subgroups\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-128#deprecate_setting_depth_bias_for_lines_and_points\"\u003eDeprecate setting depth bias for lines and points\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-128#hide_uncaptured_error_devtools_warning_if_preventdefault\"\u003eHide uncaptured error DevTools warning if preventDefault\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-128#wgsl_interpolate_sampling_first_and_either\"\u003eWGSL interpolate sampling first and either\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-128#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome127\" data-text=\"Chrome 127\" tabindex=\"-1\"\u003eChrome 127\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-127#experimental_support_for_opengl_es_on_android\"\u003eExperimental support for OpenGL ES on Android\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-127#gpuadapter_info_attribute\"\u003eGPUAdapter info attribute\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-127#webassembly_interop_improvements\"\u003eWebAssembly interop improvements\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-127#improved_command_encoder_errors\"\u003eImproved command encoder errors\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-127#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome126\" data-text=\"Chrome 126\" tabindex=\"-1\"\u003eChrome 126\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-126#increase_maxtexturearraylayers_limit\"\u003eIncrease maxTextureArrayLayers limit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-126#buffer_upload_optimization_for_vulkan_backend\"\u003eBuffer upload optimization for Vulkan backend\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-126#shader_compilation_time_improvements\"\u003eShader compilation time improvements\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-126#submitted_command_buffers_must_be_unique\"\u003eSubmitted command buffers must be unique\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-126#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome125\" data-text=\"Chrome 125\" tabindex=\"-1\"\u003eChrome 125\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-125#subgroups_feature_in_development\"\u003eSubgroups (feature in development)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-125#render_to_slice_of_3d_texture\"\u003eRender to slice of 3D texture\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-125#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome124\" data-text=\"Chrome 124\" tabindex=\"-1\"\u003eChrome 124\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-124#read-only_and_read-write_storage_textures\"\u003eRead-only and read-write storage textures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-124#service_workers_and_shared_workers_support\"\u003eService workers and shared workers support\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-124#new_adapter_information_attributes\"\u003eNew adapter information attributes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-124#bug_fixes\"\u003eBug fixes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-124#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome123\" data-text=\"Chrome 123\" tabindex=\"-1\"\u003eChrome 123\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-123#dp4a_built-in_functions_support_in_wgsl\"\u003eDP4a built-in functions support in WGSL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-123#unrestricted_pointer_parameters_in_wgsl\"\u003eUnrestricted pointer parameters in WGSL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-123#syntax_sugar_for_dereferencing_composites_in_wgsl\"\u003eSyntax sugar for dereferencing composites in WGSL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-123#separate_read-only_state_for_stencil_and_depth_aspects\"\u003eSeparate read-only state for stencil and depth aspects\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-123#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome122\" data-text=\"Chrome 122\" tabindex=\"-1\"\u003eChrome 122\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-122#expand_reach_with_compatibility_mode_feature_in_development\"\u003eExpand reach with compatibility mode (feature in development)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-122#increase_maxvertexattributes_limit\"\u003eIncrease maxVertexAttributes limit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-122#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome121\" data-text=\"Chrome 121\" tabindex=\"-1\"\u003eChrome 121\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#support-webgpu-on-android\"\u003eSupport WebGPU on Android\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#use_dxc_instead_of_fxc_for_shader_compilation_on_windows\"\u003eUse DXC instead of FXC for shader compilation on Windows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#timestamp_queries_in_compute_and_render_passes\"\u003eTimestamp queries in compute and render passes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#default_entry_points_to_shader_modules\"\u003eDefault entry points to shader modules\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#support_display-p3_as_gpuexternaltexture_color_space\"\u003eSupport display-p3 as GPUExternalTexture color space\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#memory_heaps_info\"\u003eMemory heaps info\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome120\" data-text=\"Chrome 120\" tabindex=\"-1\"\u003eChrome 120\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-120#support_for_16-bit_floating-point_values_in_wgsl\"\u003eSupport for 16-bit floating-point values in WGSL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-120#push_the_limits\"\u003ePush the limits\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-120#changes_to_depth-stencil_state\"\u003eChanges to depth-stencil state\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-120#adapter_information_updates\"\u003eAdapter information updates\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-120#timestamp_queries_quantization\"\u003eTimestamp queries quantization\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-120#spring-cleaning_features\"\u003eSpring-cleaning features\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome119\" data-text=\"Chrome 119\" tabindex=\"-1\"\u003eChrome 119\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-119#filterable_32-bit_float_textures\"\u003eFilterable 32-bit float textures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-119#unorm10-10-10-2_vertex_format\"\u003eunorm10-10-10-2 vertex format\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-119#rgb10a2uint_texture_format\"\u003ergb10a2uint texture format\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-119#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome118\" data-text=\"Chrome 118\" tabindex=\"-1\"\u003eChrome 118\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-118#htmlimageelement_and_imagedata_support_in_copyexternalimagetotexture\"\u003eHTMLImageElement and ImageData support in \u003ccode translate=\"no\" dir=\"ltr\"\u003ecopyExternalImageToTexture()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-118#experimental_support_for_read-write_and_read-only_storage_texture\"\u003eExperimental support for read-write and read-only storage texture\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-118#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome117\" data-text=\"Chrome 117\" tabindex=\"-1\"\u003eChrome 117\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#unset_vertex_buffer\"\u003eUnset vertex buffer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#unset_bind_group\"\u003eUnset bind group\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#silence_errors_from_async_pipeline_creation_when_device_is_lost\"\u003eSilence errors from async pipeline creation when device is lost\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#spir-v_shader_module_creation_updates\"\u003eSPIR-V shader module creation updates\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#improving_developer_experience\"\u003eImproving developer experience\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#caching_pipelines_with_automatically_generated_layout\"\u003eCaching pipelines with automatically generated layout\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome116\" data-text=\"Chrome 116\" tabindex=\"-1\"\u003eChrome 116\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-116#webcodecs_integration\"\u003eWebCodecs integration\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-116#lost_device_returned_by_gpuadapter_requestdevice\"\u003eLost device returned by GPUAdapter \u003ccode translate=\"no\" dir=\"ltr\"\u003erequestDevice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-116#keep_video_playback_smooth_if_importexternaltexture_is_called\"\u003eKeep video playback smooth if \u003ccode translate=\"no\" dir=\"ltr\"\u003eimportExternalTexture()\u003c/code\u003e is called\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-116#spec_conformance\"\u003eSpec conformance\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-116#improving_developer_experience\"\u003eImproving developer experience\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-116#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome115\" data-text=\"Chrome 115\" tabindex=\"-1\"\u003eChrome 115\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-115#supported_wgsl_language_extensions\"\u003eSupported WGSL language extensions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-115#experimental_support_for_direct3d_11\"\u003eExperimental support for Direct3D 11\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-115#get_discrete_gpu_by_default_on_ac_power\"\u003eGet discrete GPU by default on AC power\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-115#improving_developer_experience\"\u003eImproving developer experience\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-115#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome114\" data-text=\"Chrome 114\" tabindex=\"-1\"\u003eChrome 114\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-114#optimize_javascript\"\u003eOptimize JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-114#getcurrenttexture_on_unconfigured_canvas_throws_invalidstateerror\"\u003egetCurrentTexture() on unconfigured canvas throws InvalidStateError\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-114#wgsl_updates\"\u003eWGSL updates\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-114#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome113\" data-text=\"Chrome 113\" tabindex=\"-1\"\u003eChrome 113\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-113#use_webcodecs_videoframe_source_in_importexternaltexture\"\u003eUse WebCodecs VideoFrame source in \u003ccode translate=\"no\" dir=\"ltr\"\u003eimportExternalTexture()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n  \n\n  \n\u003c/div\u003e\n\n  \n\n  \n    \n    \n      \n    \u003cdevsite-thumb-rating position=\"footer\"\u003e\n    \u003c/devsite-thumb-rating\u003e\n  \n       \n    \n    \n  \n\n  \n  \n\u003c/article\u003e\n\n\n\u003cdevsite-content-footer\u003e\n  \u003cp\u003eExcept as otherwise noted, the content of this page is licensed under the \u003ca href=\"https://creativecommons.org/licenses/by/4.0/\"\u003eCreative Commons Attribution 4.0 License\u003c/a\u003e, and code samples are licensed under the \u003ca href=\"https://www.apache.org/licenses/LICENSE-2.0\"\u003eApache 2.0 License\u003c/a\u003e. For details, see the \u003ca href=\"https://developers.google.com/site-policies\"\u003eGoogle Developers Site Policies\u003c/a\u003e. Java is a registered trademark of Oracle and/or its affiliates.\u003c/p\u003e\n  \u003cp\u003eLast updated 2024-11-06 UTC.\u003c/p\u003e\n\u003c/devsite-content-footer\u003e\n\n\n\u003cdevsite-notification\u003e\n\u003c/devsite-notification\u003e\n\n\n  \n\u003cp\u003e\n  \n  \n    \u003ctemplate\u003e\n      [[[\u0026#34;Easy to understand\u0026#34;,\u0026#34;easyToUnderstand\u0026#34;,\u0026#34;thumb-up\u0026#34;],[\u0026#34;Solved my problem\u0026#34;,\u0026#34;solvedMyProblem\u0026#34;,\u0026#34;thumb-up\u0026#34;],[\u0026#34;Other\u0026#34;,\u0026#34;otherUp\u0026#34;,\u0026#34;thumb-up\u0026#34;]],[[\u0026#34;Missing the information I need\u0026#34;,\u0026#34;missingTheInformationINeed\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Too complicated / too many steps\u0026#34;,\u0026#34;tooComplicatedTooManySteps\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Out of date\u0026#34;,\u0026#34;outOfDate\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Samples / code issue\u0026#34;,\u0026#34;samplesCodeIssue\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Other\u0026#34;,\u0026#34;otherDown\u0026#34;,\u0026#34;thumb-down\u0026#34;]],[\u0026#34;Last updated 2024-11-06 UTC.\u0026#34;],[],[]]\n    \u003c/template\u003e\n  \n\u003c/p\u003e\n            \n          \u003c/devsite-content\u003e\n        \u003c/main\u003e\n        \n        \n        \n        \u003cdevsite-panel\u003e\u003c/devsite-panel\u003e\n        \n      \u003c/section\u003e\u003c/section\u003e\n    \u003cdevsite-sitemask\u003e\u003c/devsite-sitemask\u003e\n    \u003cdevsite-snackbar\u003e\u003c/devsite-snackbar\u003e\n    \u003cdevsite-tooltip\u003e\u003c/devsite-tooltip\u003e\n    \u003cdevsite-heading-link\u003e\u003c/devsite-heading-link\u003e\n    \u003cdevsite-analytics\u003e\n      \n        \n\n      \n    \u003c/devsite-analytics\u003e\n    \n      \u003cdevsite-badger\u003e\u003c/devsite-badger\u003e\n    \n    \n    \n    \u003cdevsite-a11y-announce\u003e\u003c/devsite-a11y-announce\u003e\n  \n\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": null,
  "modifiedTime": null
}
