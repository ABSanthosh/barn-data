{
  "id": "8bda7c5b-cfe1-4bf5-a294-6bd54043f3cf",
  "title": "Chrome 136 beta",
  "link": "https://developer.chrome.com/blog/chrome-136-beta?hl=en",
  "description": "Discover what's coming to Chrome with the latest beta.",
  "author": "",
  "published": "Thu, 03 Apr 2025 07:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "",
  "length": 15644,
  "excerpt": "Discover what's coming to Chrome with the latest beta.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/v8d1d0686aef3ca9671e026a6ce14af5c61b805aabef7c385b0e34494acbfc654/chrome/images/favicon.png",
  "text": "Published: April 3, 2025 Unless otherwise noted, the following changes apply to the newest Chrome beta channel release for Android, ChromeOS, Linux, macOS, and Windows. Learn more about the features listed here through the provided links or from the list on ChromeStatus.com. Chrome 136 is beta as of April 3, 2025. You can download the latest on Google.com for desktop or on Google Play Store on Android. CSS and UI This release adds six new CSS and UI features. CSS dynamic-range-limit property Enables a page to limit the maximum brightness of HDR content. Ignore letter spacing in cursive scripts This feature adds logic to ignore the letter-spacing setting for cursive scripts, even if specified by the developer as per spec, to ensure that letter spacing does not break words. Partitioning :visited links history To eliminate user browsing history leaks, anchor elements are styled as :visited only if they have been clicked from this top-level site and frame origin before. By only styling links that have been clicked on this site and frame before, the many side-channel attacks that have been developed to obtain :visited links styling information are now obsolete. They no longer provide sites with new information about users. Learn more about these improvements to the privacy of :visited links. Rename string attr() type to raw-string The CSS Working Group resolved to replace string attr() type with raw-string. Therefore, Chrome has changed attr() syntax, so that attr(data-foo string) will now be attr(data-foo raw-string). Type-agnostic var() fallback The fallback part of a var() function does not validate against the type of the custom property being referenced. Unprefixed print-color-adjust The print-color-adjust property lets you adjust colors in printed web pages. This is the same as Chrome's already-supported -webkit-print-color-adjust, but with a standardized name. The -webkit prefixed version is not removed. Web APIs AudioContext interrupted state Adds an \"interrupted\" state to AudioContextState. This new state lets the UA pause playback in these scenarios and enable web applications to respond appropriately. Blob URL partitioning: Fetching/Navigation As a continuation of Storage Partitioning, this implements partitioning of Blob URL access by Storage Key (top-level site, frame origin, and the has-cross-site-ancestor boolean), with the exception of top-level navigations which will remain partitioned only by frame origin. This behavior is similar to what's currently implemented by both Firefox and Safari, and aligns Blob URL usage with the partitioning scheme used by other storage APIs as part of Storage Partitioning. In addition, noopener is now enforced on renderer-initiated top-level navigations to Blob URLs where the corresponding site is cross-site to the top-level site performing the navigation. This aligns Chrome with similar behavior in Safari, and the relevant specs have been updated to reflect these changes. Call stacks in crash reports from unresponsive web pages This feature captures the JavaScript call stack when a web page becomes unresponsive due to JavaScript code running an infinite loop or other very long computation. This helps developers identify the cause of the unresponsiveness. The JavaScript call stack is included in the crash reporting API when the reason is unresponsive. Captured Surface Control API The Captured Surface Control API lets Web applications forward wheel events to a captured tab, and read and change the zoom level of a captured tab. CapturedSurfaceResolution Exposes the pixel ratio of the captured surface while screensharing. This feature will help applications to conserve their system resources or adapt the quality and bandwidth trade-off according to the physical and logical resolutions of the captured surface. Dispatch click events to captured pointer If a pointer is captured while the pointerup event is being dispatched, the click event will be dispatched to the captured target instead of the nearest common ancestor of pointerdown and pointerup events as per the UI Event spec. For uncaptured pointers, the click target remains unchanged. Allows the attaching of information about which functions should be eager parsed and compiled in JavaScript files. The information will be encoded as magic comments. FedCM updates: Multiple IdPs support, removal of \"add another account\" feature in passive mode With this update, FedCM can show multiple identity providers in the same dialog. This provides developers with a convenient way to present all supported identity providers to users. We are planning to first tackle the simple case of having all providers in the same get() call. We are also removing support for 'add another account' feature in FedCM passive mode. This feature allows showing a 'use another account' button alongside other IdP accounts in the chooser. The feature is currently unused, and UX conversations have led us to believe that supporting this leads to a more complicated flow without much benefit. This feature will still work in FedCM active mode. Fluent scrollbars. This feature modernizes the Chrome scrollbars (both overlay and non-overlay) on Windows and Linux to fit the Windows 11 Fluent design language. Non-overlay Fluent scrollbars will be enabled by default in Linux and Windows. This change applies to Linux as well because Chrome's Linux scrollbar design has historically been aligned with what ships on Windows. H265 (HEVC) codec support in WebRTC From Chrome 136, HEVC will join VP8, H.264, VP9, and AV1 as supported codecs in WebRTC. Support will be queryable using the MediaCapabilities API. This newer codec has increased compression efficiency (higher quality per bitrate) relative to older generation codecs like VP8 and H264 and very strong hardware support going back over a decade. This translates into increased battery life and reduced risk of performance issues, and, depending on the performance of the underlying hardware encoder, will often improve visual experience in cases where hardware VP9 or AV1 encoders are not available. H26x Codec support updates for MediaRecorder The MediaRecorder API now supports HEVC encoding, introducing the hvc1.* codec string, and adds new codecs (hev1.* and avc3.*) supporting variable resolution video in MP4. Support for HEVC platform encoding was added in WebCodecs in Chrome 130. As a follow-up, support has been added to the MediaRecorder API in Chromium. The API now supports both MP4 and Matroska muxer types with different HEVC and H.264 mime type specifications. HEVC encoding is only supported if the user's device and operating system provide the necessary capabilities. IP address logging and reporting in Chrome Enterprise Chrome Enterprise is enhancing security monitoring and incident response capabilities by collecting and reporting local and remote IP addresses and sending those IP addresses to the Security Investigation Logs (SIT). In addition, Chrome Enterprise will allow admins to optionally send the IP addresses to first-party and third-party SIEM providers using the Chrome Enterprise Reporting connector. This will be available for Chrome Enterprise Core customers. Incorporate navigation initiator into the HTTP cache partition key Chrome's HTTP cache keying scheme is updated to include an is-cross-site-main-frame-navigation boolean to mitigate cross-site leak attacks involving top-level navigation. Specifically, this will prevent cross-site attacks in which an attacker can initiate a top-level navigation to a given page and then navigate to a resource known to be loaded by the page in order to infer sensitive information from load timing. This change also improves privacy by preventing a malicious site from using navigations to infer whether a user has visited a given site previously. Language support for CanvasTextDrawingStyles The \u003ccanvas\u003e DOM element, like all DOM elements, accepts a lang attribute that is used to define language specific treatment for font selection (when fonts have locale specific glyphs). Browsers respect this attribute. However, when an OffscreenCanvas is created there is no way to set locale information, possibly resulting in a state where an offscreen canvas produces rendered results that differ from the canvas in which its output is used. This feature adds a lang IDL attribute to CanvasTextDrawingStyles to give direct control over the language for the text drawing and metrics. Permissions Policy reports for iframes Introduces a new violation type called \"Potential Permissions Policy violation\", which will only look at Permissions Policy (including report-only policy) and the allow attribute set in iframes to detect the conflict between Permissions Policy enforced versus permissions propagated to iframes. Predictable reported storage quota Report a predictable storage quota from StorageManager's Estimate API for sites that don't have unlimited storage permissions. It is possible to detect a user's browsing mode using the reported storage quota because the storage space made available is significantly smaller in incognito mode than in regular mode. Private Aggregation API: Aggregate error reporting There are a range of error conditions that can be hit when using the Private Aggregation API. For example, the privacy budget could run out, preventing any further histogram contributions. This feature allows developers to register histogram contributions that should only be sent if a particular type of error occurs. This feature supports measuring the frequency of the error conditions and to split these measurements on relevant developer-specified dimensions (for example, version of deployed code). As the errors themselves may be cross-site information, we cannot simply expose them to the page for users without third-party cookies. Instead, this feature reuses the existing aggregate, noised reporting pipelines through the Aggregation Service. RegExp.escape RegExp.escape is a static method that takes a string and returns an escaped version that may be used as a pattern inside a regular expression. For example: const str = prompt(\"Please enter a string\"); const escaped = RegExp.escape(str); const re = new RegExp(escaped, 'g'); // handles reg exp special tokens with the replacement. console.log(ourLongText.replace(re)); Speculation rules: tag field Enables developers to add tag field to speculation rules. This optional field can be used to track the source of speculation rules. For example, to treat them differently at an intermediary server. Any tags associated with a speculation will be sent with the Sec-Speculation-Tags header. Strict Same Origin Policy for the Storage Access API Adjusts the Storage Access API semantics to strictly follow the Same Origin Policy. That is, using document.requestStorageAccess() in a frame only attaches cookies to requests to the iframe's origin (not site) by default. Note that the CookiesAllowedForUrls policy or Storage Access Headers may still be used to unblock cross-site cookies. Update ProgressEvent to use double type for loaded and total The ProgressEvent has attributes loaded and total indicating the progress, and their type is unsigned long long now. With this feature, the type for these two attributes is changed to double instead, which gives the developer more control over the value. For example, the developers can now create a ProgressEvent with the total of 1 and the loaded increasing from 0 to 1 gradually. This is aligned with the default behavior of the \u003cprogress\u003e HTML element if the max attribute is omitted. Use DOMPointInit for getCharNumAtPosition, isPointInFill, isPointInStroke This change brings Chromium code in line with the latest W3C spec for SVGGeometryElement and SVGPathElement in terms of usage of DOMPointInit over SVGPoint for getCharNumAtPosition, isPointInFill, isPointInStroke. Web Authentication conditional create (Passkey upgrades) WebAuthn conditional create requests let websites upgrade existing password credentials to a passkey. WebGPU: GPUAdapterInfo isFallbackAdapter attribute The GPUAdapterInfo isFallbackAdapter boolean attribute indicates if an adapter has significant performance limitations in return for wider compatibility, more predictable behavior, or improved privacy. Note that a fallback adapter may not be present on all systems. New origin trials In Chrome 136, you can opt into the following new origin trials. Audio Output Devices API: setDefaultSinkId() This feature adds setDefaultSinkId() to MediaDevices, which enables the top-level frame to change the default audio output device used by its subframes. Let web applications understand bimodal performance timings Web applications may suffer from bimodal distribution in page load performance, due to factors outside of the web application's control. For example: When a user agent first launches (a \"cold start\" scenario), it must perform many expensive initialization tasks that compete for resources on the system. Browser extensions can affect the performance of a website. For example, some extensions run additional code on every page you visit, which can increase CPU usage and result in slower response times. When a machine is busy performing intensive tasks, it can lead to slower loading of web pages. In these scenarios, content the web app attempts to load will be in competition with other work happening on the system. This makes it difficult to detect if performance issues exist within web applications themselves, or because of external factors. A new confidence field on the PerformanceNavigationTiming object will enable developers to discern if the navigation timings are representative for their web application. Device Bound Session Credentials A way for websites to securely bind a session to a single device. It lets servers have a session that's securely bound to a device. The browser will renew the session periodically as requested by the server, with proof of possession of a private key. Update of canvas text rendering implementation The internals of CanvasRenderingContext2D and OffscreenCanvasRenderingContext2D's measureText(), fillText(), and strokeText() have been replaced by a new implementation that better supports RTL text and caching. This might affect performance and BIDI-text output, so this origin trial allows for text-heavy canvas applications to try out the new implementation and report any issues they may encounter. Deprecations and removals This version of Chrome introduces the following deprecations and removals. Visit ChromeStatus.com for lists of planned deprecations, current deprecations and previous removals. This release of Chrome deprecates two features. Deprecate getters of Intl Locale Info Intl Locale Info API is a Stage 3 ECMAScript TC39 proposal to enhance the Intl.Locale object by exposing Locale information, such as week data (first day in a week, weekend start day, weekend end day, minimum day in the first week), and text direction hour cycle used in the locale. This change removes some getters deprecated in a specification change since they shipped. Remove HTMLFencedFrameElement.canLoadOpaqueURL(). canLoadOpaqueURL() was replaced with navigator.canLoadAdAuctionFencedFrame() in 2023, and calling it has resulted in a deprecation console warning ever since pointing developers to the new API. It does not make sense to have the function attached to HTMLFencedFrameElement and instead should be attached to the navigator object (which contains other fenced frame and ad auction methods).",
  "image": "https://developer.chrome.com/static/blog/chrome-136-beta/image/thumbnail.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \n    \n\n\n\n\n\u003cdiv translate=\"no\"\u003e\n        \n          \u003cp\u003e\u003cimg alt=\"Rachel Andrew\" src=\"https://web.dev/images/authors/rachelandrew.jpg\" decoding=\"async\" height=\"64\" loading=\"lazy\" width=\"64\"/\u003e\u003c/p\u003e\n      \u003c/div\u003e\n\n\u003cp\u003e\n  Published: April 3, 2025\n\u003c/p\u003e\n\n\n\u003cp\u003eUnless otherwise noted, the following changes apply to the newest Chrome beta\nchannel release for Android, ChromeOS, Linux, macOS, and Windows. Learn more\nabout the features listed here through the provided links or from the list on\n\u003ca href=\"https://chromestatus.com\"\u003eChromeStatus.com\u003c/a\u003e. Chrome 136 is beta as of\nApril 3, 2025. You can download the latest on\n\u003ca href=\"https://www.google.com/chrome/beta/\"\u003eGoogle.com\u003c/a\u003e for desktop or on Google\nPlay Store on Android.\u003c/p\u003e\n\n\u003ch2 id=\"css_and_ui\" data-text=\"CSS and UI\" tabindex=\"-1\"\u003eCSS and UI\u003c/h2\u003e\n\n\u003cp\u003eThis release adds six new CSS and UI features.\u003c/p\u003e\n\n\u003ch3 id=\"css_dynamic-range-limit_property\" data-text=\"CSS dynamic-range-limit property\" tabindex=\"-1\"\u003eCSS \u003ccode translate=\"no\" dir=\"ltr\"\u003edynamic-range-limit\u003c/code\u003e property\u003c/h3\u003e\n\n\u003cp\u003eEnables a page to limit the maximum brightness of HDR content.\u003c/p\u003e\n\n\u003ch3 id=\"ignore_letter_spacing_in_cursive_scripts\" data-text=\"Ignore letter spacing in cursive scripts\" tabindex=\"-1\"\u003eIgnore letter spacing in cursive scripts\u003c/h3\u003e\n\n\u003cp\u003eThis feature adds logic to ignore the letter-spacing setting for cursive\nscripts, even if specified by the developer as per spec, to ensure that letter\nspacing does not break words.\u003c/p\u003e\n\n\u003ch3 id=\"partitioning_visited_links_history\" data-text=\"Partitioning :visited links history\" tabindex=\"-1\"\u003ePartitioning \u003ccode translate=\"no\" dir=\"ltr\"\u003e:visited\u003c/code\u003e links history\u003c/h3\u003e\n\n\u003cp\u003eTo eliminate user browsing history leaks, anchor elements are styled as\n\u003ccode translate=\"no\" dir=\"ltr\"\u003e:visited\u003c/code\u003e only if they have been clicked from this top-level site and frame\norigin before.\u003c/p\u003e\n\n\u003cp\u003eBy only styling links that have been clicked on this site and frame before, the\nmany side-channel attacks that have been developed to obtain \u003ccode translate=\"no\" dir=\"ltr\"\u003e:visited\u003c/code\u003e links\nstyling information are now obsolete. They no longer provide sites with new\ninformation about users.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://developer.chrome.com/blog/visited-links\"\u003eLearn more about these improvements to the privacy of \u003ccode translate=\"no\" dir=\"ltr\"\u003e:visited\u003c/code\u003e links\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"rename_string_attr_type_to_raw-string\" data-text=\"Rename string attr() type to raw-string\" tabindex=\"-1\"\u003eRename \u003ccode translate=\"no\" dir=\"ltr\"\u003estring\u003c/code\u003e \u003ccode translate=\"no\" dir=\"ltr\"\u003eattr()\u003c/code\u003e type to \u003ccode translate=\"no\" dir=\"ltr\"\u003eraw-string\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe CSS Working Group resolved to replace \u003ccode translate=\"no\" dir=\"ltr\"\u003estring\u003c/code\u003e \u003ccode translate=\"no\" dir=\"ltr\"\u003eattr()\u003c/code\u003e type with\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eraw-string\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTherefore, Chrome has changed \u003ccode translate=\"no\" dir=\"ltr\"\u003eattr()\u003c/code\u003e syntax, so that \u003ccode translate=\"no\" dir=\"ltr\"\u003eattr(data-foo string)\u003c/code\u003e\nwill now be \u003ccode translate=\"no\" dir=\"ltr\"\u003eattr(data-foo raw-string)\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"type-agnostic_var_fallback\" data-text=\"Type-agnostic var() fallback\" tabindex=\"-1\"\u003eType-agnostic \u003ccode translate=\"no\" dir=\"ltr\"\u003evar()\u003c/code\u003e fallback\u003c/h3\u003e\n\n\u003cp\u003eThe fallback part of a \u003ccode translate=\"no\" dir=\"ltr\"\u003evar()\u003c/code\u003e function does not validate against the type of\nthe custom property being referenced.\u003c/p\u003e\n\n\u003ch3 id=\"unprefixed_print-color-adjust\" data-text=\"Unprefixed print-color-adjust\" tabindex=\"-1\"\u003eUnprefixed \u003ccode translate=\"no\" dir=\"ltr\"\u003eprint-color-adjust\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe\n\u003ca href=\"https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eprint-color-adjust\u003c/code\u003e\u003c/a\u003e\nproperty lets you adjust colors in printed web pages. This is the same as\nChrome\u0026#39;s already-supported \u003ccode translate=\"no\" dir=\"ltr\"\u003e-webkit-print-color-adjust\u003c/code\u003e, but with a standardized\nname. The \u003ccode translate=\"no\" dir=\"ltr\"\u003e-webkit\u003c/code\u003e prefixed version is not removed.\u003c/p\u003e\n\n\u003ch2 id=\"web_apis\" data-text=\"Web APIs\" tabindex=\"-1\"\u003eWeb APIs\u003c/h2\u003e\n\n\u003ch3 id=\"audiocontext_interrupted_state\" data-text=\"AudioContext interrupted state\" tabindex=\"-1\"\u003eAudioContext interrupted state\u003c/h3\u003e\n\n\u003cp\u003eAdds an \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;interrupted\u0026#34;\u003c/code\u003e state to \u003ccode translate=\"no\" dir=\"ltr\"\u003eAudioContextState\u003c/code\u003e. This new state lets the UA\npause playback in these scenarios and enable web applications to respond\nappropriately.\u003c/p\u003e\n\n\u003ch3 id=\"blob_url_partitioning_fetchingnavigation\" data-text=\"Blob URL partitioning: Fetching/Navigation\" tabindex=\"-1\"\u003eBlob URL partitioning: Fetching/Navigation\u003c/h3\u003e\n\n\u003cp\u003eAs a continuation of Storage Partitioning, this implements partitioning of Blob\nURL access by Storage Key (top-level site, frame origin, and the\nhas-cross-site-ancestor boolean), with the exception of top-level navigations\nwhich will remain partitioned only by frame origin. This behavior is similar to\nwhat\u0026#39;s currently implemented by both Firefox and Safari, and aligns Blob URL\nusage with the partitioning scheme used by other storage APIs as part of Storage\nPartitioning.\u003c/p\u003e\n\n\u003cp\u003eIn addition, \u003ccode translate=\"no\" dir=\"ltr\"\u003enoopener\u003c/code\u003e is now enforced on renderer-initiated top-level\nnavigations to Blob URLs where the corresponding site is cross-site to the\ntop-level site performing the navigation. This aligns Chrome with similar\nbehavior in Safari, and the relevant specs have been updated to reflect these\nchanges.\u003c/p\u003e\n\n\u003ch3 id=\"call_stacks_in_crash_reports_from_unresponsive_web_pages\" data-text=\"Call stacks in crash reports from unresponsive web pages\" tabindex=\"-1\"\u003eCall stacks in crash reports from unresponsive web pages\u003c/h3\u003e\n\n\u003cp\u003eThis feature captures the JavaScript call stack when a web page becomes\nunresponsive due to JavaScript code running an infinite loop or other very long\ncomputation. This helps developers identify the cause of the unresponsiveness.\nThe JavaScript call stack is included in the crash\nreporting API when the reason is unresponsive.\u003c/p\u003e\n\n\u003ch3 id=\"captured_surface_control_api\" data-text=\"Captured Surface Control API\" tabindex=\"-1\"\u003eCaptured Surface Control API\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://developer.chrome.com/docs/web-platform/captured-surface-control\"\u003eCaptured Surface Control API\u003c/a\u003e\nlets Web applications forward wheel events to a captured tab, and read and\nchange the zoom level of a captured tab.\u003c/p\u003e\n\n\u003ch3 id=\"capturedsurfaceresolution\" data-text=\"CapturedSurfaceResolution\" tabindex=\"-1\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eCapturedSurfaceResolution\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eExposes the pixel ratio of the captured surface while screensharing. This\nfeature will help applications to conserve their system resources or adapt the\nquality and bandwidth trade-off according to the physical and logical resolutions of\nthe captured surface.\u003c/p\u003e\n\n\u003ch3 id=\"dispatch_click_events_to_captured_pointer\" data-text=\"Dispatch click events to captured pointer\" tabindex=\"-1\"\u003eDispatch click events to captured pointer\u003c/h3\u003e\n\n\u003cp\u003eIf a pointer is captured while the \u003ccode translate=\"no\" dir=\"ltr\"\u003epointerup\u003c/code\u003e event is being dispatched, the\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eclick\u003c/code\u003e event will be dispatched to the captured target instead of the nearest\ncommon ancestor of \u003ccode translate=\"no\" dir=\"ltr\"\u003epointerdown\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003epointerup\u003c/code\u003e events as per the UI Event\nspec. For uncaptured pointers, the \u003ccode translate=\"no\" dir=\"ltr\"\u003eclick\u003c/code\u003e target remains unchanged.\u003c/p\u003e\n\n\n\n\u003cp\u003eAllows the attaching of information about which functions should be eager parsed\nand compiled in JavaScript files. The information will be encoded as magic\ncomments.\u003c/p\u003e\n\n\u003ch3 id=\"fedcm_updates_multiple_idps_support_removal_of_add_another_account_feature_in_passive_mode\" data-text=\"FedCM updates: Multiple IdPs support, removal of \u0026#34;add another account\u0026#34; feature in passive mode\" tabindex=\"-1\"\u003eFedCM updates: Multiple IdPs support, removal of \u0026#34;add another account\u0026#34; feature in passive mode\u003c/h3\u003e\n\n\u003cp\u003eWith this update, FedCM can show multiple identity providers in the same dialog.\nThis provides developers with a convenient way to present all supported identity\nproviders to users. We are planning to first tackle the simple case of having\nall providers in the same \u003ccode translate=\"no\" dir=\"ltr\"\u003eget()\u003c/code\u003e call. We are also removing support for \u0026#39;add\nanother account\u0026#39; feature in FedCM passive mode. This feature allows showing a\n\u0026#39;use another account\u0026#39; button alongside other IdP accounts in the chooser. The\nfeature is currently unused, and UX conversations have led us to believe that\nsupporting this leads to a more complicated flow without much benefit. This\nfeature will still work in FedCM active mode.\u003c/p\u003e\n\n\u003ch3 id=\"fluent_scrollbars\" data-text=\"Fluent scrollbars.\" tabindex=\"-1\"\u003eFluent scrollbars.\u003c/h3\u003e\n\n\u003cp\u003eThis feature modernizes the Chrome scrollbars (both overlay and non-overlay) on\nWindows and Linux to fit the Windows 11 Fluent design language. Non-overlay\nFluent scrollbars will be enabled by default in Linux and Windows. This change\napplies to Linux as well because Chrome\u0026#39;s Linux scrollbar design has\nhistorically been aligned with what ships on Windows.\u003c/p\u003e\n\n\u003ch3 id=\"h265_hevc_codec_support_in_webrtc\" data-text=\"H265 (HEVC) codec support in WebRTC\" tabindex=\"-1\"\u003eH265 (HEVC) codec support in WebRTC\u003c/h3\u003e\n\n\u003cp\u003eFrom Chrome 136, HEVC will join VP8, H.264, VP9, and AV1 as supported codecs in\nWebRTC. Support will be queryable using the MediaCapabilities API.\u003c/p\u003e\n\n\u003cp\u003eThis newer codec has increased compression efficiency (higher quality per\nbitrate) relative to older generation codecs like VP8 and H264 and very strong\nhardware support going back over a decade. This translates into increased\nbattery life and reduced risk of performance issues, and, depending on the\nperformance of the underlying hardware encoder, will often improve visual\nexperience in cases where hardware VP9 or AV1 encoders are not available.\u003c/p\u003e\n\n\u003ch3 id=\"h26x_codec_support_updates_for_mediarecorder\" data-text=\"H26x Codec support updates for MediaRecorder\" tabindex=\"-1\"\u003eH26x Codec support updates for MediaRecorder\u003c/h3\u003e\n\n\u003cp\u003eThe MediaRecorder API now supports HEVC encoding, introducing the \u003ccode translate=\"no\" dir=\"ltr\"\u003ehvc1.*\u003c/code\u003e codec\nstring, and adds new codecs (\u003ccode translate=\"no\" dir=\"ltr\"\u003ehev1.*\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003eavc3.*\u003c/code\u003e) supporting variable\nresolution video in MP4. Support for HEVC platform encoding was added in\nWebCodecs in Chrome 130. As a follow-up, support has been added to the\nMediaRecorder API in Chromium. The API now supports both MP4 and Matroska muxer\ntypes with different HEVC and H.264 mime type specifications. HEVC encoding is\nonly supported if the user\u0026#39;s device and operating system provide the necessary\ncapabilities.\u003c/p\u003e\n\n\u003ch3 id=\"ip_address_logging_and_reporting_in_chrome_enterprise\" data-text=\"IP address logging and reporting in Chrome Enterprise\" tabindex=\"-1\"\u003eIP address logging and reporting in Chrome Enterprise\u003c/h3\u003e\n\n\u003cp\u003eChrome Enterprise is enhancing security monitoring and incident response\ncapabilities by collecting and reporting local and remote IP addresses and\nsending those IP addresses to the Security Investigation Logs (SIT). In\naddition, Chrome Enterprise will allow admins to optionally send the IP\naddresses to first-party and third-party SIEM providers using the Chrome\nEnterprise Reporting connector. This will be available for Chrome Enterprise\nCore customers.\u003c/p\u003e\n\n\u003ch3 id=\"incorporate_navigation_initiator_into_the_http_cache_partition_key\" data-text=\"Incorporate navigation initiator into the HTTP cache partition key\" tabindex=\"-1\"\u003eIncorporate navigation initiator into the HTTP cache partition key\u003c/h3\u003e\n\n\u003cp\u003eChrome\u0026#39;s HTTP cache keying scheme is updated to include an\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eis-cross-site-main-frame-navigation\u003c/code\u003e boolean to mitigate cross-site leak\nattacks involving top-level navigation. Specifically, this will prevent\ncross-site attacks in which an attacker can initiate a top-level navigation to a\ngiven page and then navigate to a resource known to be loaded by the page in\norder to infer sensitive information from load timing. This change also improves\nprivacy by preventing a malicious site from using navigations to infer whether a\nuser has visited a given site previously.\u003c/p\u003e\n\n\u003ch3 id=\"language_support_for_canvastextdrawingstyles\" data-text=\"Language support for CanvasTextDrawingStyles\" tabindex=\"-1\"\u003eLanguage support for \u003ccode translate=\"no\" dir=\"ltr\"\u003eCanvasTextDrawingStyles\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;canvas\u0026gt;\u003c/code\u003e DOM element, like all DOM elements, accepts a \u003ccode translate=\"no\" dir=\"ltr\"\u003elang\u003c/code\u003e attribute\nthat is used to define language specific treatment for font selection (when\nfonts have locale specific glyphs). Browsers respect this attribute. However,\nwhen an OffscreenCanvas is created there is no way to set locale information,\npossibly resulting in a state where an offscreen canvas produces rendered\nresults that differ from the canvas in which its output is used. This feature\nadds a \u003ccode translate=\"no\" dir=\"ltr\"\u003elang\u003c/code\u003e IDL attribute to \u003ccode translate=\"no\" dir=\"ltr\"\u003eCanvasTextDrawingStyles\u003c/code\u003e to give direct control\nover the language for the text drawing and metrics.\u003c/p\u003e\n\n\u003ch3 id=\"permissions_policy_reports_for_iframes\" data-text=\"Permissions Policy reports for iframes\" tabindex=\"-1\"\u003ePermissions Policy reports for iframes\u003c/h3\u003e\n\n\u003cp\u003eIntroduces a new violation type called \u0026#34;Potential Permissions Policy violation\u0026#34;,\nwhich will only look at Permissions Policy (including report-only policy) and\nthe \u003ccode translate=\"no\" dir=\"ltr\"\u003eallow\u003c/code\u003e attribute set in iframes to detect the conflict between Permissions\nPolicy enforced versus permissions propagated to iframes.\u003c/p\u003e\n\n\u003ch3 id=\"predictable_reported_storage_quota\" data-text=\"Predictable reported storage quota\" tabindex=\"-1\"\u003ePredictable reported storage quota\u003c/h3\u003e\n\n\u003cp\u003eReport a predictable storage quota from StorageManager\u0026#39;s Estimate API for sites\nthat don\u0026#39;t have unlimited storage permissions. It is possible to detect a\nuser\u0026#39;s browsing mode using the reported storage quota because the storage space\nmade available is significantly smaller in incognito mode than in regular mode.\u003c/p\u003e\n\n\u003ch3 id=\"private_aggregation_api_aggregate_error_reporting\" data-text=\"Private Aggregation API: Aggregate error reporting\" tabindex=\"-1\"\u003ePrivate Aggregation API: Aggregate error reporting\u003c/h3\u003e\n\n\u003cp\u003eThere are a range of error conditions that can be hit when using the Private\nAggregation API. For example, the privacy budget could run out, preventing any\nfurther histogram contributions. This feature allows developers to register\nhistogram contributions that should only be sent if a particular type of error\noccurs. This feature supports measuring the frequency of the error conditions\nand to split these measurements on relevant developer-specified dimensions\n(for example, version of deployed code). As the errors themselves may be cross-site\ninformation, we cannot simply expose them to the page for users without\nthird-party cookies. Instead, this feature reuses the existing aggregate, noised\nreporting pipelines through the Aggregation Service.\u003c/p\u003e\n\n\u003ch3 id=\"regexpescape\" data-text=\"RegExp.escape\" tabindex=\"-1\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eRegExp.escape\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eRegExp.escape\u003c/code\u003e is a static method that takes a string and returns an escaped\nversion that may be used as a pattern inside a regular expression. For example:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Please enter a string\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eescaped\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eRegExp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eescape\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ere\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eRegExp\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eescaped\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;g\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// handles reg exp special tokens with the replacement.\u003c/span\u003e\n\n\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eourLongText\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereplace\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ere\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch3 id=\"speculation_rules_tag_field\" data-text=\"Speculation rules: tag field\" tabindex=\"-1\"\u003eSpeculation rules: tag field\u003c/h3\u003e\n\n\u003cp\u003eEnables developers to add tag \u003ccode translate=\"no\" dir=\"ltr\"\u003efield\u003c/code\u003e to speculation rules. This optional field\ncan be used to track the source of speculation rules. For example, to treat them\ndifferently at an intermediary server. Any tags associated with a speculation\nwill be sent with the \u003ccode translate=\"no\" dir=\"ltr\"\u003eSec-Speculation-Tags\u003c/code\u003e header.\u003c/p\u003e\n\n\u003ch3 id=\"strict_same_origin_policy_for_the_storage_access_api\" data-text=\"Strict Same Origin Policy for the Storage Access API\" tabindex=\"-1\"\u003eStrict Same Origin Policy for the Storage Access API\u003c/h3\u003e\n\n\u003cp\u003eAdjusts the Storage Access API semantics to strictly follow the Same Origin\nPolicy. That is, using \u003ccode translate=\"no\" dir=\"ltr\"\u003edocument.requestStorageAccess()\u003c/code\u003e in a frame only\nattaches cookies to requests to the iframe\u0026#39;s origin (not site) by default. Note\nthat the \u003ccode translate=\"no\" dir=\"ltr\"\u003eCookiesAllowedForUrls\u003c/code\u003e policy or Storage Access Headers may still\nbe used to unblock cross-site cookies.\u003c/p\u003e\n\n\u003ch3 id=\"update_progressevent_to_use_double_type_for_loaded_and_total\" data-text=\"Update ProgressEvent to use double type for loaded and total\" tabindex=\"-1\"\u003eUpdate \u003ccode translate=\"no\" dir=\"ltr\"\u003eProgressEvent\u003c/code\u003e to use double type for \u003ccode translate=\"no\" dir=\"ltr\"\u003eloaded\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003etotal\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003eProgressEvent\u003c/code\u003e has attributes \u003ccode translate=\"no\" dir=\"ltr\"\u003eloaded\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003etotal\u003c/code\u003e indicating the progress,\nand their type is \u003ccode translate=\"no\" dir=\"ltr\"\u003eunsigned long long\u003c/code\u003e now. With this feature, the type for\nthese two attributes is changed to \u003ccode translate=\"no\" dir=\"ltr\"\u003edouble\u003c/code\u003e instead, which gives the developer\nmore control over the value. For example, the developers can now create a\nProgressEvent with the \u003ccode translate=\"no\" dir=\"ltr\"\u003etotal\u003c/code\u003e of 1 and the \u003ccode translate=\"no\" dir=\"ltr\"\u003eloaded\u003c/code\u003e increasing from 0 to 1\ngradually. This is aligned with the default behavior of the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;progress\u0026gt;\u003c/code\u003e HTML\nelement if the max attribute is omitted.\u003c/p\u003e\n\n\u003ch3 id=\"use_dompointinit_for_getcharnumatposition_ispointinfill_ispointinstroke\" data-text=\"Use DOMPointInit for getCharNumAtPosition, isPointInFill, isPointInStroke\" tabindex=\"-1\"\u003eUse \u003ccode translate=\"no\" dir=\"ltr\"\u003eDOMPointInit\u003c/code\u003e for \u003ccode translate=\"no\" dir=\"ltr\"\u003egetCharNumAtPosition\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003eisPointInFill\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003eisPointInStroke\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis change brings Chromium code in line with the latest W3C spec for\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eSVGGeometryElement\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003eSVGPathElement\u003c/code\u003e in terms of usage of \u003ccode translate=\"no\" dir=\"ltr\"\u003eDOMPointInit\u003c/code\u003e\nover \u003ccode translate=\"no\" dir=\"ltr\"\u003eSVGPoint\u003c/code\u003e for \u003ccode translate=\"no\" dir=\"ltr\"\u003egetCharNumAtPosition\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003eisPointInFill\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003eisPointInStroke\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"web_authentication_conditional_create_passkey_upgrades\" data-text=\"Web Authentication conditional create (Passkey upgrades)\" tabindex=\"-1\"\u003eWeb Authentication conditional create (Passkey upgrades)\u003c/h3\u003e\n\n\u003cp\u003eWebAuthn conditional create requests let websites upgrade existing password\ncredentials to a passkey.\u003c/p\u003e\n\n\u003ch3 id=\"webgpu_gpuadapterinfo_isfallbackadapter_attribute\" data-text=\"WebGPU: GPUAdapterInfo isFallbackAdapter attribute\" tabindex=\"-1\"\u003eWebGPU: \u003ccode translate=\"no\" dir=\"ltr\"\u003eGPUAdapterInfo\u003c/code\u003e \u003ccode translate=\"no\" dir=\"ltr\"\u003eisFallbackAdapter\u003c/code\u003e attribute\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003eGPUAdapterInfo\u003c/code\u003e \u003ccode translate=\"no\" dir=\"ltr\"\u003eisFallbackAdapter\u003c/code\u003e boolean attribute indicates if an\nadapter has significant performance limitations in return for wider\ncompatibility, more predictable behavior, or improved privacy. Note that a\nfallback adapter may not be present on all systems.\u003c/p\u003e\n\n\u003ch2 id=\"new_origin_trials\" data-text=\"New origin trials\" tabindex=\"-1\"\u003eNew origin trials\u003c/h2\u003e\n\n\u003cp\u003eIn Chrome 136, you can opt into the following new\n\u003ca href=\"https://developer.chrome.com/docs/web-platform/origin-trials\"\u003eorigin trials\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"audio_output_devices_api_setdefaultsinkid\" data-text=\"Audio Output Devices API: setDefaultSinkId()\" tabindex=\"-1\"\u003eAudio Output Devices API: \u003ccode translate=\"no\" dir=\"ltr\"\u003esetDefaultSinkId()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis feature adds \u003ccode translate=\"no\" dir=\"ltr\"\u003esetDefaultSinkId()\u003c/code\u003e to MediaDevices, which enables the\ntop-level frame to change the default audio output device used by its subframes.\u003c/p\u003e\n\n\u003ch3 id=\"let_web_applications_understand_bimodal_performance_timings\" data-text=\"Let web applications understand bimodal performance timings\" tabindex=\"-1\"\u003eLet web applications understand bimodal performance timings\u003c/h3\u003e\n\n\u003cp\u003eWeb applications may suffer from bimodal distribution in page load performance,\ndue to factors outside of the web application\u0026#39;s control. For example:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhen a user agent first launches (a \u0026#34;cold start\u0026#34; scenario), it must perform\nmany expensive initialization tasks that compete for resources on the\nsystem.\u003c/li\u003e\n\u003cli\u003eBrowser extensions can affect the performance of a website. For example,\nsome extensions run additional code on every page you visit, which can\nincrease CPU usage and result in slower response times.\u003c/li\u003e\n\u003cli\u003eWhen a machine is busy performing intensive tasks, it can lead to slower\nloading of web pages.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn these scenarios, content the web app attempts to load will be in competition\nwith other work happening on the system. This makes it difficult to detect if\nperformance issues exist within web applications themselves, or because of\nexternal factors.\u003c/p\u003e\n\n\u003cp\u003eA new \u003ccode translate=\"no\" dir=\"ltr\"\u003econfidence\u003c/code\u003e field on the \u003ccode translate=\"no\" dir=\"ltr\"\u003ePerformanceNavigationTiming\u003c/code\u003e object will enable\ndevelopers to discern if the navigation timings are representative for their web\napplication.\u003c/p\u003e\n\n\u003ch3 id=\"device_bound_session_credentials\" data-text=\"Device Bound Session Credentials\" tabindex=\"-1\"\u003eDevice Bound Session Credentials\u003c/h3\u003e\n\n\u003cp\u003eA way for websites to securely bind a session to a single device.\u003c/p\u003e\n\n\u003cp\u003eIt lets servers have a session that\u0026#39;s securely bound to a device. The browser\nwill renew the session periodically as requested by the server, with proof of\npossession of a private key.\u003c/p\u003e\n\n\u003ch3 id=\"update_of_canvas_text_rendering_implementation\" data-text=\"Update of canvas text rendering implementation\" tabindex=\"-1\"\u003eUpdate of canvas text rendering implementation\u003c/h3\u003e\n\n\u003cp\u003eThe internals of CanvasRenderingContext2D and\nOffscreenCanvasRenderingContext2D\u0026#39;s \u003ccode translate=\"no\" dir=\"ltr\"\u003emeasureText()\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003efillText()\u003c/code\u003e, and\n\u003ccode translate=\"no\" dir=\"ltr\"\u003estrokeText()\u003c/code\u003e have been replaced by a new implementation that better supports\nRTL text and caching. This might affect performance and BIDI-text output, so\nthis origin trial allows for text-heavy canvas applications to try out the new\nimplementation and report any issues they may encounter.\u003c/p\u003e\n\n\u003ch2 id=\"deprecations_and_removals\" data-text=\"Deprecations and removals\" tabindex=\"-1\"\u003eDeprecations and removals\u003c/h2\u003e\n\n\u003cp\u003eThis version of Chrome introduces the following deprecations and removals.\nVisit ChromeStatus.com for lists of planned deprecations, current deprecations\nand previous removals.\u003c/p\u003e\n\n\u003cp\u003eThis release of Chrome deprecates two features.\u003c/p\u003e\n\n\u003ch3 id=\"deprecate_getters_of_intl_locale_info\" data-text=\"Deprecate getters of Intl Locale Info\" tabindex=\"-1\"\u003eDeprecate getters of Intl Locale Info\u003c/h3\u003e\n\n\u003cp\u003eIntl Locale Info API is a Stage 3 ECMAScript TC39 proposal to enhance the\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eIntl.Locale\u003c/code\u003e object by exposing Locale information, such as week data (first\nday in a week, weekend start day, weekend end day, minimum day in the first\nweek), and text direction hour cycle used in the locale. This change removes\nsome getters deprecated in a specification change since they shipped.\u003c/p\u003e\n\n\u003ch3 id=\"remove_htmlfencedframeelementcanloadopaqueurl\" data-text=\"Remove HTMLFencedFrameElement.canLoadOpaqueURL().\" tabindex=\"-1\"\u003eRemove \u003ccode translate=\"no\" dir=\"ltr\"\u003eHTMLFencedFrameElement.canLoadOpaqueURL()\u003c/code\u003e.\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003ecanLoadOpaqueURL()\u003c/code\u003e was replaced with \u003ccode translate=\"no\" dir=\"ltr\"\u003enavigator.canLoadAdAuctionFencedFrame()\u003c/code\u003e\nin 2023, and calling it has resulted in a deprecation console warning ever since\npointing developers to the new API. It does not make sense to have the function\nattached to \u003ccode translate=\"no\" dir=\"ltr\"\u003eHTMLFencedFrameElement\u003c/code\u003e and instead should be attached to the\n\u003ccode translate=\"no\" dir=\"ltr\"\u003enavigator\u003c/code\u003e object (which contains other fenced frame and ad auction methods).\u003c/p\u003e\n\n  \n\n  \n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "17 min read",
  "publishedTime": null,
  "modifiedTime": null
}
