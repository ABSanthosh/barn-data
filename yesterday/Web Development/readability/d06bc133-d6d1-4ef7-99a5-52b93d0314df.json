{
  "id": "d06bc133-d6d1-4ef7-99a5-52b93d0314df",
  "title": "Tailwind‚Äôs @apply Feature is Better Than it Sounds",
  "link": "https://css-tricks.com/tailwinds-apply-feature-is-better-than-it-sounds/",
  "description": "Most of the time, people showcase Tailwind's @apply feature with one of Tailwind's single-property utilities (which changes a single CSS declaration). When showcased this way, @apply doesn't sound promising at all. So obviously, nobody wants to use it. Personally, I think Tailwind's @apply feature is better than described. Tailwind‚Äôs @apply Feature is Better Than it Sounds originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Zell Liew",
  "published": "Thu, 10 Apr 2025 12:39:43 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "css preprocessors",
    "framework",
    "tailwind"
  ],
  "byline": "Zell Liew",
  "length": 9006,
  "excerpt": "Most of the time, people showcase Tailwind's @apply feature with one of Tailwind's single-property utilities (which changes a single CSS declaration). When showcased this way, @apply doesn't sound promising at all. So obviously, nobody wants to use it. Personally, I think Tailwind's @apply feature is better than described.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "By this point, it‚Äôs not a secret to most people that I like Tailwind. But, unknown to many people (who often jump to conclusions when you mention Tailwind), I don‚Äôt like vanilla Tailwind. In fact, I find most of it horrible and I shall refrain from saying further unkind words about it. But I recognize and see that Tailwind‚Äôs methodology has merits ‚Äî lots of them, in fact ‚Äî and they go a long way to making your styles more maintainable and performant. Today, I want to explore one of these merit-producing features that has been severely undersold ‚Äî Tailwind‚Äôs @apply feature. What @apply does Tailwind‚Äôs @apply features lets you ‚Äúapply‚Äù (or simply put, copy-and-paste) a Tailwind utility into your CSS. Most of the time, people showcase Tailwind‚Äôs @apply feature with one of Tailwind‚Äôs single-property utilities (which changes a single CSS declaration). When showcased this way, @apply doesn‚Äôt sound promising at all. It sounds downright stupid. So obviously, nobody wants to use it. /* Input */ .selector { @apply p-4; } /* Output */ .selector { padding: 1rem; } To make it worse, Adam Wathan recommends against using @apply, so the uptake couldn‚Äôt be worse. Confession: The `apply` feature in Tailwind basically only exists to trick people who are put off by long lists of classes into trying the framework.You should almost never use it üò¨Reuse your utility-littered HTML instead.https://t.co/x6y4ksDwrt‚Äî Adam Wathan (@adamwathan) February 9, 2020 Personally, I think Tailwind‚Äôs @apply feature is better than described. Tailwind‚Äôs @apply is like Sass‚Äôs @includes If you have been around during the time where Sass is the dominant CSS processing tool, you‚Äôve probably heard of Sass mixins. They are blocks of code that you can make ‚Äî in advance ‚Äî to copy-paste into the rest of your code. To create a mixin, you use @mixin To use a mixin, you use @includes // Defining the mixin @mixin some-mixin() { color: red; background: blue; } // Using the mixin .selector { @include some-mixin(); } /* Output */ .selector { color: red; background: blue; } Tailwind‚Äôs @apply feature works the same way. You can define Tailwind utilities in advance and use them later in your code. /* Defining the utility */ @utility some-utility { color: red; background: blue; } /* Applying the utility */ .selector { @apply some-utility; } /* Output */ .selector { color: red; background: blue; } Tailwind utilities are much better than Sass mixins Tailwind‚Äôs utilities can be used directly in the HTML, so you don‚Äôt have to write a CSS rule for it to work. @utility some-utility { color: red; background: blue; } \u003cdiv class=\"some-utility\"\u003e...\u003c/div\u003e On the contrary, for Sass mixins, you need to create an extra selector to house your @includes before using them in the HTML. That‚Äôs one extra step. Many of these extra steps add up to a lot. @mixin some-mixin() { color: red; background: blue; } .selector { @include some-mixin(); } /* Output */ .selector { color: red; background: blue; } \u003cdiv class=\"selector\"\u003e...\u003c/div\u003e Tailwind‚Äôs utilities can also be used with their responsive variants. This unlocks media queries straight in the HTML and can be a superpower for creating responsive layouts. \u003cdiv class=\"utility1 md:utility2\"\u003e‚Ä¶\u003c/div\u003e A simple and practical example One of my favorite ‚Äî and most easily understood ‚Äî examples of all time is a combination of two utilities that I‚Äôve built for Splendid Layouts (a part of Splendid Labz): vertical: makes a vertical layout horizontal: makes a horizontal layout Defining these two utilities is easy. For vertical, we can use flexbox with flex-direction set to column. For horizontal, we use flexbox with flex-direction set to row. @utility horizontal { display: flex; flex-direction: row; gap: 1rem; } @utility vertical { display: flex; flex-direction: column; gap: 1rem; } After defining these utilities, we can use them directly inside the HTML. So, if we want to create a vertical layout on mobile and a horizontal one on tablet or desktop, we can use the following classes: \u003cdiv class=\"vertical sm:horizontal\"\u003e...\u003c/div\u003e For those who are new to Tailwind, sm: here is a breakpoint variant that tells Tailwind to activate a class when it goes beyond a certain breakpoint. By default, sm is set to 640px, so the above HTML produces a vertical layout on mobile, then switches to a horizontal layout at 640px. If you prefer traditional CSS over composing classes like the example above, you can treat @apply like Sass @includes and use them directly in your CSS. \u003cdiv class=\"your-layout\"\u003e...\u003c/div\u003e .your-layout { @apply vertical; @media (width \u003e= 640px) { @apply horizontal; } } The beautiful part about both of these approaches is you can immediately see what‚Äôs happening with your layout ‚Äî in plain English ‚Äî without parsing code through a CSS lens. This means faster recognition and more maintainable code in the long run. Tailwind‚Äôs utilities are a little less powerful compared to Sass mixins Sass mixins are more powerful than Tailwind utilities because: They let you use multiple variables. They let you use other Sass features like @if and @for loops. @mixin avatar($size, $circle: false) { width: $size; height: $size; @if $circle { border-radius: math.div($size, 2); } } On the other hand, Tailwind utilities don‚Äôt have these powers. At the very maximum, Tailwind can let you take in one variable through its functional utilities. /* Tailwind Functional Utility */ @utility tab-* { tab-size: --value(--tab-size-*); } Fortunately, we‚Äôre not affected by this ‚Äúlack of power‚Äù much because we can take advantage of all modern CSS improvements ‚Äî including CSS variables. This gives you a ton of room to create very useful utilities. Let‚Äôs go through another example A second example I often like to showcase is the grid-simple utility that lets you create grids with CSS Grid easily. We can declare a simple example here: @utility grid-simple { display: grid; grid-template-columns: repeat(var(--cols), minmax(0, 1fr)); gap: var(--gap, 1rem); } By doing this, we have effectively created a reusable CSS grid (and we no longer have to manually declare minmax everywhere). After we have defined this utility, we can use Tailwind‚Äôs arbitrary properties to adjust the number of columns on the fly. \u003cdiv class=\"grid-simple [--cols:3]\"\u003e \u003cdiv class=\"item\"\u003e...\u003c/div\u003e \u003cdiv class=\"item\"\u003e...\u003c/div\u003e \u003cdiv class=\"item\"\u003e...\u003c/div\u003e \u003c/div\u003e To make the grid responsive, we can add Tailwind‚Äôs responsive variants with arbitrary properties so we only set --cols:3 on a larger breakpoint. \u003cdiv class=\"grid-simple sm:[--cols:3]\"\u003e \u003cdiv class=\"item\"\u003e...\u003c/div\u003e \u003cdiv class=\"item\"\u003e...\u003c/div\u003e \u003cdiv class=\"item\"\u003e...\u003c/div\u003e \u003c/div\u003e This makes your layouts very declarative. You can immediately tell what‚Äôs going on when you read the HTML. Now, on the other hand, if you‚Äôre uncomfortable with too much Tailwind magic, you can always use @apply to copy-paste the utility into your CSS. This way, you don‚Äôt have to bother writing repeat and minmax declarations every time you need a grid that grid-simple can create. .your-layout { @apply grid-simple; @media (width \u003e= 640px) { --cols: 3; } } \u003cdiv class=\"your-layout\"\u003e ... \u003c/div\u003e By the way, using @apply this way is surprisingly useful for creating complex layouts! But that seems out of scope for this article, so I‚Äôll be happy to show you an example another day. Wrapping up Tailwind‚Äôs utilities are very powerful by themselves, but they‚Äôre even more powerful if you allow yourself to use @apply (and allow yourself to detach from traditional Tailwind advice). By doing this, you gain access to Tailwind as a tool instead of it being a dogmatic approach. To make Tailwind‚Äôs utilities even more powerful, you might want to consider building utilities that can help you create layouts and nice visual effects quickly and easily. I‚Äôve built a handful of these utilities for Splendid Labz, and I‚Äôm happy to share them with you if you‚Äôre interested! Just check out Splendid Layouts to see a subset of the utilities I‚Äôve prepared. By the way, the utilities I showed you above are watered-down versions of the actual ones I‚Äôm using in Splendid Labz. One more note: When writing this, Splendid Layouts work with Tailwind 3, not Tailwind 4. I‚Äôm working on a release soon, so sign up for updates if you‚Äôre interested! Unorthodox Tailwind You can probably tell by now that I‚Äôm using Tailwind in an unorthodox manner ‚Äî one that CSS-loving people will likely enjoy. I‚Äôm writing up my detailed methodology where I share everything I know about making Tailwind work synergistically with CSS. If you enjoyed this post, you might enjoy Unorthodox Tailwind. It‚Äôs still in pre-order mode, so get $20 off for a limited time.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/tailwind-apply.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eBy this point, it‚Äôs not a secret to most people that I like Tailwind.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut, unknown to many people (who often jump to conclusions when you mention Tailwind), I don‚Äôt like vanilla Tailwind. In fact, I find most of it horrible and I shall refrain from saying further unkind words about it.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut I recognize and see that Tailwind‚Äôs methodology has merits ‚Äî lots of them, in fact ‚Äî and they go a long way to making your styles more maintainable and performant.\u003c/p\u003e\n\n\n\n\u003cp\u003eToday, I want to explore one of these merit-producing features that has been \u003cem\u003eseverely\u003c/em\u003e undersold ‚Äî Tailwind‚Äôs \u003ccode\u003e@apply\u003c/code\u003e feature.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"what-apply-does\"\u003eWhat \u003ccode\u003e@apply\u003c/code\u003e does\u003c/h3\u003e\n\n\n\u003cp\u003eTailwind‚Äôs \u003ccode\u003e@apply\u003c/code\u003e features lets you ‚Äúapply‚Äù (or simply put, copy-and-paste) a Tailwind utility into your CSS.\u003c/p\u003e\n\n\n\n\u003cp\u003eMost of the time, people showcase Tailwind‚Äôs \u003ccode\u003e@apply\u003c/code\u003e feature with one of Tailwind‚Äôs single-property utilities (which changes a single CSS declaration). When showcased this way, \u003ccode\u003e@apply\u003c/code\u003e doesn‚Äôt sound promising at all. It sounds downright stupid. So obviously, nobody wants to use it.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"Tailwind\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Input */\n.selector {\n  @apply p-4;\n}\n\n/* Output */\n.selector {\n  padding: 1rem;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eTo make it worse, Adam Wathan recommends against using \u003ccode\u003e@apply\u003c/code\u003e, so the uptake couldn‚Äôt be worse.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\u003cdiv lang=\"en\" dir=\"ltr\"\u003e\u003cp\u003eConfession: The `apply` feature in Tailwind basically only exists to trick people who are put off by long lists of classes into trying the framework.\u003c/p\u003e\u003cp\u003eYou should almost never use it üò¨\u003c/p\u003e\u003cp\u003eReuse your utility-littered HTML instead.\u003ca href=\"https://t.co/x6y4ksDwrt\"\u003ehttps://t.co/x6y4ksDwrt\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e‚Äî Adam Wathan (@adamwathan) \u003ca href=\"https://twitter.com/adamwathan/status/1226511611592085504?ref_src=twsrc%5Etfw\" rel=\"noopener\"\u003eFebruary 9, 2020\u003c/a\u003e\u003c/blockquote\u003e \n\n\n\n\u003cp\u003ePersonally, I think Tailwind‚Äôs \u003ccode\u003e@apply\u003c/code\u003e feature is better than described.\u003c/p\u003e\n\n\n\u003ch3 id=\"tailwind-s-apply-is-like-sass-s-includes-\"\u003eTailwind‚Äôs \u003ccode\u003e@apply\u003c/code\u003e is like Sass‚Äôs \u003ccode\u003e@includes\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eIf you have been around during the time where Sass is the dominant CSS processing tool, you‚Äôve probably heard of Sass mixins. They are blocks of code that you can make ‚Äî in advance ‚Äî to copy-paste into the rest of your code.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eTo create a mixin, you use \u003ccode\u003e@mixin\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eTo use a mixin, you use \u003ccode\u003e@includes\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre rel=\"SCSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e// Defining the mixin\n@mixin some-mixin() {\n  color: red; \n  background: blue; \n}\n\n// Using the mixin\n.selector {\n  @include some-mixin(); \n}\n\n/* Output */\n.selector {\n  color: red; \n  background: blue; \n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eTailwind‚Äôs \u003ccode\u003e@apply\u003c/code\u003e feature works the same way. You can define Tailwind utilities in advance and use them later in your code.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"Tailwind\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Defining the utility */\n@utility some-utility {\n  color: red; \n  background: blue; \n}\n\n/* Applying the utility */\n.selector {\n  @apply some-utility; \n}\n\n/* Output */\n.selector {\n  color: red; \n  background: blue; \n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"tailwind-utilities-are-much-better-than-sass-mixins\"\u003eTailwind utilities are much better than Sass mixins\u003c/h3\u003e\n\n\n\u003cp\u003eTailwind‚Äôs utilities can be used directly in the HTML, so you don‚Äôt have to write a CSS rule for it to work.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"Tailwind\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@utility some-utility {\n  color: red; \n  background: blue; \n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;some-utility\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOn the contrary, for Sass mixins, you need to create an extra selector to house your \u003ccode\u003e@includes\u003c/code\u003e before using them in the HTML. That‚Äôs one extra step. Many of these extra steps add up to a lot.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"SCSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@mixin some-mixin() {\n  color: red; \n  background: blue; \n}\n\n.selector {\n  @include some-mixin(); \n}\n\n/* Output */\n.selector {\n  color: red; \n  background: blue; \n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;selector\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eTailwind‚Äôs utilities can also be used with their responsive variants. This unlocks media queries straight in the HTML and can be a superpower for creating responsive layouts.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;utility1 md:utility2\u0026#34;\u0026gt;‚Ä¶\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"a-simple-and-practical-example\"\u003eA simple and practical example\u003c/h3\u003e\n\n\n\u003cp\u003eOne of my favorite ‚Äî and most easily understood ‚Äî examples of all time is a combination of two utilities that I‚Äôve built for \u003ca href=\"https://splendidlabz.com/docs/layouts/\" rel=\"noopener\"\u003eSplendid Layouts\u003c/a\u003e (a part of \u003ca href=\"https://splendidlabz.com\" rel=\"noopener\"\u003eSplendid Labz\u003c/a\u003e):\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evertical\u003c/code\u003e: makes a vertical layout\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ehorizontal\u003c/code\u003e: makes a horizontal layout\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eDefining these two utilities is easy.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eFor \u003ccode\u003evertical\u003c/code\u003e, we can use flexbox with \u003ccode\u003eflex-direction\u003c/code\u003e set to \u003ccode\u003ecolumn\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eFor \u003ccode\u003ehorizontal\u003c/code\u003e, we use flexbox with \u003ccode\u003eflex-direction\u003c/code\u003e set to \u003ccode\u003erow\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre rel=\"Tailwind\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@utility horizontal {\n  display: flex;\n  flex-direction: row;\n  gap: 1rem;\n}\n\n@utility vertical {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAfter defining these utilities, we can use them directly inside the HTML. So, if we want to create a vertical layout on mobile and a horizontal one on tablet or desktop, we can use the following classes:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;vertical sm:horizontal\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFor those who are new to Tailwind, \u003ccode\u003esm:\u003c/code\u003e here is a breakpoint variant that tells Tailwind to activate a class when it goes beyond a certain breakpoint. By default, \u003ccode\u003esm\u003c/code\u003e is set to \u003ccode\u003e640px\u003c/code\u003e, so the above HTML produces a vertical layout on mobile, then switches to a horizontal layout at \u003ccode\u003e640px\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIf you prefer traditional CSS over composing classes like the example above, you can treat \u003ccode\u003e@apply\u003c/code\u003e like Sass \u003ccode\u003e@includes\u003c/code\u003e and use them directly in your CSS.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;your-layout\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"Tailwind\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.your-layout {\n  @apply vertical; \n\n  @media (width \u0026gt;= 640px) {\n    @apply horizontal;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe beautiful part about both of these approaches is you can immediately see what‚Äôs happening with your layout ‚Äî in plain English ‚Äî without parsing code through a CSS lens. This means faster recognition and more maintainable code in the long run.\u003c/p\u003e\n\n\n\u003ch3 id=\"tailwind-s-utilities-are-a-little-less-powerful-compared-to-sass-mixins\"\u003eTailwind‚Äôs utilities are a little less powerful compared to Sass mixins\u003c/h3\u003e\n\n\n\u003cp\u003eSass mixins are more powerful than Tailwind utilities because:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eThey let you use multiple variables.\u003c/li\u003e\n\n\n\n\u003cli\u003eThey let you use other Sass features like \u003ccode\u003e@if\u003c/code\u003e and \u003ccode\u003e@for\u003c/code\u003e loops.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre rel=\"SCSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@mixin avatar($size, $circle: false) {\n  width: $size;\n  height: $size;\n\n  @if $circle {\n    border-radius: math.div($size, 2);\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOn the other hand, Tailwind utilities don‚Äôt have these powers. At the very maximum, Tailwind can let you take in one variable through its functional utilities.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"Tailwind\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Tailwind Functional Utility */\n@utility tab-* { \n  tab-size: --value(--tab-size-*);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFortunately, we‚Äôre not affected by this ‚Äúlack of power‚Äù much because we can take advantage of all modern CSS improvements ‚Äî including CSS variables. This gives you a ton of room to create very useful utilities.\u003c/p\u003e\n\n\n\u003ch3 id=\"let-s-go-through-another-example\"\u003eLet‚Äôs go through another example\u003c/h3\u003e\n\n\n\u003cp\u003eA second example I often like to showcase is the \u003ccode\u003egrid-simple\u003c/code\u003e utility that lets you create grids with CSS Grid easily.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe can declare a simple example here:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"Tailwind\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@utility grid-simple {\n  display: grid;\n  grid-template-columns: repeat(var(--cols), minmax(0, 1fr));\n  gap: var(--gap, 1rem);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBy doing this, we have effectively created a reusable CSS grid (and we no longer have to manually declare \u003ccode\u003eminmax\u003c/code\u003e everywhere).\u003c/p\u003e\n\n\n\n\u003cp\u003eAfter we have defined this utility, we can use Tailwind‚Äôs arbitrary properties to adjust the number of columns on the fly.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;grid-simple [--cols:3]\u0026#34;\u0026gt; \n  \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eTo make the grid responsive, we can add Tailwind‚Äôs responsive variants with arbitrary properties so we only set \u003ccode\u003e--cols:3\u003c/code\u003e on a larger breakpoint.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;grid-simple sm:[--cols:3]\u0026#34;\u0026gt; \n  \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThis makes your layouts very declarative. You can immediately tell what‚Äôs going on when you read the HTML.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow, on the other hand, if you‚Äôre uncomfortable with too much Tailwind magic, you can always use \u003ccode\u003e@apply\u003c/code\u003e to copy-paste the utility into your CSS. This way, you don‚Äôt have to bother writing \u003ccode\u003erepeat\u003c/code\u003e and \u003ccode\u003eminmax\u003c/code\u003e declarations every time you need a grid that \u003ccode\u003egrid-simple\u003c/code\u003e can create.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"Tailwind\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.your-layout {\n  @apply grid-simple; \n  @media (width \u0026gt;= 640px) {\n    --cols: 3;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;your-layout\u0026#34;\u0026gt; ... \u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBy the way, using \u003ccode\u003e@apply\u003c/code\u003e this way is surprisingly useful for creating complex layouts! But that seems out of scope for this article, so I‚Äôll be happy to show you an example another day.\u003c/p\u003e\n\n\n\u003ch3 id=\"wrapping-up\"\u003eWrapping up\u003c/h3\u003e\n\n\n\u003cp\u003eTailwind‚Äôs utilities are very powerful by themselves, but they‚Äôre even more powerful if you allow yourself to use \u003ccode\u003e@apply\u003c/code\u003e (and allow yourself to detach from traditional Tailwind advice). By doing this, you gain access to Tailwind as a tool instead of it being a dogmatic approach.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo make Tailwind‚Äôs utilities even more powerful, you might want to consider building utilities that can help you create layouts and nice visual effects quickly and easily.\u003c/p\u003e\n\n\n\n\u003cp\u003eI‚Äôve built a handful of these utilities for \u003ca href=\"https://splendidlabz.com\" rel=\"noopener\"\u003eSplendid Labz\u003c/a\u003e, and I‚Äôm happy to share them with you if you‚Äôre interested! Just check out \u003ca href=\"https://splendidlabz.com/docs/layouts/getting-started/introduction/\" rel=\"noopener\"\u003eSplendid Layouts\u003c/a\u003e to see a subset of the utilities I‚Äôve prepared.\u003c/p\u003e\n\n\n\n\u003cp\u003eBy the way, the utilities I showed you above are watered-down versions of the actual ones I‚Äôm using in Splendid Labz.\u003c/p\u003e\n\n\n\n\u003cp\u003eOne more note: When writing this, Splendid Layouts work with Tailwind 3, not Tailwind 4. I‚Äôm working on a release soon, so \u003ca href=\"https://splendidlabz.com/newsletter/\" rel=\"noopener\"\u003esign up for updates\u003c/a\u003e if you‚Äôre interested!\u003c/p\u003e\n\n\n\u003ch3 id=\"unorthodox-tailwind\"\u003eUnorthodox Tailwind \u003c/h3\u003e\n\n\n\u003cp\u003eYou can probably tell by now that I‚Äôm using Tailwind in an unorthodox manner ‚Äî one that CSS-loving people will likely enjoy. I‚Äôm writing up my detailed methodology where I share everything I know about making Tailwind work synergistically with CSS. If you enjoyed this post, you might enjoy \u003ca href=\"https://magicaldevschool.com/courses/unorthodox-tailwind/\" rel=\"noopener\"\u003e\u003cstrong\u003eUnorthodox Tailwind\u003c/strong\u003e\u003c/a\u003e. It‚Äôs still in pre-order mode, so get $20 off for a limited time.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-04-10T06:39:43-06:00",
  "modifiedTime": "2025-04-11T08:56:37-06:00"
}
