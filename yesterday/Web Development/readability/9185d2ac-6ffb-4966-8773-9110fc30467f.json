{
  "id": "9185d2ac-6ffb-4966-8773-9110fc30467f",
  "title": "Using \u0026 Styling the Details Element",
  "link": "https://css-tricks.com/using-styling-the-details-element/",
  "description": "Now that we're 5+ years into the details element, we know more about it than ever before. I thought I'd round that information up so it's in one place I can reference in the future without having to search the site ‚Äî and other sites ‚Äî to find it. Using \u0026 Styling the Details Element originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Wed, 26 Feb 2025 16:07:14 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Notes",
    "details/summary",
    "html elements"
  ],
  "byline": "Geoff Graham",
  "length": 12501,
  "excerpt": "Now that we're 5+ years into the details element, we know more about it than ever before. I thought I'd round that information up so it's in one place I can reference in the future without having to search the site ‚Äî and other sites ‚Äî to find it.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "You can find the \u003cdetails\u003e element all over the web these days. We were excited about it when it first dropped and toyed with using it as a menu back in 2019 (but probably don‚Äôt) among many other experiments. John Rhea made an entire game that combines \u003cdetails\u003e with the Popover API! Now that we‚Äôre 5+ years into \u003cdetails\u003e, we know more about it than ever before. I thought I‚Äôd round that information up so it‚Äôs in one place I can reference in the future without having to search the site ‚Äî and other sites ‚Äî to find it. The basic markup It‚Äôs a single element: \u003cdetails\u003e Open and close the element to toggle this content. \u003c/details\u003e That ‚Äúdetails‚Äù label is a default. We can insert a \u003csummary\u003e element to come up with something custom: \u003cdetails\u003e \u003csummary\u003eToggle content\u003c/summary\u003e Open and close the element to toggle this content. \u003c/details\u003e From here, the world is sorta our oyster because we can stuff any HTML we want inside the element: \u003cdetails\u003e \u003csummary\u003eToggle content\u003c/summary\u003e \u003cp\u003eOpen and close the element to toggle this content.\u003c/p\u003e \u003cimg src=\"path/to/image.svg\" alt=\"\"\u003e \u003c/details\u003e The content is (sorta) searchable The trouble with tucking content inside an element like this is that it‚Äôs hidden by default. Early on, this was considered an inaccessible practice because the content was undetected by in-page searching (like using CMD+F on the page), but that‚Äôs since changed, at least in Chrome, which will open the \u003cdetails\u003e element and reveal the content if it discovers a matched term. That‚Äôs unfortunately not the case in Firefox and Safari, both of which skip the content stuffed inside a closed \u003cdetails\u003e element when doing in-page searches at the time I‚Äôm writing this. But it‚Äôs even more nuanced than that because Firefox (testing 134.0.1) matches searches when the \u003cdetails\u003e element is open, while Safari (testing 18.1) skips it altogether. That could very well change by the end of this year since searchability is one of the items being tackled in Interop 2025. So, as for now, it‚Äôs a good idea to keep important content out of a \u003cdetails\u003e element when possible. For example, \u003cdetails\u003e is often used as a pattern for Frequently Asked Questions, where each ‚Äúquestion‚Äù is an expandable ‚Äúanswer‚Äù that reveals additional information. That might not be the best idea if that content should be searchable on the page, at least for now. Open one at a time All we have to do is give each \u003cdetails\u003e a matching name attribute: \u003cdetails name=\"notes\"\u003e \u003csummary\u003eOpen Note\u003c/summary\u003e \u003cp\u003e ... \u003c/p\u003e \u003c/details\u003e \u003cdetails name=\"notes\"\u003e \u003c!-- etc. --\u003e \u003c/details\u003e \u003cdetails name=\"notes\"\u003e \u003c!-- etc. --\u003e \u003c/details\u003e \u003cdetails name=\"notes\"\u003e \u003c!-- etc. --\u003e \u003c/details\u003e This allows the elements to behave a lot more like true accordions, where one panel collapses when another expands. Style the marker The marker is that little triangle that indicates whether the \u003cdetails\u003e element is open or closed. We can use the ::marker pseudo-element to style it, though it does come with constraints, namely that all we can do is change the color and font size, at least in Chrome and Firefox which both fully support ::marker. Safari partially supports it in the sense that it works for ordered and unordered list items (e.g., li::marker), but not for \u003cdetails\u003e (e.g., summary::marker). Let‚Äôs look at an example that styles the markers for both \u003cdetails\u003e and an unordered list. At the time I‚Äôm writing this, Chrome and Firefox support styling the ::marker in both places, but Safari only works with the unordered list. Notice how the ::marker selector in that last example selects both the \u003cdetails\u003e element and the unordered list element. We need to scope the selector to the \u003cdetails\u003e element if we want to target just that marker, right? /* This doesn't work! */ details::marker { /* styles */ } Nope! Instead, we need to scope it to the \u003csummary\u003e element. That‚Äôs what the marker is actually attached to. /* This does work */ summary::marker { /* styles */ } You might think that we can style the marker even if we were to leave the summary out of the markup. After all, HTML automatically inserts one for us by default. But that‚Äôs not the case. The \u003csummary\u003e element has to be present in the markup for it to match styles. You‚Äôll see in the following demo that I‚Äôm using a generic ::marker selector that should match both \u003cdetails\u003e elements, but only the second one matches because it contains a \u003csummary\u003e in the HTML. Again, only Chrome and Firefox support for the time being: You might also think that we can swap out the triangle for something else since that‚Äôs something we can absolutely do with list items by way of the list-style-type property: /* Does not work! */ summary::marker { list-style-type: square; } ‚Ä¶but alas, that‚Äôs not the case. An article over at web.dev says that it does work, but I‚Äôve been unsuccessful at getting a proper example to work in any browser. That isn‚Äôt to say it shouldn‚Äôt work that way, but the specification isn‚Äôt explicit about it, so I have no expectations one way or another. Perhaps we‚Äôll see an edit in a future specification that gets specific with \u003cdetails\u003e and to what extent CSS can modify the marker. Or maybe we won‚Äôt. It would be nice to have some way to chuck the triangle in favor of something else. And what about removing the marker altogether? All we need to do is set the content property on it with an empty string value and voil√†! Once the marker is gone, you could decide to craft your own custom marker with CSS by hooking into the \u003csummary\u003e element‚Äôs ::before pseudo-element. Just take note that Safari displays both the default marker and the custom one since it does not support the ::marker pseudo-element at the time I‚Äôm writing this. You‚Äôre probably as tired reading that as I am typing it. ü§ì Style the content Let‚Äôs say all you need to do is slap a background color on the content inside the \u003cdetails\u003e element. You could select the entire thing and set a background on it: details { background: oklch(95% 0.1812 38.35); } That‚Äôs cool, but it would be better if it only set the background color when the element is in an open state. We can use an attribute selector for that: details[open] { background: oklch(95% 0.1812 38.35); } OK, but what about the \u003csummary\u003e element? What if you don‚Äôt want that included in the background? Well, you could wrap the content in a \u003cdiv\u003e and select that instead: details[open] div { background: oklch(95% 0.1812 38.35); } What‚Äôs even better is using the ::details-content pseudo-element as a selector. This way, we can select everything inside the \u003cdetails\u003e element without reaching for more markup: ::details-content { background: oklch(95% 0.1812 38.35); } There‚Äôs no need to include details in the selector since ::details-content is only ever selectable in the context of a \u003cdetails\u003e element. So, it‚Äôs like we‚Äôre implicitly writing details::details-content. The ::details-content pseudo is still gaining browser support when I‚Äôm writing this, so it‚Äôs worth keeping an eye on it and using it cautiously in the meantime. Animate the opening and closing Click a default \u003cdetails\u003e element and it immediately snaps open and closed. I‚Äôm not opposed to that, but there are times when it might look (and feel) nice to transition like a smooth operator between the open and closed states. It used to take some clever hackery to pull this off, as Louis Hoebregts demonstrated using the Web Animations API several years back. Robin Rendle shared another way that uses a CSS animation: details[open] p { animation: animateDown 0.2s linear forwards; } @keyframes animateDown { 0% { opacity: 0; transform: translatey(-15px); } 100% { opacity: 1; transform: translatey(0); } } He sprinkled in a little JavaScript to make his final example fully interactive, but you get the idea: Notice what‚Äôs happening in there. Robin selects the paragraph element inside the \u003cdetails\u003e element when it is in an open state then triggers the animation. And that animation uses clever positioning to make it happen. That‚Äôs because there‚Äôs no way to know exactly how tall the paragraph ‚Äî or the parent \u003cdetails\u003e element ‚Äî is when expanded. We have to use explicit sizing, padding, and positioning to pull it all together. But guess what? Since then, we got a big gift from CSS that allows us to animate an element from zero height to its auto (i.e., intrinsic) height, even if we don‚Äôt know the exact value of that auto height in advance. We start with zero height and clip the overflow so nothing hangs out. And since we have the ::details-content pseudo, we can directly select that rather than introducing more markup to the HTML. ::details-content { transition: height 0.5s ease, content-visibility 0.5s ease allow-discrete; height: 0; overflow: clip; } Now we can opt into auto-height transitions using the interpolate-size property which was created just to enable transitions to keyword values, such as auto. We set it on the :root element so that it‚Äôs available everywhere, though you could scope it directly to a more specific instance if you‚Äôd like. :root { interpolate-size: allow-keywords; } Next up, we select the \u003cdetails\u003e element in its open state and set the ::details-content height to auto: [open]::details-content { height: auto; } We can make it so that this only applies if the browser supports auto-height transitions: @supports (interpolate-size: allow-keywords) { :root { interpolate-size: allow-keywords; } [open]::details-content { height: auto; } } And finally, we set the transition on the ::details-content pseudo to activate it: ::details-content { transition: height 0.5s ease; height: 0; overflow: clip; } /* Browser supports interpolate-size */ @supports (interpolate-size: allow-keywords) { :root { interpolate-size: allow-keywords; } [open]::details-content { height: auto; } } But wait! Notice how the animation works when opening \u003cdetails\u003e, but things snap back when closing it. Bramus notes that we need to include the content-visibility property in the transition because (1) it is implicitly set on the element and (2) it maps to a hidden state when the \u003cdetails\u003e element is closed. That‚Äôs what causes the content to snap to hidden when closing the \u003cdetails\u003e. So, let‚Äôs add content-visibility to our list of transitions: ::details-content { transition: height 0.5s ease, content-visibility 0.5s ease allow-discrete; height: 0; overflow: clip; } /* Browser supports interpolate-size */ @supports (interpolate-size: allow-keywords) { :root { interpolate-size: allow-keywords; } [open]::details-content { height: auto; } } That‚Äôs much better: Note the allow-discrete keyword which we need to set since content-visibility is a property that only supports discrete animations and transitions. Interesting tricks Chris has a demo that uses \u003cdetails\u003e as a system for floating footnotes in content. I forked it and added the name attribute to each footnote so that they close when another one is opened. I mentioned John Rhea‚Äôs ‚ÄúPop(over) The Balloons‚Äù game at the top of these notes: Bramus with a slick-looking horizontal accordion forked from another example. Note how the \u003cdetails\u003e element is used as a flex container: Chris with another clever trick that uses \u003cdetails\u003e to play and pause animated GIF image files. It‚Äôs doesn‚Äôt actually ‚Äúpause‚Äù but the effect makes it seem like it does. Ryan Trimble with styling \u003cdetails\u003e as a dropdown menu and then using anchor positioning to set where the content opens. References HTML Living Standard (Section 4.11.1) by WHATWG ‚ÄúQuick Reminder that Details/Summary is the Easiest Way Ever to Make an Accordion‚Äù by Chris Coyier ‚ÄúA (terrible?) way to do footnotes in¬†HTML‚Äù by Chris Coyier ‚ÄúUsing \u003cdetails\u003e for Menus and Dialogs is an Interesting¬†Idea‚Äù by Chris Coyier ‚ÄúPausing a GIF with¬†details/summary‚Äù by Chris Coyier ‚ÄúExploring What the Details and Summary Elements Can¬†Do‚Äù by Robin Rendle ‚ÄúMore Details on \u003cdetails\u003e‚Äú by Geoff Graham ‚Äú::details-content‚Äú by Geoff Graham ‚ÄúMore options for styling \u003cdetails\u003e‚Äú by Bramus ‚ÄúHow to Animate the Details Element Using¬†WAAPI‚Äù by Louis Hoebregts ‚ÄúDetails and summary‚Äù by web.dev",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/details-box.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eYou can find the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element all over the web these days. We were \u003ca href=\"https://css-tricks.com/quick-reminder-that-details-summary-is-the-easiest-way-ever-to-make-an-accordion/\"\u003eexcited about it\u003c/a\u003e when it first dropped and toyed with \u003ca href=\"https://css-tricks.com/using-details-for-menus-and-dialogs-is-an-interesting-idea/\"\u003eusing it as a menu\u003c/a\u003e back in 2019 (but \u003ca href=\"https://css-tricks.com/more-details-on-details/\"\u003eprobably don‚Äôt\u003c/a\u003e) among \u003ca href=\"https://css-tricks.com/exploring-what-the-details-and-summary-elements-can-do/\"\u003emany other experiments\u003c/a\u003e. John Rhea made an entire game that \u003ca href=\"https://css-tricks.com/popover-the-balloons/\"\u003ecombines \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e with the Popover API\u003c/a\u003e!\u003c/p\u003e\n\n\n\n\u003cp\u003eNow that we‚Äôre 5+ years into \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e, we know more about it than ever before. I thought I‚Äôd round that information up so it‚Äôs in one place I can reference in the future without having to search the site ‚Äî and other sites ‚Äî to find it.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"the-basic-markup\"\u003eThe basic markup\u003c/h3\u003e\n\n\n\u003cp\u003eIt‚Äôs a single element:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details\u0026gt;\n  Open and close the element to toggle this content.\n\u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThat ‚Äúdetails‚Äù label is a default. We can insert a \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e element to come up with something custom:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details\u0026gt;\n  \u0026lt;summary\u0026gt;Toggle content\u0026lt;/summary\u0026gt;\n  Open and close the element to toggle this content.\n\u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eFrom here, the world is sorta our oyster because we can stuff any HTML we want inside the element:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details\u0026gt;\n  \u0026lt;summary\u0026gt;Toggle content\u0026lt;/summary\u0026gt;\n  \u0026lt;p\u0026gt;Open and close the element to toggle this content.\u0026lt;/p\u0026gt;\n  \u0026lt;img src=\u0026#34;path/to/image.svg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\n\u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"the-content-is-sorta-searchable\"\u003eThe content is (sorta) searchable\u003c/h3\u003e\n\n\n\u003cp\u003eThe trouble with tucking content inside an element like this is that it‚Äôs hidden by default. Early on, this was considered an inaccessible practice because the content was undetected by in-page searching (like using \u003ccode\u003eCMD\u003c/code\u003e+\u003ccode\u003eF\u003c/code\u003e on the page), but that‚Äôs since changed, at least in Chrome, which will open the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element and reveal the content if it discovers a matched term.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"2034\" height=\"1054\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.56.22%E2%80%AFAM.png?resize=2034%2C1054\u0026amp;ssl=1\" alt=\"Searching for the word \u0026#39;toggle\u0026#39; in Chrome. The term is highlighted in the open details element.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.56.22%E2%80%AFAM.png?w=2034\u0026amp;ssl=1 2034w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.56.22%E2%80%AFAM.png?resize=300%2C155\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.56.22%E2%80%AFAM.png?resize=1024%2C531\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.56.22%E2%80%AFAM.png?resize=768%2C398\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/Screenshot-2025-01-15-at-8.56.22%E2%80%AFAM.png?resize=1536%2C796\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThat‚Äôs unfortunately not the case in Firefox and Safari, both of which skip the content stuffed inside a closed \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element when doing in-page searches at the time I‚Äôm writing this. But it‚Äôs even more nuanced than that because Firefox (testing 134.0.1) matches searches when the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element is open, while Safari (testing 18.1) skips it altogether. That could very well change by the end of this year since \u003ca href=\"https://github.com/web-platform-tests/interop/blob/main/2025/README.md#details-element\" rel=\"noopener\"\u003esearchability is one of the items being tackled in Interop 2025\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo, as for now, it‚Äôs a good idea to keep important content out of a \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element when possible. For example, \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e is often used as a pattern for Frequently Asked Questions, where each ‚Äúquestion‚Äù is an expandable ‚Äúanswer‚Äù that reveals additional information. That might not be the best idea if that content should be searchable on the page, at least for now.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"open-one-at-a-time\"\u003eOpen one at a time\u003c/h3\u003e\n\n\n\u003cp\u003eAll we have to do is give each \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e a matching \u003ccode\u003ename\u003c/code\u003e attribute:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details name=\u0026#34;notes\u0026#34;\u0026gt;\n  \u0026lt;summary\u0026gt;Open Note\u0026lt;/summary\u0026gt;\n  \u0026lt;p\u0026gt; ... \u0026lt;/p\u0026gt;\n\u0026lt;/details\u0026gt;\n\u0026lt;details name=\u0026#34;notes\u0026#34;\u0026gt; \u0026lt;!-- etc. --\u0026gt; \u0026lt;/details\u0026gt;\n\u0026lt;details name=\u0026#34;notes\u0026#34;\u0026gt; \u0026lt;!-- etc. --\u0026gt; \u0026lt;/details\u0026gt;\n\u0026lt;details name=\u0026#34;notes\u0026#34;\u0026gt; \u0026lt;!-- etc. --\u0026gt; \u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis allows the elements to behave a lot more like true accordions, where one panel collapses when another expands.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"style-the-marker\"\u003eStyle the marker\u003c/h3\u003e\n\n\n\u003cp\u003eThe marker is that little triangle that indicates whether the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element is open or closed. We can use the \u003ccode\u003e::marker\u003c/code\u003e pseudo-element to style it, though it does come with constraints, namely that all we can do is change the color and font size, at least in Chrome and Firefox which both fully support \u003ccode\u003e::marker\u003c/code\u003e. Safari partially supports it in the sense that it works for ordered and unordered list items (e.g., \u003ccode\u003eli::marker\u003c/code\u003e), but not for \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e (e.g., \u003ccode\u003esummary::marker\u003c/code\u003e).\u003c/p\u003e\n\n\n\n\n\u003cbaseline-status featureid=\"marker\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003eLet‚Äôs look at an example that styles the markers for both \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e and an unordered list. At the time I‚Äôm writing this, Chrome and Firefox support styling the \u003ccode\u003e::marker\u003c/code\u003e in both places, but Safari only works with the unordered list.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eNotice how the \u003ccode\u003e::marker\u003c/code\u003e selector in that last example selects both the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element \u003cem\u003eand\u003c/em\u003e the unordered list element. We need to scope the selector to the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element if we want to target just that marker, right?\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* This doesn\u0026#39;t work! */\ndetails::marker { \n  /* styles */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNope! Instead, we need to scope it to the \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e element. That‚Äôs what the marker is actually attached to.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* This does work */\nsummary::marker { \n  /* styles */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou might think that we can style the marker even if we were to leave the summary out of the markup. After all, HTML automatically inserts one for us by default. But that‚Äôs not the case. The \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e element has to be present in the markup for it to match styles. You‚Äôll see in the following demo that I‚Äôm using a generic \u003ccode\u003e::marker\u003c/code\u003e selector that should match both \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e elements, but only the second one matches because it contains a \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e in the HTML. Again, only Chrome and Firefox support for the time being:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eYou might also think that we can swap out the triangle for something else since that‚Äôs something we can absolutely do with list items by way of the \u003ccode\u003elist-style-type\u003c/code\u003e property:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Does not work! */\nsummary::marker {\n  list-style-type: square;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e‚Ä¶but alas, that‚Äôs not the case. An article over at web.dev \u003ca href=\"https://web.dev/learn/html/details/#toggling_the_summary_marker\" rel=\"noopener\"\u003esays that it does work\u003c/a\u003e, but I‚Äôve been unsuccessful at getting a proper example to work in any browser.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThat isn‚Äôt to say it \u003cem\u003eshouldn‚Äôt\u003c/em\u003e work that way, but \u003ca href=\"https://drafts.csswg.org/css-pseudo/#marker-pseudo\" rel=\"noopener\"\u003ethe specification isn‚Äôt explicit about it\u003c/a\u003e, so I have no expectations one way or another. Perhaps we‚Äôll see an edit in a future specification that gets specific with \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e and to what extent CSS can modify the marker. Or maybe we won‚Äôt. It would be nice to have some way to chuck the triangle in favor of something else.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnd what about removing the marker altogether? All we need to do is set the \u003ccode\u003econtent\u003c/code\u003e property on it with an empty string value and \u003cem\u003evoil√†\u003c/em\u003e!\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eOnce the marker is gone, you could decide to craft your own custom marker with CSS by hooking into the \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e element‚Äôs \u003ccode\u003e::before\u003c/code\u003e pseudo-element.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eJust take note that Safari displays both the default marker and the custom one since it does not support the \u003ccode\u003e::marker\u003c/code\u003e pseudo-element at the time I‚Äôm writing this. You‚Äôre probably as tired reading that as I am typing it. ü§ì\u003c/p\u003e\n\n\n\u003ch3 id=\"style-the-content\"\u003eStyle the content\u003c/h3\u003e\n\n\n\u003cp\u003eLet‚Äôs say all you need to do is slap a background color on the content inside the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element. You could select the entire thing and set a background on it:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003edetails {\n  background: oklch(95% 0.1812 38.35);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat‚Äôs cool, but it would be better if it only set the background color when the element is in an \u003ccode\u003eopen\u003c/code\u003e state. We can use an \u003ca href=\"https://css-tricks.com/css-selectors/#aa-attribute-selectors\"\u003eattribute selector\u003c/a\u003e for that:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003edetails[open] {\n  background: oklch(95% 0.1812 38.35);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOK, but what about the \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e element? What if you don‚Äôt want that included in the background? Well, you could wrap the content in a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e and select that instead:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003edetails[open] div {\n  background: oklch(95% 0.1812 38.35);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWhat‚Äôs even better is using the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/d/details-content/\"\u003e::details-content\u003c/a\u003e\u003c/code\u003e pseudo-element as a selector. This way, we can select everything inside the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element without reaching for more markup:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e::details-content {\n  background: oklch(95% 0.1812 38.35);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThere‚Äôs no need to include \u003ccode\u003edetails\u003c/code\u003e in the selector since \u003ccode\u003e::details-content\u003c/code\u003e is only ever selectable in the context of a \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element. So, it‚Äôs like we‚Äôre implicitly writing \u003ccode\u003edetails::details-content\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThe \u003ccode\u003e::details-content\u003c/code\u003e pseudo is still gaining browser support when I‚Äôm writing this, so it‚Äôs worth keeping an eye on it and using it cautiously in the meantime.\u003c/p\u003e\n\n\n\n\n\u003cbaseline-status featureid=\"details-content\"\u003e\u003c/baseline-status\u003e\n\n\n\u003ch2 id=\"animate-the-opening-and-closing\"\u003eAnimate the opening and closing\u003c/h2\u003e\n\n\n\u003cp\u003eClick a default \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element and it immediately snaps open and closed. I‚Äôm not opposed to that, but there are times when it might look (and feel) nice to transition like a smooth operator between the open and closed states. It used to take some clever hackery to pull this off, as \u003ca href=\"https://css-tricks.com/how-to-animate-the-details-element-using-waapi/\"\u003eLouis Hoebregts demonstrated using the Web Animations API several years back\u003c/a\u003e. Robin Rendle shared another way that uses a CSS animation:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003edetails[open] p {\n  animation: animateDown 0.2s linear forwards;\n}\n\n@keyframes animateDown {\n  0% {\n    opacity: 0;\n    transform: translatey(-15px);\n  }\n  100% {\n    opacity: 1;\n    transform: translatey(0);\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHe sprinkled in a little JavaScript to make his final example fully interactive, but you get the idea:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eNotice what‚Äôs happening in there. Robin selects the paragraph element inside the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element when it is in an \u003ccode\u003eopen\u003c/code\u003e state then triggers the animation. And that animation uses clever positioning to make it happen. That‚Äôs because there‚Äôs no way to know exactly how tall the paragraph ‚Äî or the parent \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element ‚Äî is when expanded. We have to use explicit sizing, padding, and positioning to pull it all together.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut guess what? Since then, we got a \u003cem\u003ebig\u003c/em\u003e gift from CSS that allows us to \u003ca href=\"https://css-tricks.com/transitioning-to-auto-height/\"\u003eanimate an element from zero height to its auto (i.e., intrinsic) height\u003c/a\u003e, even if we don‚Äôt know the exact value of that auto height in advance. We start with zero height and clip the overflow so nothing hangs out. And since we have the \u003ccode\u003e::details-content\u003c/code\u003e pseudo, we can directly select that rather than introducing more markup to the HTML.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e::details-content {\n  transition: height 0.5s ease, content-visibility 0.5s ease allow-discrete;\n  height: 0;\n  overflow: clip;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow we can opt into auto-height transitions using the \u003ccode\u003einterpolate-size\u003c/code\u003e property which was created just to enable transitions to keyword values, such as \u003ccode\u003eauto\u003c/code\u003e. We set it on the \u003ccode\u003e:root\u003c/code\u003e element so that it‚Äôs available everywhere, though you could scope it directly to a more specific instance if you‚Äôd like.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e:root {\n  interpolate-size: allow-keywords;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNext up, we select the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element in its \u003ccode\u003eopen\u003c/code\u003e state and set the \u003ccode\u003e::details-content\u003c/code\u003e height to \u003ccode\u003eauto\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e[open]::details-content {\n  height: auto;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can make it so that this only applies if the browser supports auto-height transitions:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@supports (interpolate-size: allow-keywords) {\n  :root {\n    interpolate-size: allow-keywords;\n  }\n\n  [open]::details-content {\n    height: auto;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd finally, we set the transition on the \u003ccode\u003e::details-content\u003c/code\u003e pseudo to activate it:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"2\"\u003e\u003ccode markup=\"tt\"\u003e::details-content {\n  transition: height 0.5s ease;\n  height: 0;\n  overflow: clip;\n}\n\n/* Browser supports interpolate-size */\n@supports (interpolate-size: allow-keywords) {\n  :root {\n    interpolate-size: allow-keywords;\n  }\n\n  [open]::details-content {\n    height: auto;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eBut wait! Notice how the animation works when opening \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e, but things snap back when closing it. \u003ca href=\"https://developer.chrome.com/blog/styling-details#animating_the_details-content_pseudo\" rel=\"noopener\"\u003eBramus notes\u003c/a\u003e that we need to include the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/c/content-visibility/\"\u003econtent-visibility\u003c/a\u003e\u003c/code\u003e property in the transition because (1) it is implicitly set on the element and (2) it maps to a hidden state when the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element is closed. That‚Äôs what causes the content to snap to hidden when closing the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e. So, let‚Äôs add \u003ccode\u003econtent-visibility\u003c/code\u003e to our list of transitions:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"2\"\u003e\u003ccode markup=\"tt\"\u003e::details-content {\n  transition: height 0.5s ease, content-visibility 0.5s ease allow-discrete;\n  height: 0;\n  overflow: clip;\n}\n\n/* Browser supports interpolate-size */\n@supports (interpolate-size: allow-keywords) {\n  :root {\n    interpolate-size: allow-keywords;\n  }\n\n  [open]::details-content {\n    height: auto;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat‚Äôs much better:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eNote the \u003ccode\u003eallow-discrete\u003c/code\u003e keyword which we need to set since \u003ccode\u003econtent-visibility\u003c/code\u003e is a property that only supports discrete animations and transitions.\u003c/p\u003e\n\n\n\u003ch3 id=\"interesting-tricks\"\u003eInteresting tricks\u003c/h3\u003e\n\n\n\u003cp\u003e\u003ca href=\"https://codepen.io/team/css-tricks/pen/jOMZewP\" rel=\"noopener\"\u003eChris has a demo\u003c/a\u003e that uses \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e as a system for floating footnotes in content. I forked it and added the \u003ccode\u003ename\u003c/code\u003e attribute to each footnote so that they close when another one is opened.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eI mentioned John Rhea‚Äôs \u003ca href=\"https://css-tricks.com/popover-the-balloons/\"\u003e‚ÄúPop(over) The Balloons‚Äù game\u003c/a\u003e at the top of these notes:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eBramus with a slick-looking horizontal accordion forked from another example. Note how the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element is used as a flex container:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eChris with \u003ca href=\"https://css-tricks.com/pause-gif-details-summary/\"\u003eanother clever trick\u003c/a\u003e that uses \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e to play and pause animated GIF image files. It‚Äôs doesn‚Äôt actually ‚Äúpause‚Äù but the effect makes it seem like it does.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eRyan Trimble with styling \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e as a dropdown menu and then using anchor positioning to set where the content opens.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"references\"\u003eReferences\u003c/h3\u003e\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#the-details-element\" rel=\"noopener\"\u003eHTML Living Standard (Section 4.11.1)\u003c/a\u003e by WHATWG\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/quick-reminder-that-details-summary-is-the-easiest-way-ever-to-make-an-accordion/\"\u003e‚ÄúQuick Reminder that Details/Summary is the Easiest Way Ever to Make an Accordion‚Äù\u003c/a\u003e by Chris Coyier\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/a-terrible-way-to-do-footnotes-in-html/\"\u003e‚ÄúA (terrible?) way to do footnotes in¬†HTML‚Äù\u003c/a\u003e by Chris Coyier\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/using-details-for-menus-and-dialogs-is-an-interesting-idea/\"\u003e‚ÄúUsing \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e for Menus and Dialogs is an Interesting¬†Idea‚Äù\u003c/a\u003e by Chris Coyier\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/pause-gif-details-summary/\"\u003e‚ÄúPausing a GIF with¬†details/summary‚Äù\u003c/a\u003e by Chris Coyier\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/exploring-what-the-details-and-summary-elements-can-do/\"\u003e‚ÄúExploring What the Details and Summary Elements Can¬†Do‚Äù\u003c/a\u003e by Robin Rendle\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/more-details-on-details/\"\u003e‚ÄúMore Details on \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e‚Äú\u003c/a\u003e by Geoff Graham\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/d/details-content/\"\u003e‚Äú\u003ccode\u003e::details-content\u003c/code\u003e‚Äú\u003c/a\u003e by Geoff Graham\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/styling-details\" rel=\"noopener\"\u003e‚ÄúMore options for styling \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e‚Äú\u003c/a\u003e by Bramus\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/how-to-animate-the-details-element-using-waapi/\"\u003e‚ÄúHow to Animate the Details Element Using¬†WAAPI‚Äù\u003c/a\u003e by Louis Hoebregts\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://web.dev/learn/html/details/\" rel=\"noopener\"\u003e‚ÄúDetails and summary‚Äù\u003c/a\u003e by web.dev\u003c/li\u003e\n\u003c/ul\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2025-02-26T09:07:14-07:00",
  "modifiedTime": "2025-02-27T06:32:30-07:00"
}
