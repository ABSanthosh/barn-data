{
  "id": "9ce61464-0809-4da9-9ae7-e4e769247ede",
  "title": "Revisiting CSS Multi-Column Layout",
  "link": "https://css-tricks.com/revisiting-css-multi-column-layout/",
  "description": "After 20 years since Andy Clarke first published his book about Multi-Column Layout in CSS, he's back to encourage a fresh look at CSS columns for enhanced readability and design flexibility. Revisiting CSS Multi-Column Layout originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Andy Clarke",
  "published": "Mon, 27 Jan 2025 15:35:44 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "columns",
    "layout"
  ],
  "byline": "Andy Clarke",
  "length": 12170,
  "excerpt": "After 20 years since Andy Clarke first published his book about Multi-Column Layout in CSS, he's back to encourage a fresh look at CSS columns for enhanced readability and design flexibility.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Honestly, it’s difficult for me to come to terms with, but almost 20 years have passed since I wrote my first book, Transcending CSS. In it, I explained how and why to use what was the then-emerging Multi-Column Layout module. Hint: I published an updated version, Transcending CSS Revisited, which is free to read online. Perhaps because, before the web, I’d worked in print, I was over-excited at the prospect of dividing content into columns without needing extra markup purely there for presentation. I’ve used Multi-Column Layout regularly ever since. Yet, CSS Columns remains one of the most underused CSS layout tools. I wonder why that is? Holes in the specification For a long time, there were, and still are, plenty of holes in Multi-Column Layout. As Rachel Andrew — now a specification editor — noted in her article five years ago: “The column boxes created when you use one of the column properties can’t be targeted. You can’t address them with JavaScript, nor can you style an individual box to give it a background colour or adjust the padding and margins. All of the column boxes will be the same size. The only thing you can do is add a rule between columns.” She’s right. And that’s still true. You can’t style columns, for example, by alternating background colours using some sort of :nth-column() pseudo-class selector. You can add a column-rule between columns using border-style values like dashed, dotted, and solid, and who can forget those evergreen groove and ridge styles? But you can’t apply border-image values to a column-rule, which seems odd as they were introduced at roughly the same time. The Multi-Column Layout is imperfect, and there’s plenty I wish it could do in the future, but that doesn’t explain why most people ignore what it can do today. Patchy browser implementation for a long time Legacy browsers simply ignored the column properties they couldn’t process. But, when Multi-Column Layout was first launched, most designers and developers had yet to accept that websites needn’t look the same in every browser. Early on, support for Multi-Column Layout was patchy. However, browsers caught up over time, and although there are still discrepancies — especially in controlling content breaks — Multi-Column Layout has now been implemented widely. Yet, for some reason, many designers and developers I speak to feel that CSS Columns remain broken. Yes, there’s plenty that browser makers should do to improve their implementations, but that shouldn’t prevent people from using the solid parts today. Readability and usability with scrolling Maybe the main reason designers and developers haven’t embraced Multi-Column Layout as they have CSS Grid and Flexbox isn’t in the specification or its implementation but in its usability. Rachel pointed this out in her article: “One reason we don’t see multicol used much on the web is that it would be very easy to end up with a reading experience which made the reader scroll in the block dimension. That would mean scrolling up and down vertically for those of us using English or another vertical writing mode. This is not a good reading experience!” That’s true. No one would enjoy repeatedly scrolling up and down to read a long passage of content set in columns. She went on: “Neither of these things is ideal, and using multicol on the web is something we need to think about very carefully in terms of the amount of content we might be aiming to flow into our columns.” But, let’s face it, thinking very carefully is what designers and developers should always be doing. Sure, if you’re dumb enough to dump a large amount of content into columns without thinking about its design, you’ll end up serving readers a poor experience. But why would you do that when headlines, images, and quotes can span columns and reset the column flow, instantly improving readability? Add to that container queries and newer unit values for text sizing, and there really isn’t a reason to avoid using Multi-Column Layout any longer. A brief refresher on properties and values Let’s run through a refresher. There are two ways to flow content into multiple columns; first, by defining the number of columns you need using the column-count property: Second, and often best, is specifying the column width, leaving a browser to decide how many columns will fit along the inline axis. For example, I’m using column-width to specify that my columns are over 18rem. A browser creates as many 18rem columns as possible to fit and then shares any remaining space between them. Then, there is the gutter (or column-gap) between columns, which you can specify using any length unit. I prefer using rem units to maintain the gutters’ relationship to the text size, but if your gutters need to be 1em, you can leave this out, as that’s a browser’s default gap. The final column property is that divider (or column-rule) to the gutters, which adds visual separation between columns. Again, you can set a thickness and use border-style values like dashed, dotted, and solid. These examples will be seen whenever you encounter a Multi-Column Layout tutorial, including CSS-Tricks’ own Almanac. The Multi-Column Layout syntax is one of the simplest in the suite of CSS layout tools, which is another reason why there are few reasons not to use it. Multi-Column Layout is even more relevant today When I wrote Transcending CSS and first explained the emerging Multi-Column Layout, there were no rem or viewport units, no :has() or other advanced selectors, no container queries, and no routine use of media queries because responsive design hadn’t been invented. We didn’t have calc() or clamp() for adjusting text sizes, and there was no CSS Grid or Flexible Box Layout for precise control over a layout. Now we do, and all these properties help to make Multi-Column Layout even more relevant today. Now, you can use rem or viewport units combined with calc() and clamp() to adapt the text size inside CSS Columns. You can use :has() to specify when columns are created, depending on the type of content they contain. Or you might use container queries to implement several columns only when a container is large enough to display them. Of course, you can also combine a Multi-Column Layout with CSS Grid or Flexible Box Layout for even more imaginative layout designs. Using Multi-Column Layout today Patty Meltt is an up-and-coming country music sensation. She’s not real, but the challenges of designing and developing websites like hers are. My challenge was to implement a flexible article layout without media queries which adapts not only to screen size but also whether or not a \u003cfigure\u003e is present. To improve the readability of running text in what would potentially be too-long lines, it should be set in columns to narrow the measure. And, as a final touch, the text size should adapt to the width of the container, not the viewport. Article with no \u003cfigure\u003e element. What would potentially be too-long lines of text are set in columns to improve readability by narrowing the measure. Article containing a \u003cfigure\u003e element. No column text is needed for this narrower measure. The HTML for this layout is rudimentary. One \u003csection\u003e, one \u003cmain\u003e, and one \u003cfigure\u003e (or not:) \u003csection\u003e \u003cmain\u003e \u003ch1\u003eAbout Patty\u003c/h1\u003e \u003cp\u003e…\u003c/p\u003e \u003c/main\u003e \u003cfigure\u003e \u003cimg\u003e \u003c/figure\u003e \u003c/section\u003e I started by adding Multi-Column Layout styles to the \u003cmain\u003e element using the column-width property to set the width of each column to 40ch (characters). The max-width and automatic inline margins reduce the content width and center it in the viewport: main { margin-inline: auto; max-width: 100ch; column-width: 40ch; column-gap: 3rem; column-rule: .5px solid #98838F; } Next, I applied a flexible box layout to the \u003csection\u003e only if it :has() a direct descendant which is a \u003cfigure\u003e: section:has(\u003e figure) { display: flex; flex-wrap: wrap; gap: 0 3rem; } This next min-width: min(100%, 30rem) — applied to both the \u003cmain\u003e and \u003cfigure\u003e — is a combination of the min-width property and the min() CSS function. The min() function allows you to specify two or more values, and a browser will choose the smallest value from them. This is incredibly useful for responsive layouts where you want to control the size of an element based on different conditions: section:has(\u003e figure) main { flex: 1; margin-inline: 0; min-width: min(100%, 30rem); } section:has(\u003e figure) figure { flex: 4; min-width: min(100%, 30rem); } What’s efficient about this implementation is that Multi-Column Layout styles are applied throughout, with no need for media queries to switch them on or off. Adjusting text size in relation to column width helps improve readability. This has only recently become easy to implement with the introduction of container queries, their associated values including cqi, cqw, cqmin, and cqmax. And the clamp() function. Fortunately, you don’t have to work out these text sizes manually as ClearLeft’s Utopia will do the job for you. My headlines and paragraph sizes are clamped to their minimum and maximum rem sizes and between them text is fluid depending on their container’s inline size: h1 { font-size: clamp(5.6526rem, 5.4068rem + 1.2288cqi, 6.3592rem); } h2 { font-size: clamp(1.9994rem, 1.9125rem + 0.4347cqi, 2.2493rem); } p { font-size: clamp(1rem, 0.9565rem + 0.2174cqi, 1.125rem); } So, to specify the \u003cmain\u003e as the container on which those text sizes are based, I applied a container query for its inline size: main { container-type: inline-size; } Open the final result in a desktop browser, when you’re in front of one. It’s a flexible article layout without media queries which adapts to screen size and the presence of a \u003cfigure\u003e. Multi-Column Layout sets text in columns to narrow the measure and the text size adapts to the width of its container, not the viewport. Modern CSS is solving many prior problems Structure content with spanning elements which will restart the flow of columns and prevent people from scrolling long distances. Prevent figures from dividing their images and captions between columns. Almost every article I’ve ever read about Multi-Column Layout focuses on its flaws, especially usability. CSS-Tricks’ own Geoff Graham even mentioned the scrolling up and down issue when he asked, “When Do You Use CSS Columns?” “But an entire long-form article split into columns? I love it in newspapers but am hesitant to scroll down a webpage to read one column, only to scroll back up to do it again.” Fortunately, the column-span property — which enables headlines, images, and quotes to span columns, resets the column flow, and instantly improves readability — now has solid support in browsers: h1, h2, blockquote { column-span: all; } But the solution to the scrolling up and down issue isn’t purely technical. It also requires content design. This means that content creators and designers must think carefully about the frequency and type of spanning elements, dividing a Multi-Column Layout into shallower sections, reducing the need to scroll and improving someone’s reading experience. Another prior problem was preventing headlines from becoming detached from their content and figures, dividing their images and captions between columns. Thankfully, the break-after property now also has widespread support, so orphaned images and captions are now a thing of the past: figure { break-after: column; } Open this final example in a desktop browser: You should take a fresh look at Multi-Column Layout Multi-Column Layout isn’t a shiny new tool. In fact, it remains one of the most underused layout tools in CSS. It’s had, and still has, plenty of problems, but they haven’t reduced its usefulness or its ability to add an extra level of refinement to a product or website’s design. Whether you haven’t used Multi-Column Layout in a while or maybe have never tried it, now’s the time to take a fresh look at Multi-Column Layout.",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/384002",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eHonestly, it’s difficult for me to come to terms with, but almost 20 years have passed since I wrote my first book, \u003cem\u003eTranscending CSS\u003c/em\u003e. In it, I explained how and why to use what was the then-emerging \u003ca href=\"https://www.w3.org/TR/css-multicol-1/\" rel=\"noopener\"\u003eMulti-Column Layout\u003c/a\u003e \u003ca href=\"https://www.w3.org/TR/css-multicol-1/\" rel=\"noopener\"\u003emodule\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHint:\u003c/strong\u003e I published an updated version,\u003cem\u003e \u003ca href=\"https://stuffandnonsense.co.uk/transcending-css-revisited/index.html\" rel=\"noopener\"\u003eTranscending CSS Revisited\u003c/a\u003e\u003c/em\u003e, which is free to read online.\u003c/p\u003e\n\n\n\n\u003cp\u003ePerhaps because, before the web, I’d worked in print, I was over-excited at the prospect of dividing content into columns without needing extra markup purely there for presentation. I’ve used Multi-Column Layout regularly ever since. Yet, CSS Columns remains one of the most underused CSS layout tools. I wonder why that is?\u003c/p\u003e\n\n\n\n\u003ch3 id=\"holes-in-the-specification\"\u003eHoles in the specification\u003c/h3\u003e\n\n\n\u003cp\u003eFor a long time, there were, and still are, plenty of holes in Multi-Column Layout. As Rachel Andrew — now a specification editor — \u003ca href=\"https://www.smashingmagazine.com/2019/01/css-multiple-column-layout-multicol/\" rel=\"noopener\"\u003enoted in her article\u003c/a\u003e five years ago:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e“The column boxes created when you use one of the column properties can’t be targeted. You can’t address them with JavaScript, nor can you style an individual box to give it a background colour or adjust the padding and margins. All of the column boxes will be the same size. The only thing you can do is add a rule between columns.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eShe’s right. And that’s \u003cem\u003estill\u003c/em\u003e true. You can’t style columns, for example, by alternating background colours using some sort of \u003ccode\u003e:nth-column()\u003c/code\u003e pseudo-class selector. You can add a \u003ca href=\"https://css-tricks.com/almanac/properties/c/column-rule/\"\u003e\u003ccode\u003ecolumn-rule\u003c/code\u003e\u003c/a\u003e between columns using \u003ca href=\"https://css-tricks.com/almanac/properties/b/border/\"\u003e\u003ccode\u003eborder-style\u003c/code\u003e\u003c/a\u003e values like \u003ccode\u003edashed\u003c/code\u003e, \u003ccode\u003edotted\u003c/code\u003e, and \u003ccode\u003esolid\u003c/code\u003e, and who can forget those evergreen \u003ccode\u003egroove\u003c/code\u003e and \u003ccode\u003eridge\u003c/code\u003e styles? But you can’t apply \u003ca href=\"https://css-tricks.com/almanac/properties/b/border-image/\"\u003e\u003ccode\u003eborder-image\u003c/code\u003e\u003c/a\u003e values to a \u003ccode\u003ecolumn-rule\u003c/code\u003e, which seems odd as they were introduced at roughly the same time. The Multi-Column Layout is imperfect, and there’s plenty I wish it could do in the future, but that doesn’t explain why most people ignore what it can do today.\u003c/p\u003e\n\n\n\u003ch3 id=\"patchy-browser-implementation-for-a-long-time\"\u003ePatchy browser implementation for a long time\u003c/h3\u003e\n\n\n\u003cp\u003eLegacy browsers simply ignored the column properties they couldn’t process. But, when Multi-Column Layout was first launched, most designers and developers had yet to accept that websites needn’t look the same in every browser.\u003c/p\u003e\n\n\n\n\u003cp\u003eEarly on, support for Multi-Column Layout was patchy. However, browsers caught up over time, and although there are still discrepancies — especially in controlling content breaks — Multi-Column Layout has now been implemented widely. Yet, for some reason, many designers and developers I speak to feel that CSS Columns remain broken. Yes, there’s plenty that browser makers should do to improve their implementations, but that shouldn’t prevent people from using the solid parts today.\u003c/p\u003e\n\n\n\u003ch3 id=\"readability-and-usability-with-scrolling\"\u003eReadability and usability with scrolling\u003c/h3\u003e\n\n\n\u003cp\u003eMaybe the main reason designers and developers haven’t embraced Multi-Column Layout as they have CSS Grid and Flexbox isn’t in the specification or its implementation but in its usability. Rachel pointed this out in \u003ca href=\"https://www.smashingmagazine.com/2019/01/css-multiple-column-layout-multicol\" rel=\"noopener\"\u003eher article\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e“One reason we don’t see multicol used much on the web is that it would be very easy to end up with a reading experience which made the reader scroll in the block dimension. That would mean scrolling up and down vertically for those of us using English or another vertical writing mode. This is not a good reading experience!”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThat’s true. No one would enjoy repeatedly scrolling up and down to read a long passage of content set in columns. She \u003ca href=\"https://www.smashingmagazine.com/2019/01/css-multiple-column-layout-multicol\" rel=\"noopener\"\u003ewent on\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e“Neither of these things is ideal, and using multicol on the web is something we need to think about very carefully in terms of the amount of content we might be aiming to flow into our columns.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eBut, let’s face it, thinking very carefully is what designers and developers should always be doing.\u003c/p\u003e\n\n\n\n\u003cp\u003eSure, if you’re dumb enough to dump a large amount of content into columns without thinking about its design, you’ll end up serving readers a poor experience. But why would you do that when headlines, images, and quotes can span columns and reset the column flow, instantly improving readability? Add to that container queries and newer unit values for text sizing, and there really isn’t a reason to avoid using Multi-Column Layout any longer.\u003c/p\u003e\n\n\n\u003ch3 id=\"a-brief-refresher-on-properties-and-values\"\u003eA brief refresher on properties and values\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s run through a refresher. There are two ways to flow content into multiple columns; first, by defining the number of columns you need using the \u003ca href=\"https://css-tricks.com/almanac/properties/c/column-count/\"\u003e\u003ccode\u003ecolumn-count\u003c/code\u003e\u003c/a\u003e property:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eSecond, and often best, is specifying the column width, leaving a browser to decide how many columns will fit along the inline axis. For example, I’m using \u003ca href=\"https://css-tricks.com/almanac/properties/c/column-width/\"\u003e\u003ccode\u003ecolumn-width\u003c/code\u003e\u003c/a\u003e to specify that my columns are over \u003ccode\u003e18rem\u003c/code\u003e. A browser creates as many \u003ccode\u003e18rem\u003c/code\u003e columns as possible to fit and then shares any remaining space between them.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThen, there is the gutter (or \u003ca href=\"https://css-tricks.com/almanac/properties/c/column-gap/\"\u003e\u003ccode\u003ecolumn-gap\u003c/code\u003e\u003c/a\u003e) between columns, which you can specify using any length unit. I prefer using rem units to maintain the gutters’ relationship to the text size, but if your gutters need to be \u003ccode\u003e1em\u003c/code\u003e, you can leave this out, as that’s a browser’s default gap.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThe final column property is that divider (or \u003ca href=\"https://css-tricks.com/almanac/properties/c/column-rule/\"\u003e\u003ccode\u003ecolumn-rule\u003c/code\u003e\u003c/a\u003e) to the gutters, which adds visual separation between columns. Again, you can set a thickness and use \u003ccode\u003eborder-style\u003c/code\u003e values like \u003ccode\u003edashed\u003c/code\u003e, \u003ccode\u003edotted\u003c/code\u003e, and \u003ccode\u003esolid\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThese examples will be seen whenever you encounter a Multi-Column Layout tutorial, \u003ca href=\"https://css-tricks.com/almanac/properties/c/columns/\"\u003eincluding CSS-Tricks’ own Almanac\u003c/a\u003e. The Multi-Column Layout syntax is one of the simplest in the suite of CSS layout tools, which is another reason why there are few reasons not to use it.\u003c/p\u003e\n\n\n\u003ch3 id=\"multi-column-layout-is-even-more-relevant-today\"\u003eMulti-Column Layout is even more relevant today\u003c/h3\u003e\n\n\n\u003cp\u003eWhen I wrote \u003cem\u003eTranscending CSS\u003c/em\u003e and first explained the emerging Multi-Column Layout, there were no rem or viewport units, no \u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/h/has/\"\u003e\u003ccode\u003e:has()\u003c/code\u003e\u003c/a\u003e or other advanced selectors, no \u003ca href=\"https://css-tricks.com/css-container-queries/\"\u003econtainer queries,\u003c/a\u003e and no routine use of \u003ca href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/\"\u003emedia queries\u003c/a\u003e because responsive design hadn’t been invented.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe didn’t have \u003ccode\u003ecalc()\u003c/code\u003e or \u003ccode\u003eclamp()\u003c/code\u003e for adjusting text sizes, and there was no CSS Grid or Flexible Box Layout for precise control over a layout. Now we do, and all these properties help to make Multi-Column Layout even more relevant today.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow, you can use rem or viewport units combined with \u003ccode\u003ecalc()\u003c/code\u003e and \u003ccode\u003eclamp()\u003c/code\u003e to adapt the text size inside CSS Columns. You can use \u003ccode\u003e:has()\u003c/code\u003e to specify when columns are created, depending on the type of content they contain. Or you might use container queries to implement several columns only when a container is large enough to display them. Of course, you can also combine a Multi-Column Layout with CSS Grid or Flexible Box Layout for even more imaginative layout designs.\u003c/p\u003e\n\n\n\u003ch3 id=\"using-multi-column-layout-today\"\u003eUsing Multi-Column Layout today\u003c/h3\u003e\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/paper-attachments.dropboxusercontent.com/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736973374924_2025-01-15-1.webp?ssl=1\" alt=\"Three examples of multi-column page layouts displayed side-by-side featuring a fictional female country musician.\"/\u003e\u003cfigcaption\u003ePatty Meltt is an up-and-coming country music sensation. She’s not real, but the challenges of designing and developing websites like hers are.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eMy challenge was to implement a flexible article layout without media queries which adapts not only to screen size but also whether or not a \u003ccode\u003e\u0026lt;figure\u0026gt;\u003c/code\u003e is present. To improve the readability of running text in what would potentially be too-long lines, it should be set in columns to narrow the measure. And, as a final touch, the text size should adapt to the width of the container, not the viewport.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/paper-attachments.dropboxusercontent.com/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736973401564_2025-01-15-3.webp?ssl=1\" alt=\"A two-column layout of text topped with a large heading that spans both columns.\"/\u003e\u003cfigcaption\u003eArticle with no \u003ccode\u003e\u0026lt;figure\u0026gt;\u003c/code\u003e element. What would potentially be too-long lines of text are set in columns to improve readability by narrowing the measure.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/paper-attachments.dropboxusercontent.com/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736973362450_2025-01-15-2.webp?ssl=1\" alt=\"To column layout with text on the left and a large image on the right.\"/\u003e\u003cfigcaption\u003eArticle containing a \u003ccode\u003e\u0026lt;figure\u0026gt;\u003c/code\u003e element. No column text is needed for this narrower measure.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe HTML for this layout is rudimentary. One \u003ccode\u003e\u0026lt;section\u0026gt;\u003c/code\u003e, one \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e, and one \u003ccode\u003e\u0026lt;figure\u0026gt;\u003c/code\u003e (or not:)\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;section\u0026gt;\n  \u0026lt;main\u0026gt;\n    \u0026lt;h1\u0026gt;About Patty\u0026lt;/h1\u0026gt;\n    \u0026lt;p\u0026gt;…\u0026lt;/p\u0026gt;\n  \u0026lt;/main\u0026gt;\n\n  \u0026lt;figure\u0026gt;\n    \u0026lt;img\u0026gt;\n  \u0026lt;/figure\u0026gt;\n\u0026lt;/section\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI started by adding Multi-Column Layout styles to the \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e element using the \u003ccode\u003ecolumn-width\u003c/code\u003e property to set the width of each column to \u003ccode\u003e40ch\u003c/code\u003e (characters). The \u003ccode\u003emax-width\u003c/code\u003e and automatic inline margins reduce the content width and center it in the viewport:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003emain {\n  margin-inline: auto;\n  max-width: 100ch;\n  column-width: 40ch;\n  column-gap: 3rem;\n  column-rule: .5px solid #98838F;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNext, I applied a flexible box layout to the \u003ccode\u003e\u0026lt;section\u0026gt;\u003c/code\u003e only if it \u003ccode\u003e:has()\u003c/code\u003e a direct descendant which is a \u003ccode\u003e\u0026lt;figure\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003esection:has(\u0026gt; figure) {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0 3rem;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis next \u003ccode\u003emin-width: min(100%, 30rem)\u003c/code\u003e — applied to both the \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;figure\u0026gt;\u003c/code\u003e — is a combination of the \u003ccode\u003emin-width\u003c/code\u003e property and the \u003ccode\u003emin()\u003c/code\u003e CSS function. The \u003ccode\u003emin()\u003c/code\u003e function allows you to specify two or more values, and a browser will choose the smallest value from them. This is incredibly useful for responsive layouts where you want to control the size of an element based on different conditions:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003esection:has(\u0026gt; figure) main {\n  flex: 1;\n  margin-inline: 0;\n  min-width: min(100%, 30rem);\n}\n\nsection:has(\u0026gt; figure) figure {\n  flex: 4;\n  min-width: min(100%, 30rem);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhat’s efficient about this implementation is that Multi-Column Layout styles are applied throughout, with no need for media queries to switch them on or off.\u003c/p\u003e\n\n\n\n\u003cp\u003eAdjusting text size in relation to column width helps improve readability. This has only recently become easy to implement with the introduction of container queries, their associated values including \u003ccode\u003ecqi\u003c/code\u003e, \u003ccode\u003ecqw\u003c/code\u003e, \u003ccode\u003ecqmin\u003c/code\u003e, and \u003ccode\u003ecqmax\u003c/code\u003e. And the \u003ccode\u003eclamp()\u003c/code\u003e function. Fortunately, you don’t have to work out these text sizes manually as ClearLeft’s \u003ca href=\"https://utopia.fyi/type/\" rel=\"noopener\"\u003eUtopia\u003c/a\u003e will do the job for you.\u003c/p\u003e\n\n\n\n\u003cp\u003eMy headlines and paragraph sizes are clamped to their minimum and maximum rem sizes and between them text is fluid depending on their container’s inline size:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh1 { font-size: clamp(5.6526rem, 5.4068rem + 1.2288cqi, 6.3592rem); }\n\nh2 { font-size: clamp(1.9994rem, 1.9125rem + 0.4347cqi, 2.2493rem); }\n\np { font-size: clamp(1rem, 0.9565rem + 0.2174cqi, 1.125rem); }\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eSo, to specify the \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e as the container on which those text sizes are based, I applied a container query for its inline size:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003emain {\n  container-type: inline-size;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOpen the final result in a desktop browser, when you’re in front of one. It’s a flexible article layout without media queries which adapts to screen size and the presence of a \u003ccode\u003e\u0026lt;figure\u0026gt;\u003c/code\u003e. Multi-Column Layout sets text in columns to narrow the measure and the text size adapts to the width of its container, not the viewport.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"modern-css-is-solving-many-prior-problems\"\u003eModern CSS is solving many prior problems\u003c/h3\u003e\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736982223430_2025-01-15-4.webp?resize=1024%2C576\u0026amp;ssl=1\" alt=\"A two-column layout of text with a large heading above it spanning both columns.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736982223430_2025-01-15-4.webp?resize=1024%2C576\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736982223430_2025-01-15-4.webp?resize=300%2C169\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736982223430_2025-01-15-4.webp?resize=768%2C432\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736982223430_2025-01-15-4.webp?resize=1536%2C864\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736982223430_2025-01-15-4.webp?w=1920\u0026amp;ssl=1 1920w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003eStructure content with spanning elements which will restart the flow of columns and prevent people from scrolling long distances.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736982242379_2025-01-15-5.webp?resize=1024%2C576\u0026amp;ssl=1\" alt=\"Same two-column text layout, including an image in the first column.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736982242379_2025-01-15-5.webp?resize=1024%2C576\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736982242379_2025-01-15-5.webp?resize=300%2C169\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736982242379_2025-01-15-5.webp?resize=768%2C432\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736982242379_2025-01-15-5.webp?resize=1536%2C864\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/01/s_10BD6DD78E1560F01EE83A8FD0F91ED836542257C0117DD8A20FDBB79DE2400F_1736982242379_2025-01-15-5.webp?w=1920\u0026amp;ssl=1 1920w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003ePrevent figures from dividing their images and captions between columns.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAlmost every article I’ve ever read about Multi-Column Layout focuses on its flaws, especially usability. CSS-Tricks’ own Geoff Graham even mentioned the scrolling up and down issue when he asked, \u003ca href=\"https://css-tricks.com/when-do-you-use-css-columns/\"\u003e“When Do You Use CSS Columns?”\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e“But an entire long-form article split into columns? I love it in newspapers but am hesitant to scroll down a webpage to read one column, only to scroll back up to do it again.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eFortunately, the \u003ccode\u003ecolumn-span\u003c/code\u003e property — which enables headlines, images, and quotes to span columns, resets the column flow, and instantly improves readability — now has solid support in browsers:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh1, h2, blockquote {\n  column-span: all; \n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBut the solution to the scrolling up and down issue isn’t purely technical. It also requires content design. This means that content creators and designers must think carefully about the frequency and type of spanning elements, dividing a Multi-Column Layout into shallower sections, reducing the need to scroll and improving someone’s reading experience.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnother prior problem was preventing headlines from becoming detached from their content and figures, dividing their images and captions between columns. Thankfully, the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/b/break-after/\"\u003ebreak-after\u003c/a\u003e\u003c/code\u003e property now also has widespread support, so orphaned images and captions are now a thing of the past:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efigure {\n  break-after: column;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOpen this final example in a desktop browser:\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"you-should-take-a-fresh-look-at-multi-column-layout\"\u003eYou should take a fresh look at Multi-Column Layout\u003c/h3\u003e\n\n\n\u003cp\u003eMulti-Column Layout isn’t a shiny new tool. In fact, it remains one of the most underused layout tools in CSS. It’s had, and still has, plenty of problems, but they haven’t reduced its usefulness or its ability to add an extra level of refinement to a product or website’s design. Whether you haven’t used Multi-Column Layout in a while or maybe have never tried it, now’s the time to take a fresh look at Multi-Column Layout.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2025-01-27T08:35:44-07:00",
  "modifiedTime": "2025-01-27T08:37:47-07:00"
}
