{
  "id": "4d08ad8b-cf6c-4f1e-98a9-83696cf52d58",
  "title": "The Gap Strikes Back: Now Stylable",
  "link": "https://css-tricks.com/the-gap-strikes-back-now-stylable/",
  "description": "Styling the space between layout items — the gap — has typically required some clever workarounds. But a new CSS feature changes all that with just a few simple CSS properties that make it easy, yet also flexible, to display styled separators between your layout items. The Gap Strikes Back: Now Stylable originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Patrick Brosset",
  "published": "Tue, 01 Jul 2025 12:42:38 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "flexbox",
    "grid",
    "layout",
    "multi-column layout"
  ],
  "byline": "Patrick Brosset",
  "length": 9869,
  "excerpt": "Styling the space between layout items — the gap — has typically required some clever workarounds. But a new CSS feature changes all that with just a few simple CSS properties that make it easy, yet also flexible, to display styled separators between your layout items.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Four years ago, I wrote an article titled Minding the “gap”, where I talked about the CSS gap property, where it applied, and how it worked with various CSS layouts. At the time, I described how easy it was to evenly space items out in a flex, grid, or multi-column layout, by using the gap property. But, I also said that styling the gap areas was much harder, and I shared a workaround. However, workarounds like using extra HTML elements, pseudo-elements, or borders to draw separator lines tend to come with drawbacks, especially those that impact your layout size, interfere with assistive technologies, or pollute your markup with style-only elements. Today, I’m writing again about layout gaps, but this time, to tell you all about a new and exciting CSS feature that’s going to change it all. What you previously had to use workarounds for, you’ll soon be able to do with just a few simple CSS properties that make it easy, yet also flexible, to display styled separators between your layout items. There’s already a specification draft for the feature you can peruse. At the time I’m writing this, it is available in Chrome and Edge 139 behind a flag. But I believe it won’t be long before we turn that flag on. I believe other browsers are also very receptive and engaged. Displaying decorative lines between items of a layout can make a big difference. When used well, these lines can bring more structure to your layout, and give your users more of a sense of how the different regions of a page are organized. Introducing CSS gap decorations If you’ve ever used a multi-column layout, such as by using the column-width property, then you might already be familiar with gap decorations. You can draw vertical lines between the columns of a multi-column layout by using the column-rule property: article { column-width: 20rem; column-rule: 1px solid black; } The CSS gap decorations feature builds on this to provide a more comprehensive system that makes it easy for you to draw separator lines in other layout types. For example, the draft specification says that the column-rule property also works in flexbox and grid layouts: .my-grid-container { display: grid; gap: 2px; column-rule: 2px solid pink; } No need for extra elements or borders! The key benefit here is that the decoration happens in CSS only, where it belongs, with no impacts to your semantic markup. The CSS gap decorations feature also introduces a new row-rule property for drawing lines between rows: .my-flex-container { display: flex; gap: 10px; row-rule: 10px dotted limegreen; column-rule: 5px dashed coral; } But that’s not all, because the above syntax also allows you to define multiple, comma-separated, line style values, and use the same repeat() function that CSS grid already uses for row and column templates. This makes it possible to define different styles of line decorations in a single layout, and adapt to an unknown number of gaps: .my-container { display: grid; gap: 2px; row-rule: repeat(2, 1px dashed red), 2px solid black, repeat(auto, 1px dotted green); } Finally, the CSS gap decorations feature comes with additional CSS properties such as row-rule-break, column-rule-break, row-rule-outset, column-rule-outset, and gap-rule-paint-order, which make it possible to precisely customize the way the separators are drawn, whether they overlap, or where they start and end. And of course, all of this works across grid, flexbox, multi-column, and soon, masonry! Browser support Currently, the CSS gap decorations feature is only available in Chromium-based browsers. The feature is still early in the making, and there’s time for you all to try it and to provide feedback that could help make the feature better and more adapted to your needs. If you want to try the feature today, make sure to use Edge or Chrome, starting with version 139 (or another Chromium-based browser that matches those versions), and enable the flag by following these steps: In Chrome or Edge, go to about://flags. In the search field, search for Enable Experimental Web Platform Features. Enable the flag. Restart the browser. To put this all into practice, let’s walk through an example together that uses the new CSS gap decorations feature. I also have a final example you can demo. Using CSS gap decorations Let’s build a simple web page to learn how to use the feature. Here is what we’ll be building: The above layout contains a header section with a title, a navigation menu with a few links, a main section with a series of short paragraphs of text and photos, and a footer. We’ll use the following markup: \u003cbody\u003e \u003cheader\u003e \u003ch1\u003eMy personal site\u003c/h1\u003e \u003c/header\u003e \u003cnav\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"#\"\u003eHome\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eBlog\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eAbout\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eLinks\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/nav\u003e \u003cmain\u003e \u003carticle\u003e \u003cp\u003e...\u003c/p\u003e \u003c/article\u003e \u003carticle\u003e \u003cimg src=\"cat.jpg\" alt=\"A sleeping cat.\"\u003e \u003c/article\u003e \u003carticle\u003e \u003cp\u003e...\u003c/p\u003e \u003c/article\u003e \u003carticle\u003e \u003cimg src=\"tree.jpg\" alt=\"An old olive tree trunk.\"\u003e \u003c/article\u003e \u003carticle\u003e \u003cp\u003e...\u003c/p\u003e \u003c/article\u003e \u003carticle\u003e \u003cp\u003e...\u003c/p\u003e \u003c/article\u003e \u003carticle\u003e \u003cp\u003e...\u003c/p\u003e \u003c/article\u003e \u003carticle\u003e \u003cimg src=\"strings.jpg\" alt=\"Snow flakes falling in a motion blur effect.\"\u003e \u003c/article\u003e \u003c/main\u003e \u003cfooter\u003e \u003cp\u003e© 2025 Patrick Brosset\u003c/p\u003e \u003c/footer\u003e \u003c/body\u003e We’ll start by making the \u003cbody\u003e element be a grid container. This way, we can space out the \u003cheader\u003e, \u003cnav\u003e, \u003cmain\u003e, and \u003cfooter\u003e elements apart in one go by using the gap property: body { display: grid; gap: 4rem; margin: 2rem; } Let’s now use the CSS gap decorations feature to display horizontal separator lines within the gaps we just defined: body { display: grid; gap: 4rem; margin: 2rem; row-rule: 1rem solid #efefef; } This gives us the following result: We can do a bit better by making the first horizontal line look different than the other two lines, and simplify the row-rule value by using the repeat() syntax: body { display: grid; gap: 4rem; margin: 2rem; row-rule: 1rem solid #efefef, repeat(2, 2px solid #efefef); } With this new row-rule property value, we’re telling the browser to draw the first horizontal separator as a 1rem thick line, and the next two separators as 2px thick lines, which gives the following result: Now, let’s turn our attention to the navigation element and its list of links. We’ll use flexbox to display the links in a single row, where each link is separated from the other links by a gap and a vertical line: nav ul { display: flex; flex-wrap: wrap; gap: 2rem; column-rule: 2px dashed #666; } Very similarly to how we used the row-rule property before, we’re now using the column-rule property to display a dashed 2px thick separator between the links. Our example web page now looks like this: The last thing we need to change is the \u003cmain\u003e element and its paragraphs and pictures. We’ll use flexbox again and display the various children in a wrapping row of varying width items: main { display: flex; flex-wrap: wrap; gap: 4rem; } main \u003e * { flex: 1 1 200px; } main article:has(p) { flex-basis: 400px; } In the above code snippet, we’re setting the \u003cmain\u003e element to be a wrapping flex container with a 4rem gap between items and flex lines. We’re also making the items have a flex basis size of 200px for pictures and 400px for text, and allowing them to grow and shrink as needed. This gives us the following result: Let’s use CSS gap decorations to bring a little more structure to our layout by drawing 2px thick separator lines between the rows and columns of the layout: main { display: flex; flex-wrap: wrap; gap: 4rem; row-rule: 2px solid #999; column-rule: 2px solid #999; } This gives us the following result, which is very close to our expected design: The last detail we want to change is related to the vertical lines. We don’t want them to span across the entire height of the flex lines but instead start and stop where the content starts and stops. With CSS gap decorations, we can easily achieve this by using the column-rule-outset property to fine-tune exactly where the decorations start and end, relative to the gap area: main { display: flex; flex-wrap: wrap; gap: 4rem; row-rule: 2px solid #999; column-rule: 2px solid #999; column-rule-outset: 0; } The column-rule-outset property above makes the vertical column separators span the height of each row, excluding the gap area, which is what we want: And with that, we’re done with our example. Check out the live example, and source code. Learn more There’s more to the feature and I mentioned a couple more CSS properties earlier gap-rule-paint-order, which lets you control which of the decorations, rows or columns, appear above the other ones. row-rule-break / column-rule-break, which sets the behavior of the decoration lines at intersections. In particular, whether they are made of multiple segments, which start and end at intersections, or single, continuous lines. Because the feature is new, there isn’t MDN documentation about it yet. So to learn more, check out: CSS Gap Decorations Module Level 1 (First Public Working Draft) Microsoft Edge Explainer The Edge team has also created an interactive playground where you can use visual controls to configure gap decorations. And, of course, the reason this is all implemented behind a flag is to elicit feedback from developers like you! If you have any feedback, questions, or bugs about this feature, I definitely encourage you to open a new ticket on the Chromium issue tracker.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/04/gap.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eFour years ago, I wrote an article titled \u003ca href=\"https://css-tricks.com/minding-the-gap/\"\u003eMinding the “gap”\u003c/a\u003e, where I talked about the CSS \u003ccode\u003egap\u003c/code\u003e property, where it applied, and how it worked with various CSS layouts.\u003c/p\u003e\n\n\n\n\u003cp\u003eAt the time, I described how easy it was to evenly space items out in a flex, grid, or multi-column layout, by using the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/g/gap/\"\u003egap\u003c/a\u003e\u003c/code\u003e property. But, I also said that \u003cem\u003estyling\u003c/em\u003e the gap areas was much harder, and I shared a workaround.\u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, workarounds like using extra HTML elements, pseudo-elements, or borders to draw separator lines tend to come with drawbacks, especially those that impact your layout size, interfere with assistive technologies, or pollute your markup with style-only elements.\u003c/p\u003e\n\n\n\n\u003cp\u003eToday, I’m writing again about layout gaps, but this time, to tell you all about a new and exciting CSS feature that’s going to change it all. \u003cstrong\u003eWhat you previously had to use workarounds for, you’ll soon be able to do with just a few simple CSS properties that make it easy, yet also flexible, to display styled separators between your layout items.\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eThere’s already a \u003ca href=\"https://www.w3.org/TR/css-gaps-1/\" rel=\"noopener\"\u003especification draft for the feature\u003c/a\u003e you can peruse. At the time I’m writing this, it is available in Chrome and Edge 139 behind a flag. But I believe it won’t be long before we turn that flag on. I believe other browsers are also very receptive and engaged.\u003c/p\u003e\n\n\n\n\u003cp\u003eDisplaying decorative lines between items of a layout can make a big difference. When used well, these lines can bring more structure to your layout, and give your users more of a sense of how the different regions of a page are organized.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"introducing-css-gap-decorations\"\u003eIntroducing CSS gap decorations\u003c/h3\u003e\n\n\n\u003cp\u003eIf you’ve ever used a multi-column layout, such as by using the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/c/column-width/\"\u003ecolumn-width\u003c/a\u003e\u003c/code\u003e property, then you might already be familiar with gap decorations. You can draw vertical lines between the columns of a multi-column layout by using the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/c/column-rule/\"\u003ecolumn-rule\u003c/a\u003e\u003c/code\u003e property:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003earticle {\n  column-width: 20rem;\n  column-rule: 1px solid black;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1254\" height=\"383\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?resize=1254%2C383\u0026amp;ssl=1\" alt=\"Two 1-pixel solid black vertical lines separate a row of three text blocks.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?w=1254\u0026amp;ssl=1 1254w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?resize=300%2C92\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?resize=1024%2C313\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-1.webp?resize=768%2C235\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe CSS gap decorations feature builds on this to provide a more comprehensive system that makes it easy for you to draw separator lines in other layout types.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example, the draft specification says that the \u003ccode\u003ecolumn-rule\u003c/code\u003e property also works in flexbox and grid layouts:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.my-grid-container {\n  display: grid;\n  gap: 2px;\n  column-rule: 2px solid pink;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1217\" height=\"436\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?resize=1217%2C436\u0026amp;ssl=1\" alt=\"A 2-pixel solid light pink vertical line separates two side-by-side text blocks.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?w=1217\u0026amp;ssl=1 1217w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?resize=300%2C107\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?resize=1024%2C367\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-2.webp?resize=768%2C275\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNo need for extra elements or borders! The key benefit here is that the decoration happens in CSS only, where it belongs, with no impacts to your semantic markup.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe CSS gap decorations feature also introduces a new \u003ccode\u003erow-rule\u003c/code\u003e property for drawing lines between rows:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.my-flex-container {\n  display: flex;\n  gap: 10px;\n  row-rule: 10px dotted limegreen;\n  column-rule: 5px dashed coral;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1375\" height=\"205\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?resize=1375%2C205\u0026amp;ssl=1\" alt=\"Six items flowing horizontally in two rows in a flex container, separated by 5-pixel dashed coral-colored vertical lines and a single 10-pixel dotted lime-green line between the two rows.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?w=1375\u0026amp;ssl=1 1375w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?resize=300%2C45\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?resize=1024%2C153\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-snippet-3.webp?resize=768%2C115\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eBut that’s not all, because the above syntax also allows you to define multiple, comma-separated, line style values, and use the same \u003ccode\u003erepeat()\u003c/code\u003e function that CSS grid already uses for row and column templates. This makes it possible to define different styles of line decorations in a single layout, and adapt to an unknown number of gaps:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.my-container {\n  display: grid;\n  gap: 2px;\n  row-rule:\n    repeat(2, 1px dashed red),\n    2px solid black,\n    repeat(auto, 1px dotted green);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"1429\" height=\"741\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-snippet-4.svg\" alt=\"Seven text blocks stacked vertically separated by horizontal lines that are styled differently.\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFinally, the CSS gap decorations feature comes with additional CSS properties such as \u003ccode\u003erow-rule-break\u003c/code\u003e, \u003ccode\u003ecolumn-rule-break\u003c/code\u003e, \u003ccode\u003erow-rule-outset\u003c/code\u003e, \u003ccode\u003ecolumn-rule-outset\u003c/code\u003e, and \u003ccode\u003egap-rule-paint-order\u003c/code\u003e, which make it possible to precisely customize the way the separators are drawn, whether they overlap, or where they start and end.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnd of course, all of this works across \u003ca href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\"\u003egrid\u003c/a\u003e, \u003ca href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\"\u003eflexbox\u003c/a\u003e, \u003ca href=\"https://css-tricks.com/revisiting-css-multi-column-layout/\"\u003emulti-column\u003c/a\u003e, and soon, \u003ca href=\"https://meyerweb.com/eric/thoughts/2025/05/21/masonry-item-flow-and-gulp/\" rel=\"noopener\"\u003emasonry\u003c/a\u003e!\u003c/p\u003e\n\n\n\u003ch3 id=\"browser-support\"\u003eBrowser support\u003c/h3\u003e\n\n\n\u003cp\u003eCurrently, the CSS gap decorations feature is only available in Chromium-based browsers.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe feature is still early in the making, and there’s time for you all to try it and to provide feedback that could help make the feature better and more adapted to your needs.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you want to try the feature today, make sure to use Edge or Chrome, starting with version 139 (or another Chromium-based browser that matches those versions), and enable the flag by following these steps:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eIn Chrome or Edge, go to \u003ccode\u003eabout://flags\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eIn the search field, search for \u003cstrong\u003eEnable Experimental Web Platform Features\u003c/strong\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eEnable the flag.\u003c/li\u003e\n\n\n\n\u003cli\u003eRestart the browser.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eTo put this all into practice, let’s walk through an example together that uses the new CSS gap decorations feature. \u003ca href=\"https://microsoftedge.github.io/Demos/css-gap-decorations/personal-site.html\" rel=\"noopener\"\u003eI also have a final example you can demo.\u003c/a\u003e\u003c/p\u003e\n\n\n\u003ch3 id=\"using-css-gap-decorations\"\u003eUsing CSS gap decorations\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s build a simple web page to learn how to use the feature. Here is what we’ll be building:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"1501\" height=\"1600\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-decoration-01.svg\" alt=\"Webpage titled My Personal Site in the header above a horizontal navigation and a staggered, masonry-like layout of text and images with thin lines between them. The design is in black and white.\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe above layout contains a header section with a title, a navigation menu with a few links, a main section with a series of short paragraphs of text and photos, and a footer.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe’ll use the following markup:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;body\u0026gt;\n\u0026lt;header\u0026gt;\n  \u0026lt;h1\u0026gt;My personal site\u0026lt;/h1\u0026gt;\n\u0026lt;/header\u0026gt;\n\u0026lt;nav\u0026gt;\n  \u0026lt;ul\u0026gt;\n    \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Blog\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Links\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;/ul\u0026gt;\n\u0026lt;/nav\u0026gt;\n\u0026lt;main\u0026gt;\n  \u0026lt;article\u0026gt;\n    \u0026lt;p\u0026gt;...\u0026lt;/p\u0026gt;\n  \u0026lt;/article\u0026gt;\n  \u0026lt;article\u0026gt;\n    \u0026lt;img src=\u0026#34;cat.jpg\u0026#34; alt=\u0026#34;A sleeping cat.\u0026#34;\u0026gt;\n  \u0026lt;/article\u0026gt;\n  \u0026lt;article\u0026gt;\n    \u0026lt;p\u0026gt;...\u0026lt;/p\u0026gt;\n  \u0026lt;/article\u0026gt;\n  \u0026lt;article\u0026gt;\n    \u0026lt;img src=\u0026#34;tree.jpg\u0026#34; alt=\u0026#34;An old olive tree trunk.\u0026#34;\u0026gt;\n  \u0026lt;/article\u0026gt;\n  \u0026lt;article\u0026gt;\n    \u0026lt;p\u0026gt;...\u0026lt;/p\u0026gt;\n  \u0026lt;/article\u0026gt;\n  \u0026lt;article\u0026gt;\n    \u0026lt;p\u0026gt;...\u0026lt;/p\u0026gt;\n  \u0026lt;/article\u0026gt;\n  \u0026lt;article\u0026gt;\n    \u0026lt;p\u0026gt;...\u0026lt;/p\u0026gt;\n  \u0026lt;/article\u0026gt;\n  \u0026lt;article\u0026gt;\n    \u0026lt;img src=\u0026#34;strings.jpg\u0026#34; alt=\u0026#34;Snow flakes falling in a motion blur effect.\u0026#34;\u0026gt;\n  \u0026lt;/article\u0026gt;\n\u0026lt;/main\u0026gt;\n\u0026lt;footer\u0026gt;\n  \u0026lt;p\u0026gt;© 2025 Patrick Brosset\u0026lt;/p\u0026gt;\n\u0026lt;/footer\u0026gt;\n\u0026lt;/body\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe’ll start by making the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e element be a grid container. This way, we can space out the \u003ccode\u003e\u0026lt;header\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;nav\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;footer\u0026gt;\u003c/code\u003e elements apart in one go by using the \u003ccode\u003egap\u003c/code\u003e property:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebody {\n  display: grid;\n  gap: 4rem;\n  margin: 2rem;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eLet’s now use the CSS gap decorations feature to display horizontal separator lines within the gaps we just defined:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebody {\n  display: grid;\n  gap: 4rem;\n  margin: 2rem;\n \n  row-rule: 1rem solid #efefef;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis gives us the following result:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"1451\" height=\"1600\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-decoration-02.svg\" alt=\"The basic layout for the webpage. The title is the same but the navigation and layout are both vertically stacked. There are no lines between items in the layout.\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWe can do a bit better by making the first horizontal line look different than the other two lines, and simplify the \u003ccode\u003erow-rule\u003c/code\u003e value by using the \u003ccode\u003erepeat()\u003c/code\u003e syntax:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebody {\n  display: grid;\n  gap: 4rem;\n  margin: 2rem;\n \n  row-rule:\n    1rem solid #efefef,\n    repeat(2, 2px solid #efefef);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this new \u003ccode\u003erow-rule\u003c/code\u003e property value, we’re telling the browser to draw the first horizontal separator as a \u003ccode\u003e1rem\u003c/code\u003e thick line, and the next two separators as \u003ccode\u003e2px\u003c/code\u003e thick lines, which gives the following result:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"1452\" height=\"1600\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-decoration-03.svg\" alt=\"The webpage is largely the same, but the border between the site title and the navigation is much thicker.\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow, let’s turn our attention to the navigation element and its list of links. We’ll use flexbox to display the links in a single row, where each link is separated from the other links by a gap and a vertical line:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003enav ul {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 2rem;\n  column-rule: 2px dashed #666;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eVery similarly to how we used the \u003ccode\u003erow-rule\u003c/code\u003e property before, we’re now using the \u003ccode\u003ecolumn-rule\u003c/code\u003e property to display a dashed \u003ccode\u003e2px\u003c/code\u003e thick separator between the links.\u003c/p\u003e\n\n\n\n\u003cp\u003eOur example web page now looks like this:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1552\" height=\"1600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=1552%2C1600\u0026amp;ssl=1\" alt=\"The webpage is still largely the same, but now the navigation is horizontal and there is a light dashed line between the links.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?w=1552\u0026amp;ssl=1 1552w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=291%2C300\u0026amp;ssl=1 291w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=993%2C1024\u0026amp;ssl=1 993w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=768%2C792\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-04.webp?resize=1490%2C1536\u0026amp;ssl=1 1490w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe last thing we need to change is the \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e element and its paragraphs and pictures. We’ll use flexbox again and display the various children in a wrapping row of varying width items:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003emain {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4rem;\n}\n\n\nmain \u0026gt; * {\n  flex: 1 1 200px;\n}\n\n\nmain article:has(p) {\n  flex-basis: 400px;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIn the above code snippet, we’re setting the \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e element to be a wrapping flex container with a \u003ccode\u003e4rem\u003c/code\u003e gap between items and flex lines. We’re also making the items have a flex basis size of \u003ccode\u003e200px\u003c/code\u003e for pictures and \u003ccode\u003e400px\u003c/code\u003e for text, and allowing them to grow and shrink as needed. This gives us the following result:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"1494\" height=\"1600\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/gap-decoration-05.svg\" alt=\"The webpage layout has been established but there are no lines between items.\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eLet’s use CSS gap decorations to bring a little more structure to our layout by drawing \u003ccode\u003e2px\u003c/code\u003e thick separator lines between the rows and columns of the layout:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003emain {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4rem;\n  row-rule: 2px solid #999;\n  column-rule: 2px solid #999;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis gives us the following result, which is very close to our expected design:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1500\" height=\"1600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=1500%2C1600\u0026amp;ssl=1\" alt=\"Thin light lines have been added between the layout of text and images, creating a masonry-like layout. The lines extend all the way across each item like enclosed boxes.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?w=1500\u0026amp;ssl=1 1500w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=281%2C300\u0026amp;ssl=1 281w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=960%2C1024\u0026amp;ssl=1 960w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=768%2C819\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-06.webp?resize=1440%2C1536\u0026amp;ssl=1 1440w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe last detail we want to change is related to the vertical lines. We don’t want them to span across the entire height of the flex lines but instead start and stop where the content starts and stops.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith CSS gap decorations, we can easily achieve this by using the \u003ccode\u003ecolumn-rule-outset\u003c/code\u003e property to fine-tune exactly where the decorations start and end, relative to the gap area:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003emain {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4rem;\n  row-rule: 2px solid #999;\n  column-rule: 2px solid #999;\n  column-rule-outset: 0;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003ecolumn-rule-outset\u003c/code\u003e property above makes the vertical column separators span the height of each row, excluding the gap area, which is what we want:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1495\" height=\"1600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=1495%2C1600\u0026amp;ssl=1\" alt=\"Spacing has been added between the layout items so that the lines between them are no longer connected, creating an elegant layout.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?w=1495\u0026amp;ssl=1 1495w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=280%2C300\u0026amp;ssl=1 280w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=957%2C1024\u0026amp;ssl=1 957w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=768%2C822\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/gap-decoration-07.webp?resize=1435%2C1536\u0026amp;ssl=1 1435w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAnd with that, we’re done with our example. Check out \u003ca href=\"https://microsoftedge.github.io/Demos/css-gap-decorations/personal-site.html\" rel=\"noopener\"\u003ethe live example\u003c/a\u003e, and \u003ca href=\"https://github.com/MicrosoftEdge/Demos/blob/main/css-gap-decorations/personal-site.html\" rel=\"noopener\"\u003esource code\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003ch3 id=\"learn-more\"\u003eLearn more\u003c/h3\u003e\n\n\n\u003cp\u003eThere’s more to the feature and I mentioned a couple more CSS properties earlier\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003egap-rule-paint-order\u003c/code\u003e\u003c/strong\u003e, which lets you control which of the decorations, rows or columns, appear above the other ones.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erow-rule-break\u003c/code\u003e\u003c/strong\u003e / \u003cstrong\u003e\u003ccode\u003ecolumn-rule-break\u003c/code\u003e\u003c/strong\u003e, which sets the behavior of the decoration lines at intersections. In particular, whether they are made of multiple segments, which start and end at intersections, or single, continuous lines.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eBecause the feature is new, there isn’t MDN documentation about it yet. So to learn more, check out:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3.org/TR/css-gaps-1/\" rel=\"noopener\"\u003eCSS Gap Decorations Module Level 1\u003c/a\u003e (First Public Working Draft)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/main/CSSGapDecorations/explainer.md\" rel=\"noopener\"\u003eMicrosoft Edge Explainer\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThe Edge team has also created an \u003ca href=\"https://microsoftedge.github.io/Demos/css-gap-decorations/playground.html\" rel=\"noopener\"\u003einteractive playground\u003c/a\u003e where you can use visual controls to configure gap decorations.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnd, of course, the reason this is all implemented behind a flag is to elicit feedback from developers like you! If you have any feedback, questions, or bugs about this feature, I definitely encourage you to open a new ticket on the \u003ca href=\"https://issues.chromium.org/issues/new?template_issue=422768750\u0026amp;component=1456721\" rel=\"noopener\"\u003eChromium issue tracker\u003c/a\u003e.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2025-07-01T06:42:38-06:00",
  "modifiedTime": "2025-07-01T06:42:41-06:00"
}
