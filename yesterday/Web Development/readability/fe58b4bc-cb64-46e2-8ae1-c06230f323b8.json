{
  "id": "fe58b4bc-cb64-46e2-8ae1-c06230f323b8",
  "title": "Creating an Auto-Closing Notification With an HTML Popover",
  "link": "https://css-tricks.com/creating-an-auto-closing-notification-with-an-html-popover/",
  "description": "The HTML popover attribute transforms elements into top-layer elements that can be opened and closed with a button or JavaScript. Popovers can be dismissed a number of ways, but there is no option to auto-close them. Preethi has a technique you can use. Creating an Auto-Closing Notification With an HTML Popover originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Preethi",
  "published": "Mon, 09 Jun 2025 12:58:37 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "popover"
  ],
  "byline": "Preethi",
  "length": 5658,
  "excerpt": "The HTML popover attribute transforms elements into top-layer elements that can be opened and closed with a button or JavaScript. Popovers can be dismissed a number of ways, but there is no option to auto-close them. Preethi has a technique you can use.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "The HTML popover attribute transforms elements into top-layer elements that can be opened and closed with a button or JavaScript. Most popovers can be light-dismissed, closing when the user clicks or taps outside the popup. Currently, HTML popover lacks built-in auto-close functionality, but it’s easy to add. Auto closing popups are useful for user interfaces like banner notifications — the new-message alerts in phones, for instance. A picture demo, is worth a thousand words, right? Click on the “Add to my bookmarks” button in the following example. It triggers a notification that dismisses itself after a set amount of time. Let’s start with the popover The HTML popover attribute is remarkably trivial to use. Slap it on a div, specify the type of popover you need, and you’re done. \u003cdiv popover=\"manual\" id=\"pop\"\u003eBookmarked!\u003c/div\u003e A manual popover simply means it cannot be light-dismissed by clicking outside the element. As a result, we have to hide, show, or toggle the popover’s visibility ourselves explicitly with either buttons or JavaScript. Let’s use a semantic HTML button. \u003cbutton popovertarget=\"pop\" popovertargetaction=\"show\"\u003e Add to my bookmarks \u003c/button\u003e \u003cdiv popover=\"manual\" id=\"pop\"\u003eBookmarked!\u003c/div\u003e The popovertarget and popovertargetaction attributes are the final two ingredients, where popovertarget links the button to the popover element and popovertargetaction ensures that the popover is show-n when the button is clicked. Hiding the popover with a CSS transition OK, so the challenge is that we have a popover that is shown when a certain button is clicked, but it cannot be dismissed. The button is only wired up to show the popover, but it does not hide or toggle the popover (since we are not explicitly declaring it). We want the popover to show when the button is clicked, then dismiss itself after a certain amount of time. The HTML popover can’t be closed with CSS, but it can be hidden from the page. Adding animation to that creates a visual effect. In our example, we will hide the popover by eliminating its CSS height property. You’ll learn in a moment why we’re using height, and that there are other ways you can go about it. We can indeed select the popover attribute using an attribute selector: [popover] { height: 0; transition: height cubic-bezier(0.6, -0.28, 0.735, 0.045) .3s .6s; @starting-style { height: 1lh; } } When the popover is triggered by the button, its height value is the one declared in the @starting-style ruleset (1lh). After the transition-delay (which is .6s in the example), the height goes from 1lh to 0 in .3s, effectively hiding the popover. Once again, this is only hiding the popover, not closing it properly. That’s the next challenge and we’ll need JavaScript for that level of interaction. Closing the popover with JavaScript We can start by setting a variable that selects the popover: const POPOVER = document.querySelector('[popover]'); Next, we can establish a ResizeObserver that monitors the popover’s size: const POPOVER = document.querySelector('[popover]'); const OBSERVER = new ResizeObserver((entries) =\u003e { if(entries[0].contentBoxSize[0].blockSize == 0) OBSERVER.unobserve((POPOVER.hidePopover(), POPOVER)); }); And we can fire that off starting when the button to show the popover is clicked: const POPOVER = document.querySelector('[popover]'); const OBSERVER = new ResizeObserver((entries) =\u003e { if(entries[0].contentBoxSize[0].blockSize == 0) OBSERVER.unobserve((POPOVER.hidePopover(), POPOVER)); }); document.querySelector('button').onclick = () =\u003e OBSERVER.observe(POPOVER); The observer will know when the popover’s CSS height reaches zero at the end of the transition, and, at that point, the popover is closed with hidePopover(). From there, the observer is stopped with unobserve(). In our example, height and ResizeObserver are used to auto-close the notification. You can try any other CSS property and JavaScript observer combination that might work with your preference. Learning about ResizeObserver and MutationObserver can help you find some options. Setting an HTML fallback When JavaScript is disabled in the browser, if the popover type is set to any of the light-dismissible types, it acts as a fallback. Keep the popover visible by overriding the style rules that hide it. The user can dismiss it by clicking or tapping anywhere outside the element. If the popover needs to be light-dismissible only when JavaScript is disabled, then include that popover inside a \u003cnoscript\u003e element before the manual popover. It’s the same process as before, where you override CSS styles as needed. \u003cnoscript\u003e \u003cdiv popover=\"auto\" id=\"pop\"\u003eBookmarked!\u003c/div\u003e \u003c/noscript\u003e \u003cdiv popover=\"manual\" id=\"pop\"\u003eBookmarked!\u003c/div\u003e \u003c!-- goes where \u003chead\u003e element's descendants go --\u003e \u003cnoscript\u003e \u003cstyle\u003e [popover] { transition: none; height: 1lh; } \u003c/style\u003e \u003c/noscript\u003e When to use this method? Another way to implement all of this would be to use setTimeout() to create a delay before closing the popover in JavaScript when the button is clicked, then adding a class to the popover element to trigger the transition effect. That way, no observer is needed. With the method covered in this post, the delay can be set and triggered in CSS itself, thanks to @starting-style and transition-delay — no extra class required! If you prefer to implement the delay through CSS itself, then this method works best. The JavaScript will catch up to the change CSS makes at the time CSS defines, not the other way around.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/dialog-pop.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eThe \u003ca href=\"https://css-tricks.com/poppin-in/\"\u003eHTML \u003ccode\u003epopover\u003c/code\u003e attribute\u003c/a\u003e transforms elements into top-layer elements that can be opened and closed with a button or JavaScript. Most popovers can be light-dismissed, closing when the user clicks or taps outside the popup. Currently, HTML \u003ccode\u003epopover\u003c/code\u003e lacks built-in auto-close functionality, but it’s easy to add. Auto closing popups are useful for user interfaces like banner notifications — the new-message alerts in phones, for instance.\u003c/p\u003e\n\n\n\n\u003cp\u003eA \u003cdel\u003epicture\u003c/del\u003e demo, is worth a thousand words, right? Click on the “Add to my bookmarks” button in the following example. It triggers a notification that dismisses itself after a set amount of time.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"let-s-start-with-the-popover\"\u003eLet’s start with the popover\u003c/h3\u003e\n\n\n\u003cp\u003eThe HTML \u003ccode\u003epopover\u003c/code\u003e attribute is remarkably trivial to use. Slap it on a \u003ccode\u003ediv\u003c/code\u003e, specify the type of popover you need, and you’re done.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div popover=\u0026#34;manual\u0026#34; id=\u0026#34;pop\u0026#34;\u0026gt;Bookmarked!\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eA \u003ccode\u003emanual\u003c/code\u003e popover simply means it cannot be light-dismissed by clicking outside the element. As a result, we have to hide, show, or toggle the popover’s visibility ourselves explicitly with either buttons or JavaScript. Let’s use a semantic HTML \u003ccode\u003ebutton\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;button popovertarget=\u0026#34;pop\u0026#34; popovertargetaction=\u0026#34;show\u0026#34;\u0026gt;\n  Add to my bookmarks\n\u0026lt;/button\u0026gt;\n\u0026lt;div popover=\u0026#34;manual\u0026#34; id=\u0026#34;pop\u0026#34;\u0026gt;Bookmarked!\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003epopovertarget\u003c/code\u003e and \u003ccode\u003epopovertargetaction\u003c/code\u003e attributes are the final two ingredients, where \u003ccode\u003epopovertarget\u003c/code\u003e links the button to the \u003ccode\u003epopover\u003c/code\u003e element and \u003ccode\u003epopovertargetaction\u003c/code\u003e ensures that the \u003ccode\u003epopover\u003c/code\u003e is \u003ccode\u003eshow\u003c/code\u003e-n when the button is clicked.\u003c/p\u003e\n\n\n\u003ch3 id=\"hiding-the-popover-with-a-css-transition\"\u003eHiding the popover with a CSS transition\u003c/h3\u003e\n\n\n\u003cp\u003eOK, so the challenge is that we have a \u003ccode\u003epopover\u003c/code\u003e that is shown when a certain button is clicked, but it cannot be dismissed. The button is only wired up to \u003ccode\u003eshow\u003c/code\u003e the \u003ccode\u003epopover\u003c/code\u003e, but it does not \u003ccode\u003ehide\u003c/code\u003e or \u003ccode\u003etoggle\u003c/code\u003e the \u003ccode\u003epopover\u003c/code\u003e (since we are not explicitly declaring it). We want the \u003ccode\u003epopover\u003c/code\u003e to \u003ccode\u003eshow\u003c/code\u003e when the button is clicked, then dismiss itself after a certain amount of time.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe HTML \u003ccode\u003epopover\u003c/code\u003e can’t be \u003cem\u003eclosed\u003c/em\u003e with CSS, but it can be \u003cem\u003ehidden\u003c/em\u003e from the page. Adding animation to that creates a visual effect. In our example, we will hide the \u003ccode\u003epopover\u003c/code\u003e by eliminating its CSS \u003ccode\u003eheight\u003c/code\u003e property. You’ll learn in a moment why we’re using \u003ccode\u003eheight\u003c/code\u003e, and that there are other ways you can go about it.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe can indeed select the \u003ccode\u003epopover\u003c/code\u003e attribute using an \u003ca href=\"https://css-tricks.com/css-selectors/#aa-attribute-selectors\"\u003eattribute selector\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e[popover] {\n  height: 0;\n  transition: height cubic-bezier(0.6, -0.28, 0.735, 0.045) .3s .6s;\n\n  @starting-style { \n    height: 1lh;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhen the \u003ccode\u003epopover\u003c/code\u003e is triggered by the button, its \u003ccode\u003eheight\u003c/code\u003e value is the one declared in the \u003ccode\u003e@starting-style\u003c/code\u003e ruleset (\u003ccode\u003e1lh\u003c/code\u003e). After the \u003ccode\u003etransition-delay\u003c/code\u003e (which is \u003ccode\u003e.6s\u003c/code\u003e in the example), the \u003ccode\u003eheight\u003c/code\u003e goes from \u003ccode\u003e1lh\u003c/code\u003e to \u003ccode\u003e0\u003c/code\u003e in \u003ccode\u003e.3s\u003c/code\u003e, effectively hiding the \u003ccode\u003epopover\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eOnce again, this is only \u003cem\u003ehiding\u003c/em\u003e the popover, not \u003cem\u003eclosing\u003c/em\u003e it properly. That’s the next challenge and we’ll need JavaScript for that level of interaction.\u003c/p\u003e\n\n\n\u003ch3 id=\"closing-the-popover-with-javascript\"\u003eClosing the popover with JavaScript\u003c/h3\u003e\n\n\n\u003cp\u003eWe can start by setting a variable that selects the \u003ccode\u003epopover\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst POPOVER = document.querySelector(\u0026#39;[popover]\u0026#39;);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNext, we can establish a \u003ccode\u003eResizeObserver\u003c/code\u003e that monitors the \u003ccode\u003epopover\u003c/code\u003e’s size:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst POPOVER = document.querySelector(\u0026#39;[popover]\u0026#39;);\nconst OBSERVER = \n  new ResizeObserver((entries) =\u0026gt; {\n    if(entries[0].contentBoxSize[0].blockSize == 0) \n      OBSERVER.unobserve((POPOVER.hidePopover(), POPOVER));\n  });\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd we can fire that off starting when the button to show the \u003ccode\u003epopover\u003c/code\u003e is clicked:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst POPOVER = document.querySelector(\u0026#39;[popover]\u0026#39;);\nconst OBSERVER = \n  new ResizeObserver((entries) =\u0026gt; {\n    if(entries[0].contentBoxSize[0].blockSize == 0) \n      OBSERVER.unobserve((POPOVER.hidePopover(), POPOVER));\n  });\ndocument.querySelector(\u0026#39;button\u0026#39;).onclick = () =\u0026gt; OBSERVER.observe(POPOVER);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe observer will know when the \u003ccode\u003epopover\u003c/code\u003e’s CSS \u003ccode\u003eheight\u003c/code\u003e reaches zero at the end of the transition, and, at that point, the \u003ccode\u003epopover\u003c/code\u003e is closed with \u003ccode\u003ehidePopover()\u003c/code\u003e. From there, the observer is stopped with \u003ccode\u003eunobserve()\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn our example, \u003ccode\u003eheight\u003c/code\u003e and \u003ccode\u003eResizeObserver\u003c/code\u003e are used to auto-close the notification. You can try any other CSS property and JavaScript observer combination that might work with your preference. Learning about \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\" rel=\"noopener\"\u003e\u003ccode\u003eResizeObserver\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\" rel=\"noopener\"\u003e\u003ccode\u003eMutationObserver\u003c/code\u003e\u003c/a\u003e can help you find some options.\u003c/p\u003e\n\n\n\u003ch3 id=\"setting-an-html-fallback\"\u003eSetting an HTML fallback\u003c/h3\u003e\n\n\n\u003cp\u003eWhen JavaScript is disabled in the browser, if the \u003ccode\u003epopover\u003c/code\u003e type is set to any of the light-dismissible types, it acts as a fallback. Keep the \u003ccode\u003epopover\u003c/code\u003e visible by overriding the style rules that hide it. The user can dismiss it by clicking or tapping anywhere outside the element.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf the \u003ccode\u003epopover\u003c/code\u003e needs to be light-dismissible \u003cem\u003eonly\u003c/em\u003e when JavaScript is disabled, then include that \u003ccode\u003epopover\u003c/code\u003e inside a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/noscript\" rel=\"noopener\"\u003e\u003ccode\u003e\u0026lt;noscript\u0026gt;\u003c/code\u003e\u003c/a\u003e element before the \u003ccode\u003emanual\u003c/code\u003e popover. It’s the same process as before, where you override CSS styles as needed.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;noscript\u0026gt;\n  \u0026lt;div popover=\u0026#34;auto\u0026#34; id=\u0026#34;pop\u0026#34;\u0026gt;Bookmarked!\u0026lt;/div\u0026gt;\n\u0026lt;/noscript\u0026gt;\n\n\u0026lt;div popover=\u0026#34;manual\u0026#34; id=\u0026#34;pop\u0026#34;\u0026gt;Bookmarked!\u0026lt;/div\u0026gt;\n\n\u0026lt;!-- goes where \u0026lt;head\u0026gt; element\u0026#39;s descendants go --\u0026gt;\n\u0026lt;noscript\u0026gt;\n  \u0026lt;style\u0026gt;\n    [popover] {\n      transition: none;\n      height: 1lh;\n    }\n  \u0026lt;/style\u0026gt;\n\u0026lt;/noscript\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"when-to-use-this-method-\"\u003eWhen to use this method?\u003c/h3\u003e\n\n\n\u003cp\u003eAnother way to implement all of this would be to use \u003ccode\u003esetTimeout()\u003c/code\u003e to create a delay before closing the popover in JavaScript when the button is clicked, then adding a class to the \u003ccode\u003epopover\u003c/code\u003e element to trigger the transition effect. That way, no observer is needed.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith the method covered in this post, the delay can be set and triggered in CSS itself, thanks to \u003ca href=\"https://css-tricks.com/almanac/rules/s/starting-style/\"\u003e\u003ccode\u003e@starting-style\u003c/code\u003e\u003c/a\u003e and \u003ccode\u003etransition-delay\u003c/code\u003e — no extra class required! If you prefer to implement the delay through CSS itself, then this method works best. The JavaScript will catch up to the change CSS makes at the time CSS defines, not the other way around.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-06-09T06:58:37-06:00",
  "modifiedTime": "2025-06-09T06:58:41-06:00"
}
