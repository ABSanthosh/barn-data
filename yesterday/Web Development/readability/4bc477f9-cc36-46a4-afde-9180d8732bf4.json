{
  "id": "4bc477f9-cc36-46a4-afde-9180d8732bf4",
  "title": "Working With Multiple CSS Anchors and Popovers Inside the WordPress Loop",
  "link": "https://css-tricks.com/working-with-multiple-css-anchors-and-popovers-inside-the-wordpress-loop/",
  "description": "I know, super niche, but it could be any loop, really. The challenge is having multiple tooltips on the same page that make use of the Popover API for toggling goodness and CSS Anchor Positioning for attaching a tooltip to its respective anchor element. Working With Multiple CSS Anchors and Popovers Inside the WordPress Loop originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Wed, 19 Feb 2025 13:55:31 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "anchor positioning",
    "popover",
    "WordPress"
  ],
  "byline": "Geoff Graham",
  "length": 11546,
  "excerpt": "I know, super niche, but it could be any loop, really. The challenge is having multiple tooltips on the same page that make use of the Popover API for toggling goodness and CSS Anchor Positioning for attaching a tooltip to its respective anchor element.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "I know, super niche, but it could be any loop, really. The challenge is having multiple tooltips on the same page that make use of the Popover API for toggling goodness and CSS Anchor Positioning for attaching a tooltip to its respective anchor element. There’s plenty of moving pieces when working with popovers: A popover needs an ID (and an accessible role while we’re at it). A popovertarget needs to reference that ID. IDs have to be unique for semantics, yes, but also to hook a popover into a popovertarget. That’s just the part dealing with the Popover API. Turning to anchors: An anchor needs an anchor-name. A target element needs to reference that anchor-name. Each anchor-name must be unique to attach the target to its anchor properly. The requirements themselves are challenging. But it’s more challenging working inside a loop because you need a way to generate unique IDs and anchor names so everything is hooked up properly without conflicting with other elements on the page. In WordPress, we query an array of page objects: $property_query = new WP_Query(array( 'post_type' =\u003e 'page', 'post_status' =\u003e 'publish', 'posts_per_page' =\u003e -1, // Query them all! 'orderby' =\u003e 'title', 'order' =\u003e \"ASC\" )); Before we get into our while() statement I’d like to stub out the HTML. This is how I want a page object to look inside of its container: \u003cdiv class=\"almanac-group\"\u003e \u003cdiv class=\"group-letter\"\u003e\u003ca href=\"#\"\u003eA\u003c/a\u003e\u003c/div\u003e \u003cdiv class=\"group-list\"\u003e \u003cdetails id=\"\" class=\"group-item\"\u003e \u003csummary\u003e \u003ch2\u003e\u003ccode\u003eaccent-color\u003c/code\u003e\u003c/h2\u003e \u003c/summary\u003e \u003c/details\u003e \u003c!-- Repeat for all properties --\u003e \u003c/div\u003e \u003c/div\u003e \u003c!-- Repeat for the entire alphabet --\u003e OK, let’s stub out the tooltip markup while we’re here, focusing just inside the \u003cdetails\u003e element since that’s what represents a single page. \u003cdetails id=\"page\" class=\"group-item\"\u003e \u003csummary\u003e \u003ch2\u003e\u003ccode\u003eaccent-color\u003c/code\u003e\u003c/h2\u003e \u003cspan id=\"tooltip\" class=\"tooltip\"\u003e \u003c!-- Popover Target and Anchor --\u003e \u003cbutton class=\"info-tip-button\" aria-labelledby=\"experimental-label\" popovertarget=\"experimental-label\"\u003e \u003c!-- etc. --\u003e \u003c/button\u003e \u003c!-- Popover and Anchor Target --\u003e \u003cdiv popover id=\"experimental-label\" class=\"info-tip-content\" role=\"tooltip\"\u003e Experimental feature \u003c/div\u003e \u003c/span\u003e \u003c/summary\u003e \u003c/details\u003e With me so far? We’ll start with the Popover side of things. Right now we have a \u003cbutton\u003e that is connected to a \u003cdiv popover\u003e. Clicking the former toggles the latter. Styling isn’t really what we’re talking about, but it does help to reset a few popover things so it doesn’t get that border and sit directly in the center of the page. You’ll want to check out Michelle Barker’s article for some great tips that make this enhance progressively. .info-tip { position: relative; /* Sets containment */ /* Bail if Anchor Positioning is not supported */ [popovertarget] { display: none; } /* Style things up if Anchor Positioning is supported */ @supports (anchor-name: --infotip) { [popovertarget] { display: inline; position: relative; } [popover] { border: 0; /* Removes default border */ margin: 0; /* Resets placement */ position: absolute; /* Required */ } } This is also the point at which you’ll want to start using Chrome because Safari and Firefox are still working on supporting the feature. We’re doing good! The big deal at the moment is positioning the tooltip’s content so that it is beside the button. This is where we can start working with Anchor Positioning. Juan Diego’s guide is the bee’s knees if you’re looking for a deep dive. The gist is that we can connect an anchor to its target element in CSS. First, we register the \u003cbutton\u003e as the anchor element by giving it an anchor-name. Then we anchor the \u003cdiv popover\u003e to the \u003cbutton\u003e with position-anchor and use the anchor() function on its inset properties to position it exactly where we want, relative to the \u003cbutton\u003e: .tooltip { position: relative; /* Sets containment */ /* Bail if Anchor Positioning is not supported */ [popovertarget] { display: none; } /* Style things up if Anchor Positioning is supported */ @supports (anchor-name: --tooltip) { [popovertarget] { anchor-name: --tooltip; display: inline; position: relative; } [popover] { border: 0; /* Removes default border */ margin: 0; /* Resets placement */ position: absolute; /* Required */ position-anchor: --tooltip; top: anchor(--tooltip -15%); left: anchor(--tooltip 110%); } } } This is exactly what we want! But it’s also where things more complicated when we try to add more tooltips to the page. Notice that both buttons want to cull the same tooltip. That’s no good. What we need is a unique ID for each tooltip. I’ll simplify the HTML so we’re looking at the right spot: \u003cdetails\u003e \u003c!-- ... --\u003e \u003c!-- Popover Target and Anchor --\u003e \u003cbutton class=\"info-tip-button\" aria-labelledby=\"experimental-label\" popovertarget=\"experimental-label\"\u003e \u003c!-- ... --\u003e \u003c/button\u003e \u003c!-- Popover and Anchor Target --\u003e \u003cdiv popover id=\"experimental-label\" class=\"info-tip-content\" role=\"tooltip\"\u003e Experimental feature \u003c/div\u003e \u003c!-- ... --\u003e \u003c/details\u003e The popover has an ID of #experimental-label. The anchor references it in the popovertarget attribute. This connects them but also connects other tooltips that are on the page. What would be ideal is to have a sequence of IDs, like: \u003c!-- Popover and Anchor Target --\u003e \u003cdiv popover id=\"experimental-label-1\" class=\"info-tip-content\" role=\"tooltip\"\u003e ... \u003c/div\u003e \u003cdiv popover id=\"experimental-label-2\" class=\"info-tip-content\" role=\"tooltip\"\u003e ... \u003c/div\u003e \u003cdiv popover id=\"experimental-label-3\" class=\"info-tip-content\" role=\"tooltip\"\u003e ... \u003c/div\u003e \u003c!-- and so on... --\u003e We can make the page query into a function that we call: function letterOutput($letter, $propertyID) { $property_query = new WP_Query(array( 'post_type' =\u003e 'page', 'post_status' =\u003e 'publish', 'posts_per_page' =\u003e -1, // Query them all! 'orderby' =\u003e 'title', 'order' =\u003e \"ASC\" )); } And when calling the function, we’ll take two arguments that are specific only to what I was working on. If you’re curious, we have a structured set of pages that go Almanac → Type → Letter → Feature (e.g., Almanac → Properties → A → accent-color). This function outputs the child pages of a “Letter” (i.e., A → accent-color, anchor-name, etc.). A child page might be an “experimental” CSS feature and we’re marking that in the UI with tooltops next to each experimental feature. We’ll put the HTML into an object that we can return when calling the function. I’ll cut it down for brevity… $html .= '\u003cdetails id=\"page\" class=\"group-item\"\u003e'; $html .= '\u003csummary\u003e'; $html .= '\u003ch2\u003e\u003ccode\u003eaccent-color\u003c/code\u003e\u003c/h2\u003e'; $html .= '\u003cspan id=\"tooltip\" class=\"tooltip\"\u003e'; $html .= '\u003cbutton class=\"info-tip-button\" aria-labelledby=\"experimental-label\" popovertarget=\"experimental-label\"\u003e '; // ... $html .= '\u003c/button\u003e'; $html .= '\u003cdiv popover id=\"experimental-label\" class=\"info-tip-content\" role=\"tooltip\"\u003e'; // ... $html .= '\u003c/div\u003e'; $html .= '\u003c/span\u003e'; $html .= '\u003c/summary\u003e'; $html .= '\u003c/details\u003e'; return $html; WordPress has some functions we can leverage for looping through this markup. For example, we can insert the_title() in place of the hardcoded post title: $html .= '\u003ch2\u003e\u003ccode\u003e' . get_the_title(); . '\u003c/code\u003e\u003c/h2\u003e'; We can also use get_the_id() to insert the unique identifier associated with the post. For example, we can use it to give each \u003cdetails\u003e element a unique ID: $html .= '\u003cdetails id=\"page-' . get_the_id(); . '\" class=\"group-item\"\u003e'; This is the secret sauce for getting the unique identifiers needed for the popovers: // Outputs something like `id=\"experimental-label-12345\"` $html .= '\u003cdiv popover id=\"experimental-label-' . get_the_id(); . '\" class=\"info-tip-content\" role=\"tooltip\"\u003e'; We can do the exact same thing on the \u003cbutton\u003e so that each button is wired to the right popover: $html .= '\u003cbutton class=\"info-tip-button\" aria-labelledby=\"experimental-label-' . get_the_id(); . '\" popovertarget=\"experimental-label\"\u003e '; We ought to do the same thing to the .tooltip element itself to distinguish one from another: $html .= '\u003cspan id=\"tooltip-' . get_the_id(); . '\" class=\"tooltip\"\u003e'; I can’t exactly recreate a WordPress instance in a CodePen demo, but here’s a simplified example with similar markup: The popovers work! Clicking either one triggers its respective popover element. The problem you may have realized is that the targets are both attached to the same anchor element — so it looks like we’re triggering the same popover when clicking either button! This is the CSS side of things. What we need is a similar way to apply unique identifiers to each anchor, but as dashed-idents instead of IDs. Something like this: /* First tooltip */ #info-tip-1 { [popovertarget] { anchor-name: --infotip-1; } [popover] { position-anchor: --infotip-1; top: anchor(--infotip-1 -15%); left: anchor(--infotip-1 100%); } } /* Second tooltip */ #info-tip-2 { [popovertarget] { anchor-name: --infotip-1; } [popover] { position-anchor: --infotip-1; top: anchor(--infotip-1 -15%); left: anchor(--infotip-1 100%); } } /* Rest of tooltips... */ This is where I feel like I had to make a compromise. I could have leveraged an @for loop in Sass to generate unique identifiers but then I’d be introducing a new dependency. I could also drop a \u003cstyle\u003e tag directly into the WordPress template and use the same functions to generate the same post identifiers but then I’m maintaining styles in PHP. I chose the latter. I like having dashed-idents that match the IDs set on the .tooltip and popover. It ain’t pretty, but it works: $html .= ' \u003cstyle\u003e #info-tip-' . get_the_id() . ' { [popovertarget] { anchor-name: --infotip-' . get_the_id() . '; } [popover] { position-anchor: --infotip-' . get_the_id() . '; top: anchor(--infotip-' . get_the_id() . ' -15%); left: anchor(--infotip-' . get_the_id() . ' 100%); } } \u003c/style\u003e' We’re technically done! The only thing I had left to do for my specific use case was add a conditional statement that outputs the tooltip only if it is marked an “Experimental Feature” in the CMS. But you get the idea. Isn’t there a better way?! Yes! But not quite yet. Bramus proposed a new ident() function that, when it becomes official, will generate a series of dashed idents that can be used to name things like the anchors I’m working with and prevent those names from colliding with one another. \u003cdiv class=\"group-list\"\u003e \u003cdetails id=\"item-1\" class=\"group-item\"\u003e...\u003c/details\u003e \u003cdetails id=\"item-2\" class=\"group-item\"\u003e...\u003c/details\u003e \u003cdetails id=\"item-3\" class=\"group-item\"\u003e...\u003c/details\u003e \u003cdetails id=\"item-4\" class=\"group-item\"\u003e...\u003c/details\u003e \u003cdetails id=\"item-5\" class=\"group-item\"\u003e...\u003c/details\u003e \u003c!-- etc. --\u003e \u003c/div\u003e /* Hypothetical example — does not work! */ .group-item { anchor-name: ident(\"--infotip-\" attr(id) \"-anchor\"); /* --infotip-item-1-anchor, --infotip-item-2-anchor, etc. */ } Let’s keep our fingers crossed for that to hit the specifications soon!",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/382234",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eI know, \u003cem\u003esuper\u003c/em\u003e niche, but it could be any loop, really. The challenge is having multiple tooltips on the same page that make use of the \u003ca href=\"https://css-tricks.com/poppin-in/\"\u003ePopover API\u003c/a\u003e for toggling goodness and \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\"\u003eCSS Anchor Positioning\u003c/a\u003e for attaching a tooltip to its respective anchor element.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere’s plenty of moving pieces when working with popovers:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eA \u003ccode\u003epopover\u003c/code\u003e needs an ID (\u003ca href=\"https://css-tricks.com/tooltip-best-practices/\"\u003eand an accessible role\u003c/a\u003e while we’re at it).\u003c/li\u003e\n\n\n\n\u003cli\u003eA \u003ccode\u003epopovertarget\u003c/code\u003e needs to reference that ID.\u003c/li\u003e\n\n\n\n\u003cli\u003eIDs have to be unique for semantics, yes, but also to hook a \u003ccode\u003epopover\u003c/code\u003e into a \u003ccode\u003epopovertarget\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThat’s just the part dealing with the Popover API. Turning to anchors:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eAn anchor needs an \u003ccode\u003eanchor-name\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eA target element needs to reference that \u003ccode\u003eanchor-name\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eEach \u003ccode\u003eanchor-name\u003c/code\u003e must be unique to attach the target to its anchor properly.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThe requirements themselves are challenging. But it’s more challenging working inside a loop because you need a way to generate unique IDs and anchor names so everything is hooked up properly without conflicting with other elements on the page. In WordPress, we query an array of page objects:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e$property_query = new WP_Query(array(\n  \u0026#39;post_type\u0026#39; =\u0026gt; \u0026#39;page\u0026#39;,\n  \u0026#39;post_status\u0026#39; =\u0026gt; \u0026#39;publish\u0026#39;,\n  \u0026#39;posts_per_page\u0026#39; =\u0026gt; -1, // Query them all!\n  \u0026#39;orderby\u0026#39; =\u0026gt; \u0026#39;title\u0026#39;,\n  \u0026#39;order\u0026#39; =\u0026gt; \u0026#34;ASC\u0026#34;\n));\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBefore we get into our \u003ccode\u003ewhile()\u003c/code\u003e statement I’d like to stub out the HTML. This is how I want a page object to look inside of its container:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;almanac-group\u0026#34;\u0026gt;\n  \u0026lt;div class=\u0026#34;group-letter\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;A\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;group-list\u0026#34;\u0026gt;\n    \u0026lt;details id=\u0026#34;\u0026#34; class=\u0026#34;group-item\u0026#34;\u0026gt;\n      \u0026lt;summary\u0026gt;\n        \u0026lt;h2\u0026gt;\u0026lt;code\u0026gt;accent-color\u0026lt;/code\u0026gt;\u0026lt;/h2\u0026gt;\n      \u0026lt;/summary\u0026gt;\n    \u0026lt;/details\u0026gt;\n\n    \u0026lt;!-- Repeat for all properties --\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\n\n\u0026lt;!-- Repeat for the entire alphabet --\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOK, let’s stub out the tooltip markup while we’re here, focusing just inside the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element since that’s what represents a single page.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details id=\u0026#34;page\u0026#34; class=\u0026#34;group-item\u0026#34;\u0026gt;\n  \u0026lt;summary\u0026gt;\n    \u0026lt;h2\u0026gt;\u0026lt;code\u0026gt;accent-color\u0026lt;/code\u0026gt;\u0026lt;/h2\u0026gt;\n\n    \u0026lt;span id=\u0026#34;tooltip\u0026#34; class=\u0026#34;tooltip\u0026#34;\u0026gt;\n      \u0026lt;!-- Popover Target and Anchor --\u0026gt;\n      \u0026lt;button class=\u0026#34;info-tip-button\u0026#34; aria-labelledby=\u0026#34;experimental-label\u0026#34; popovertarget=\u0026#34;experimental-label\u0026#34;\u0026gt;  \n        \u0026lt;!-- etc. --\u0026gt;\n      \u0026lt;/button\u0026gt;\n\n      \u0026lt;!-- Popover and Anchor Target --\u0026gt;\n      \u0026lt;div popover id=\u0026#34;experimental-label\u0026#34; class=\u0026#34;info-tip-content\u0026#34; role=\u0026#34;tooltip\u0026#34;\u0026gt;\n        Experimental feature\n      \u0026lt;/div\u0026gt;\n    \u0026lt;/span\u0026gt;\n  \u0026lt;/summary\u0026gt;\n\u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith me so far? We’ll start with the Popover side of things. Right now we have a \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e that is connected to a \u003ccode\u003e\u0026lt;div popover\u0026gt;\u003c/code\u003e. Clicking the former toggles the latter.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eStyling isn’t really what we’re talking about, but it does help to reset a few popover things so it doesn’t get that border and sit directly in the center of the page. You’ll want to \u003ca href=\"https://css-irl.info/progressively-enhanced-popover-toggletips/\" rel=\"noopener\"\u003echeck out Michelle Barker’s article\u003c/a\u003e for some great tips that make this enhance progressively.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.info-tip {\n  position: relative; /* Sets containment */\n\n  /* Bail if Anchor Positioning is not supported */\n  [popovertarget] {\n    display: none;\n  }\n\n  /* Style things up if Anchor Positioning is supported */\n  @supports (anchor-name: --infotip) {\n\n    [popovertarget] {\n      display: inline;\n      position: relative;\n    }\n\n    [popover] {\n      border: 0; /* Removes default border */\n      margin: 0; /* Resets placement */\n      position: absolute; /* Required */\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis is also the point at which you’ll want to start using Chrome because Safari and Firefox are still working on supporting the feature.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWe’re doing good! The big deal at the moment is positioning the tooltip’s content so that it is beside the button. This is where we can start working with Anchor Positioning. \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\"\u003eJuan Diego’s guide is the bee’s knees\u003c/a\u003e if you’re looking for a deep dive. The gist is that we can connect an anchor to its target element in CSS. First, we register the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e as the anchor element by giving it an \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/a/anchor-name/\"\u003eanchor-name\u003c/a\u003e\u003c/code\u003e. Then we anchor the \u003ccode\u003e\u0026lt;div popover\u0026gt;\u003c/code\u003e to the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e with \u003ccode\u003eposition-anchor\u003c/code\u003e and use the \u003ccode\u003eanchor()\u003c/code\u003e function on its inset properties to position it exactly where we want, relative to the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"13,22,23,24\"\u003e\u003ccode markup=\"tt\"\u003e.tooltip {\n  position: relative; /* Sets containment */\n\n  /* Bail if Anchor Positioning is not supported */\n  [popovertarget] {\n    display: none;\n  }\n\n  /* Style things up if Anchor Positioning is supported */\n  @supports (anchor-name: --tooltip) {\n\n    [popovertarget] {\n      anchor-name: --tooltip;\n      display: inline;\n      position: relative;\n    }\n\n    [popover] {\n      border: 0; /* Removes default border */\n      margin: 0; /* Resets placement */\n      position: absolute; /* Required */\n      position-anchor: --tooltip;\n      top: anchor(--tooltip -15%);\n      left: anchor(--tooltip 110%);\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThis is exactly what we want! But it’s also where things more complicated when we try to add more tooltips to the page. Notice that both buttons want to cull the same tooltip.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThat’s no good. What we need is a unique ID for each tooltip. I’ll simplify the HTML so we’re looking at the right spot:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details\u0026gt;\n  \u0026lt;!-- ...  --\u0026gt;\n\n    \u0026lt;!-- Popover Target and Anchor --\u0026gt;\n    \u0026lt;button class=\u0026#34;info-tip-button\u0026#34; aria-labelledby=\u0026#34;experimental-label\u0026#34; popovertarget=\u0026#34;experimental-label\u0026#34;\u0026gt;  \n      \u0026lt;!-- ... --\u0026gt;\n    \u0026lt;/button\u0026gt;\n\n    \u0026lt;!-- Popover and Anchor Target --\u0026gt;\n    \u0026lt;div popover id=\u0026#34;experimental-label\u0026#34; class=\u0026#34;info-tip-content\u0026#34; role=\u0026#34;tooltip\u0026#34;\u0026gt;\n      Experimental feature\n    \u0026lt;/div\u0026gt;\n    \n    \u0026lt;!-- ... --\u0026gt;\n\n\u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe popover has an ID of \u003ccode\u003e#experimental-label\u003c/code\u003e. The anchor references it in the \u003ccode\u003epopovertarget\u003c/code\u003e attribute. This connects them but also connects other tooltips that are on the page. What would be ideal is to have a sequence of IDs, like:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- Popover and Anchor Target --\u0026gt;\n\u0026lt;div popover id=\u0026#34;experimental-label-1\u0026#34; class=\u0026#34;info-tip-content\u0026#34; role=\u0026#34;tooltip\u0026#34;\u0026gt; ... \u0026lt;/div\u0026gt;\n\u0026lt;div popover id=\u0026#34;experimental-label-2\u0026#34; class=\u0026#34;info-tip-content\u0026#34; role=\u0026#34;tooltip\u0026#34;\u0026gt; ... \u0026lt;/div\u0026gt;\n\u0026lt;div popover id=\u0026#34;experimental-label-3\u0026#34; class=\u0026#34;info-tip-content\u0026#34; role=\u0026#34;tooltip\u0026#34;\u0026gt; ... \u0026lt;/div\u0026gt;\n\u0026lt;!-- and so on... --\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can make the page query into a function that we call:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efunction letterOutput($letter, $propertyID) {\n  $property_query = new WP_Query(array(\n    \u0026#39;post_type\u0026#39; =\u0026gt; \u0026#39;page\u0026#39;,\n    \u0026#39;post_status\u0026#39; =\u0026gt; \u0026#39;publish\u0026#39;,\n    \u0026#39;posts_per_page\u0026#39; =\u0026gt; -1, // Query them all!\n    \u0026#39;orderby\u0026#39; =\u0026gt; \u0026#39;title\u0026#39;,\n    \u0026#39;order\u0026#39; =\u0026gt; \u0026#34;ASC\u0026#34;\n  ));\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd when calling the function, we’ll take two arguments that are specific only to what I was working on. If you’re curious, we have a structured set of pages that go Almanac → Type → Letter → Feature (e.g., Almanac → Properties → A → \u003ccode\u003eaccent-color\u003c/code\u003e). This function outputs the child pages of a “Letter” (i.e., A → \u003ccode\u003eaccent-color\u003c/code\u003e, \u003ccode\u003eanchor-name\u003c/code\u003e, etc.). A child page might be an “experimental” CSS feature and we’re marking that in the UI with tooltops next to each experimental feature.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe’ll put the HTML into an object that we can return when calling the function. I’ll cut it down for brevity…\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e$html .= \u0026#39;\u0026lt;details id=\u0026#34;page\u0026#34; class=\u0026#34;group-item\u0026#34;\u0026gt;\u0026#39;;\n$html .=   \u0026#39;\u0026lt;summary\u0026gt;\u0026#39;;\n$html .=     \u0026#39;\u0026lt;h2\u0026gt;\u0026lt;code\u0026gt;accent-color\u0026lt;/code\u0026gt;\u0026lt;/h2\u0026gt;\u0026#39;;\n$html .=     \u0026#39;\u0026lt;span id=\u0026#34;tooltip\u0026#34; class=\u0026#34;tooltip\u0026#34;\u0026gt;\u0026#39;;\n$html .=       \u0026#39;\u0026lt;button class=\u0026#34;info-tip-button\u0026#34; aria-labelledby=\u0026#34;experimental-label\u0026#34; popovertarget=\u0026#34;experimental-label\u0026#34;\u0026gt;  \u0026#39;;\n// ...\n$html .=       \u0026#39;\u0026lt;/button\u0026gt;\u0026#39;;\n$html .=       \u0026#39;\u0026lt;div popover id=\u0026#34;experimental-label\u0026#34; class=\u0026#34;info-tip-content\u0026#34; role=\u0026#34;tooltip\u0026#34;\u0026gt;\u0026#39;;\n// ...\n$html .=       \u0026#39;\u0026lt;/div\u0026gt;\u0026#39;;\n$html .=     \u0026#39;\u0026lt;/span\u0026gt;\u0026#39;;\n$html .=   \u0026#39;\u0026lt;/summary\u0026gt;\u0026#39;;\n$html .= \u0026#39;\u0026lt;/details\u0026gt;\u0026#39;;\n\nreturn $html;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWordPress has some functions we can leverage for looping through this markup. For example, we can insert \u003ccode\u003ethe_title()\u003c/code\u003e in place of the hardcoded post title:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e$html .= \u0026#39;\u0026lt;h2\u0026gt;\u0026lt;code\u0026gt;\u0026#39; . get_the_title(); . \u0026#39;\u0026lt;/code\u0026gt;\u0026lt;/h2\u0026gt;\u0026#39;;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can also use \u003ccode\u003eget_the_id()\u003c/code\u003e to insert the unique identifier associated with the post. For example, we can use it to give each \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element a unique ID:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e$html .= \u0026#39;\u0026lt;details id=\u0026#34;page-\u0026#39; . get_the_id(); . \u0026#39;\u0026#34; class=\u0026#34;group-item\u0026#34;\u0026gt;\u0026#39;;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis is the secret sauce for getting the unique identifiers needed for the popovers:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e// Outputs something like `id=\u0026#34;experimental-label-12345\u0026#34;`\n$html .= \u0026#39;\u0026lt;div popover id=\u0026#34;experimental-label-\u0026#39; . get_the_id(); . \u0026#39;\u0026#34; class=\u0026#34;info-tip-content\u0026#34; role=\u0026#34;tooltip\u0026#34;\u0026gt;\u0026#39;;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can do the exact same thing on the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e so that each button is wired to the right popover:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e$html .= \u0026#39;\u0026lt;button class=\u0026#34;info-tip-button\u0026#34; aria-labelledby=\u0026#34;experimental-label-\u0026#39; . get_the_id(); . \u0026#39;\u0026#34; popovertarget=\u0026#34;experimental-label\u0026#34;\u0026gt;  \u0026#39;;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe ought to do the same thing to the \u003ccode\u003e.tooltip\u003c/code\u003e element itself to distinguish one from another:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e$html .= \u0026#39;\u0026lt;span id=\u0026#34;tooltip-\u0026#39; . get_the_id(); . \u0026#39;\u0026#34; class=\u0026#34;tooltip\u0026#34;\u0026gt;\u0026#39;;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI can’t exactly recreate a WordPress instance in a CodePen demo, but here’s a simplified example with similar markup:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThe popovers work! Clicking either one triggers its respective \u003ccode\u003epopover\u003c/code\u003e element. The problem you may have realized is that the targets are both attached to the same anchor element — so it looks like we’re triggering the same \u003ccode\u003epopover\u003c/code\u003e when clicking either button!\u003c/p\u003e\n\n\n\n\u003cp\u003eThis is the CSS side of things. What we need is a similar way to apply unique identifiers to each anchor, but as dashed-idents instead of IDs. Something like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* First tooltip */\n#info-tip-1 {\n  [popovertarget] {\n    anchor-name: --infotip-1;\n  }\n\n  [popover] {\n    position-anchor: --infotip-1;\n    top: anchor(--infotip-1 -15%);\n    left: anchor(--infotip-1 100%);\n  }\n}\n\n/* Second tooltip */\n#info-tip-2 {\n  [popovertarget] {\n    anchor-name: --infotip-1;\n  }\n\n  [popover] {\n    position-anchor: --infotip-1;\n    top: anchor(--infotip-1 -15%);\n    left: anchor(--infotip-1 100%);\n  }\n}\n\n/* Rest of tooltips... */\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis is where I feel like I had to make a compromise. I could have leveraged an \u003ccode\u003e@for\u003c/code\u003e loop in Sass to generate unique identifiers but then I’d be introducing a new dependency. I could also drop a \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag directly into the WordPress template and use the same functions to generate the same post identifiers but then I’m maintaining styles in PHP.\u003c/p\u003e\n\n\n\n\u003cp\u003eI chose the latter. I like having dashed-idents that match the IDs set on the \u003ccode\u003e.tooltip\u003c/code\u003e and \u003ccode\u003epopover\u003c/code\u003e. It ain’t pretty, but it works:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e$html .= \u0026#39;\n\u0026lt;style\u0026gt;\n  #info-tip-\u0026#39; . get_the_id() . \u0026#39; {\n    [popovertarget] {\n      anchor-name: --infotip-\u0026#39; . get_the_id() . \u0026#39;;\n    }\n\n    [popover] {\n      position-anchor: --infotip-\u0026#39; . get_the_id() . \u0026#39;;\n      top: anchor(--infotip-\u0026#39; . get_the_id() . \u0026#39; -15%);\n      left: anchor(--infotip-\u0026#39; . get_the_id() . \u0026#39; 100%);\n    }\n  }\n\u0026lt;/style\u0026gt;\u0026#39;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe’re technically done!\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThe only thing I had left to do for my specific use case was add a conditional statement that outputs the tooltip only if it is marked an “Experimental Feature” in the CMS. But you get the idea.\u003c/p\u003e\n\n\n\u003ch3 id=\"isnt-there-a-better-way\"\u003eIsn’t there a better way?!\u003c/h3\u003e\n\n\n\u003cp\u003eYes! But not quite yet. \u003ca href=\"https://www.bram.us/2024/12/18/the-future-of-css-construct-custom-idents-and-dashed-idents-with-ident/\" rel=\"noopener\"\u003eBramus proposed a new \u003ccode\u003eident()\u003c/code\u003e function\u003c/a\u003e that, when it becomes official, will generate a series of dashed idents that can be used to name things like the anchors I’m working with and prevent those names from colliding with one another.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;group-list\u0026#34;\u0026gt;\n  \u0026lt;details id=\u0026#34;item-1\u0026#34; class=\u0026#34;group-item\u0026#34;\u0026gt;...\u0026lt;/details\u0026gt;\n  \u0026lt;details id=\u0026#34;item-2\u0026#34; class=\u0026#34;group-item\u0026#34;\u0026gt;...\u0026lt;/details\u0026gt;\n  \u0026lt;details id=\u0026#34;item-3\u0026#34; class=\u0026#34;group-item\u0026#34;\u0026gt;...\u0026lt;/details\u0026gt;\n  \u0026lt;details id=\u0026#34;item-4\u0026#34; class=\u0026#34;group-item\u0026#34;\u0026gt;...\u0026lt;/details\u0026gt;\n  \u0026lt;details id=\u0026#34;item-5\u0026#34; class=\u0026#34;group-item\u0026#34;\u0026gt;...\u0026lt;/details\u0026gt;\n  \u0026lt;!-- etc. --\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Hypothetical example — does not work! */\n.group-item { \n  anchor-name: ident(\u0026#34;--infotip-\u0026#34; attr(id) \u0026#34;-anchor\u0026#34;);\n  /* --infotip-item-1-anchor, --infotip-item-2-anchor, etc. */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eLet’s keep our fingers crossed for that to hit the specifications soon!\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2025-02-19T06:55:31-07:00",
  "modifiedTime": "2025-02-19T06:55:33-07:00"
}
