{
  "id": "0fec5383-a1b3-43bd-865a-6e5a9dc5275e",
  "title": "What I Wish Someone Told Me When I Was Getting Into ARIA",
  "link": "https://smashingmagazine.com/2025/06/what-i-wish-someone-told-me-aria/",
  "description": "[Accessible Rich Internet Applications (ARIA)](https://www.w3.org/WAI/standards-guidelines/aria/) is an inevitability when working on web accessibility. That said, it’s everyone’s first time learning about ARIA at some point.",
  "author": "Eric Bailey",
  "published": "Mon, 16 Jun 2025 13:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 43926,
  "excerpt": "[Accessible Rich Internet Applications (ARIA)](https://www.w3.org/WAI/standards-guidelines/aria/) is an inevitability when working on web accessibility. That said, it’s everyone’s first time learning about ARIA at some point.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "34 min readAccessibility, Coding, GuidesAccessible Rich Internet Applications (ARIA) is an inevitability when working on web accessibility. That said, it’s everyone’s first time learning about ARIA at some point.If you haven’t encountered ARIA before, great! It’s a chance to learn something new and exciting. If you have heard of ARIA before, this might help you better understand it or maybe even teach you something new!These are all things I wish someone had told me when I was getting started on my web accessibility journey. This post will:Provide a mindset for how to approach ARIA as a concept,Debunk some common misconceptions, andProvide some guiding thoughts to help you better understand and work with it.It is my hope that in doing so, this post will help make an oft-overlooked yet vital corner of web design and development easier to approach.What This Post Is NotThis is not a recipe book for how to use ARIA to build accessible websites and web apps. It is also not a guide for how to remediate an inaccessible experience. A lot of accessibility work is highly contextual. I do not know the specific needs of your project or organization, so trying to give advice here could easily do more harm than good.Instead, think of this post as a “know before you go” guide. I’m hoping to give you a good headspace to approach ARIA, as well as highlight things to watch out for when you undertake your journey. So, with that out of the way, let’s dive in!So, What Is ARIA?ARIA is what you turn to if there is not a native HTML element or attribute that is better suited for the job of communicating interactivity, purpose, and state.Think of it like a spice that you sprinkle into your markup to enhance things.Adding ARIA to your HTML markup is a way of providing additional information to a website or web app for screen readers and voice control software.Interactivity means the content can be activated or manipulated. An example of this is navigating to a link’s destination.Purpose means what something is used for. An example of this is a text input used to collect someone’s name.State means the current status content has been placed in and controlled by states, properties, and values. An example of this is an accordion panel ​​that can either be expanded or collapsed.Here is an illustration to help communicate what I mean by this:(Large preview)The presence of HTML’s button element will instruct assistive technology to report it as a button, letting someone know that it can be activated to perform a predefined action.The presence of the text string “Mute” will be reported by assistive technology to clue the person into what the button is used for.The presence of aria-pressed=\"true\" means that someone or something has previously activated the button, and it is now in a “pushed in” state that sustains its action.This overall pattern will let people who use assistive technology know:If something is interactive,What kind of interactive behavior it performs, andIts current state.ARIA’s HistoryARIA has been around for a long time, with the first version published on September 26th, 2006.(Large preview)ARIA was created to provide a bridge between the limitations of HTML and the need for making interactive experiences understandable by assistive technology.The latest version of ARIA is version 1.2, published on June 6th, 2023. Version 1.3 is slated to be released relatively soon, and you can read more about it in this excellent article by Craig Abbott.You may also see it referred to as WAI-ARIA, where WAI stands for “Web Accessibility Initiative.” The WAI is part of the W3C, the organization that sets standards for the web. That said, most accessibility practitioners I know call it “ARIA” in written and verbal communication and leave out the “WAI-” part.The Spirit Of ARIA Reflects The Era In Which It Was CreatedThe reason for this is simple: The web was a lot less mature in the past than it is now. The most popular operating system in 2006 was Windows XP. The iPhone didn’t exist yet; it was released a year later.From a very high level, ARIA is a snapshot of the operating system interaction paradigms of this time period. This is because ARIA recreates them.Image source: The Microsoft Windows XP Wiki. (Large preview)The MindsetSmartphones with features like tappable, swipeable, and draggable surfaces were far less commonplace. Single Page Application “web app” experiences were also rare, with Ajax-based approaches being the most popular. This means that we have to build the experiences of today using the technology of 2006. In a way, this is a good thing. It forces us to take new and novel experiences and interrogate them.Interactions that cannot be broken down into smaller, more focused pieces that map to ARIA patterns are most likely inaccessible. This is because they won’t be able to be operated by assistive technology or function on older or less popular devices.I may be biased, but I also think these sorts of novel interactions that can’t translate also serve as a warning that a general audience will find them to be confusing and, therefore, unusable. This belief is important to consider given that the internet serves:An unknown number of people,Using an unknown number of devices,Each with an unknown amount of personal customizations,Who have their own unique needs and circumstances andHave unknown motivational factors.Interaction ExpectationsContemporary expectations for keyboard-based interaction for web content — checkboxes, radios, modals, accordions, and so on — are sourced from Windows XP and its predecessor operating systems. These interaction models are carried forward as muscle memory for older people who use assistive technology. Younger people who rely on assistive technology also learn these de facto standards, thus continuing the cycle.What does this mean for you? Someone using a keyboard to interact with your website or web app will most likely try these Windows OS-based keyboard shortcuts first. This means things like pressing:Enter to navigate to a link’s destination,Space to activate buttons,Home and End to jump to the start or end of a list of items, and so on.It’s Also A Living DocumentThis is not to say that ARIA has stagnated. It is constantly being worked on with new additions, removals, and clarifications. Remember, it is now at version 1.2, with version 1.3 arriving soon.In parallel, HTML as a language also reflects this evolution. Elements were originally created to support a document-oriented web and have been gradually evolving to support more dynamic, app-like experiences. The great bit here is that this is all conducted in the open and is something you can contribute to if you feel motivated to do so.ARIA Has Rules For Using ItThere are five rules included in ARIA’s documentation to help steer how you approach it:Use a native element whenever possible.An example would be using an anchor element (\u003ca\u003e) for a link rather than a div with a click handler and a role of link.Don’t adjust a native element’s semantics if at all possible.An example would be trying to use a heading element as a tab rather than wrapping the heading in a semantically neutral div.Anything interactive has to be keyboard operable.If you can’t use it with a keyboard, it isn’t accessible. Full stop.Do not use role=\"presentation\" or aria-hidden=\"true\" on a focusable element.This makes something intended to be interactive unable to be used by assistive technology.Interactive elements must be named.An example of this is using the text string “Print” for a button element.Observing these five rules will do a lot to help you out. The following is more context to provide even more support.ARIA Has A TaxonomyThere is a structured grammar to ARIA, and it is centered around roles, as well as states and properties.RolesA Role is what assistive technology reads and then announces. A lot of people refer to this in shorthand as semantics. HTML elements have implied roles, which is why an anchor element will be announced as a link by screen readers with no additional work.(Large preview)Implied roles are almost always better to use if the use case calls for them. Recall the first rule of ARIA here. This is usually what digital accessibility practitioners refer to when they say, “Just use semantic HTML.”There are many reasons for favoring implied roles. The main consideration is better guarantees of support across an unknown number of operating systems, browsers, and assistive technology combinations.Roles have categories, each with its own purpose. The Abstract role category is notable in that it is an organizing supercategory not intended to be used by authors:Abstract roles are used for the ontology. Authors MUST NOT use abstract roles in content.\u003c!-- This won't work, don't do it --\u003e \u003ch2 role=\"sectionhead\"\u003e Anatomy and physiology \u003c/h2\u003e \u003c!-- Do this instead --\u003e \u003csection aria-labeledby=\"anatomy-and-physiology\"\u003e \u003ch2 id=\"anatomy-and-physiology\"\u003e Anatomy and physiology \u003c/h2\u003e \u003c/section\u003e Additionally, in the same way, you can only declare ARIA on certain things, you can only declare some ARIA as children of other ARIA declarations. An example of this is the the listitem role, which requires a role of list to be present on its parent element.So, what’s the best way to determine if a role requires a parent declaration? The answer is to review the official definition.States And PropertiesStates and properties are the other two main parts of ARIA‘s overall taxonomy.Implicit roles are provided by semantic HTML, and explicit roles are provided by ARIA. Both describe what an element is. States describe that element’s characteristics in a way that assistive technology can understand. This is done via property declarations and their companion values.(Large preview)ARIA states can change quickly or slowly, both as a result of human interaction as well as application state. When the state is changed as a result of human interaction, it is considered an “unmanaged state.” Here, a developer must supply the underlying JavaScript logic to control the interaction.When the state changes as a result of the application (e.g., operating system, web browser, and so on), this is considered “managed state.” Here, the application automatically supplies the underlying logic.How To Declare ARIAThink of ARIA as an extension of HTML attributes, a suite of name/value pairs. Some values are predefined, while others are author-supplied:(Large preview)For the examples in the previous graphic, the polite value for aria-live is one of the three predefined values (off, polite, and assertive). For aria-label, “Save” is a text string manually supplied by the author.You declare ARIA on HTML elements the same way you declare other attributes:\u003c!-- Applies an id value of \"carrot\" to the div --\u003e \u003cdiv id=\"carrot\"\u003e\u003c/div\u003e \u003c!-- Hides the content of this paragraph element from assistive technology --\u003e \u003cp aria-hidden=\"true\"\u003e Assistive technology can't read this \u003c/p\u003e \u003c!-- Provides an accessible name of \"Stop\", and also communicates that the button is currently pressed. A type property with a value of \"button\" prevents browser form submission. --\u003e \u003cbutton aria-label=\"Stop\" aria-pressed=\"true\" type=\"button\"\u003e \u003c!-- SVG icon --\u003e \u003c/button\u003e Other usage notes:You can place more than one ARIA declaration on an HTML element.The order of placement of ARIA when declared on an HTML element does not matter.There is no limit to how many ARIA declarations can be placed on an element. Be aware that the more you add, the more complexity you introduce, and more complexity means a larger chance things may break or not function as expected.You can declare ARIA on an HTML element and also have other non-ARIA declarations, such as class or id. The order of declarations does not matter here, either.It might also be helpful to know that boolean attributes are treated a little differently in ARIA when compared to HTML. Hidde de Vries writes about this in his post, “Boolean attributes in HTML and ARIA: what’s the difference?”.Not A Whole Lot Of ARIA Is “Hardcoded”In this context, “hardcoding” means directly writing a static attribute or value declaration into your component, view, or page.A lot of ARIA is designed to be applied or conditionally modified dynamically based on application state or as a response to someone’s action. An example of this is a show-and-hide disclosure pattern:ARIA’s aria-expanded attribute is toggled from false to true to communicate if the disclosure is in an expanded or collapsed state.HTML’s hidden attribute is conditionally removed or added in tandem to show or hide the disclosure’s full content area.\u003cdiv class=\"disclosure-container\"\u003e \u003cbutton aria-expanded=\"false\" class=\"disclosure-toggle\" type=\"button\"\u003e How we protect your personal information \u003c/button\u003e \u003cdiv hidden class=\"disclosure-content\"\u003e \u003cul\u003e \u003cli\u003eFast, accurate, thorough and non-stop protection from cyber attacks\u003c/li\u003e \u003cli\u003ePatching practices that address vulnerabilities that attackers try to exploit\u003c/li\u003e \u003cli\u003eData loss prevention practices help to ensure data doesn't fall into the wrong hands\u003c/li\u003e \u003cli\u003eSupply risk management practices help ensure our suppliers adhere to our expectations\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e \u003ca href=\"/security/\"\u003eLearn more about our security best practices\u003c/a\u003e. \u003c/p\u003e \u003c/div\u003e \u003c/div\u003e A common example of a hardcoded ARIA declaration you’ll encounter on the web is making an SVG icon inside a button decorative:\u003cbutton type=\"button\u003e \u003csvg aria-hidden=\"true\"\u003e \u003c!-- SVG code --\u003e \u003c/svg\u003e Save \u003c/button\u003e Here, the string “Save” is what is required for someone to understand what the button will do when they activate it. The accompanying icon helps that understanding visually but is considered redundant and therefore decorative.An implied role is all you need if you’re using semantic HTML. Explicitly declaring its role via ARIA does not confer any additional advantages.\u003c!-- You don't need to declare role=\"button\" here. Using the \u003cbutton\u003e element will make assistive technology announce it as a button. The role=\"button\" declaration is redundant. --\u003e \u003cbutton role=\"button\"\u003e Save \u003c/button\u003e You might occasionally run into these redundant declarations on HTML sectioning elements, such as \u003cmain role=\"main\"\u003e, or \u003cfooter role=\"contentinfo\"\u003e. This isn’t needed anymore, and you can just use the \u003cmain\u003e or \u003cfooter\u003e elements.The reason for this is historic. These declarations were done for support reasons, in that it was a stop-gap technique for assistive technology that needed to be updated to support these new-at-the-time HTML elements.Contemporary assistive technology does not need these redundant declarations. Think of it the same way that we don’t have to use vendor prefixes for the CSS border-radius property anymore.Note: There is an exception to this guidance. There are circumstances where certain complex and complicated markup patterns don’t work as expected for assistive technology. In these cases, we want to hardcode the implicit role as explicit ARIA to ensure it works. This assistive technology support concern is covered in more detail later in this post.You Don’t Need To Say What A Control Is; That Is What Roles Are ForBoth implicit and explicit roles are announced by screen readers. You don’t need to include that part for things like the interactive element’s text string or an aria-label.\u003c!-- Don't do this --\u003e \u003cbutton aria-label=\"Save button\" type=\"button\"\u003e \u003c!-- Icon SVG --\u003e \u003c/button\u003e \u003c!-- Do this instead --\u003e \u003cbutton aria-label=\"Save\" type=\"button\"\u003e \u003c!-- Icon SVG --\u003e \u003c/button\u003e Had we used the string value of “Save button” for our Save button, a screen reader would announce it along the lines of, “Save button, button.” That’s redundant and confusing.ARIA Roles Have Very Specific MeaningsWe sometimes refer to website and web app navigation colloquially as menus, especially if it’s an e-commerce-style mega menu.In ARIA, menus mean something very specific. Don’t think of global or in-page navigation or the like. Think of menus in this context as what appears when you click the Edit menu button on your application’s menubar.Notepad, Windows 11. (Large preview)Using a role improperly because its name seems like an appropriate fit at first glance creates confusion for people who do not have the context of the visual UI. Their expectations will be set with the announcement of the role, then subverted when it does not act the way it is supposed to.Imagine if you click on a link, and instead of taking you to another webpage, it sends something completely unrelated to your printer instead. It’s sort of like that.Declaring role=\"menu\" is a common example of a misapplied role, but there are others. The best way to know what a role is used for? Go straight to the source and read up on it.Certain Roles Are Forbidden From Having Accessible NamesThese roles are caption, code, deletion, emphasis, generic, insertion, paragraph, presentation, strong, subscript, and superscript.This means you can try and provide an accessible name for one of these elements — say via aria-label — but it won’t work because it’s disallowed by the rules of ARIA’s grammar.\u003c!-- This won't work--\u003e \u003cstrong aria-label=\"A 35% discount!\"\u003e $39.95 \u003c/strong\u003e \u003c!-- Neither will this --\u003e \u003ccode title=\"let JavaScript example\"\u003e let submitButton = document.querySelector('button[type=\"submit\"]'); \u003c/code\u003e For these examples, recall that the role is implicit, sourced from the declared HTML element.Note here that sometimes a browser will make an attempt regardless and overwrite the author-specified string value. This overriding is a confusing act for all involved, which led to the rule being established in the first place.You Can’t Make Up ARIA And Expect It To WorkI’ve witnessed some developers guess-adding CSS classes, such as .background-red or .text-white, to their markup and being rewarded if the design visually updates correctly.The reason this works is that someone previously added those classes to the project. With ARIA, the people who add the content we can use are the Accessible Rich Internet Applications Working Group. This means each new version of ARIA has a predefined set of properties and values. Assistive technology is then updated to parse those attributes and values, although this isn’t always a guarantee.Declaring ARIA, which isn’t part of that predefined set, means assistive technology won’t know what it is and consequently won’t announce it.\u003c!-- There is no \"selectpanel\" role in ARIA. Because of this, this code will be announced as a button and not as a select panel. --\u003e \u003cbutton role=\"selectpanel\" type=\"button\"\u003e Choose resources \u003c/button\u003e ARIA Fails SilentlyThis speaks to the previous section, where ARIA won’t understand words spoken to it that exist outside its limited vocabulary.There are no console errors for malformed ARIA. There’s also no alert dialog, beeping sound, or flashing light for your operating system, browser, or assistive technology. This fact is yet another reason why it is so important to test with actual assistive technology.You don’t have to be an expert here, either. There is a good chance your code needs updating if you set something to announce as a specific state and assistive technology in its default configuration does not announce that state.ARIA Only Exposes The Presence Of Something To Assistive TechnologyApplying ARIA to something does not automatically “unlock” capabilities. It only sends a hint to assistive technology about how the interactive content should behave.For assistive technology like screen readers, that hint could be for how to announce something. For assistive technology like refreshable Braille displays, it could be for how it raises and lowers its pins. For example, declaring role=\"button\" on a div element does not automatically make it clickable. You will still need to:Target the div element in JavaScript,Tie it to a click event,Author the interactive logic that it performs when clicked, and thenAccommodate all the other expected behaviors.This all makes me wonder why you can’t save yourself some work and use a button element in the first place, but that is a different story for a different day.Additionally, adjusting an element’s role via ARIA does not modify the element’s native functionality. For example, you can declare role=\"image\" on a div element. However, attempting to declare the alt or src attributes on the div won’t work. This is because alt and src are not supported attributes for div.(Large preview)Declaring an ARIA Role On Something Will Override Its Semantics, But Not Its BehaviorThis speaks to the previous section on ARIA only exposing something’s presence. Don’t forget that certain HTML elements have primary and secondary interactive capabilities built into them.For example, an anchor element’s primary capability is navigating to whatever URL value is provided for its href attribute. Secondary capabilities for an anchor element include copying the URL value, opening it in a new tab or incognito window, and so on.Chrome on macOS. Note the support for user-installed browser extensions. (Large preview)These secondary capabilities are still preserved. However, it may not be apparent to someone that they can use them — or use them in the way that they’d expect — depending on what is announced.The opposite is also true. When an element has no capabilities, having its role adjusted does not grant it any new abilities. Remember, ARIA only announces. This is why that div with a role of button assigned to it won’t do anything when clicked if no companion JavaScript logic is also present.(Large preview)You Will Need To Declare ARIA To Make Certain Interactions AccessibleA lot of the previous content may make it seem like ARIA is something you should avoid using altogether. This isn’t true. Know that this guidance is written to help steer you to situations where HTML does not offer the capability to describe an interaction out of the box. This space is where you want to use ARIA.Knowing how to identify this area requires spending some time learning what HTML elements there are, as well as what they are and are not used for. I quite like HTML5 Doctor’s Element Index for upskilling on this.Certain ARIA States Require Certain ARIA Roles To Be PresentThis is analogous to how HTML has both global attributes and attributes that can only be used on a per-element basis. For example, aria-describedby can be used on any HTML element or role. However, aria-posinset can only be used with article, comment, listitem, menuitem, option, radio, row, and tab roles. Remember here that these roles can be provided by either HTML or ARIA.Learning what states require which roles can be achieved by reading the official reference. Check for the “Used in Roles” portion of each entry’s characteristics:Characteristics for aria-setsize. (Large preview)Automated code scanners — like axe, WAVE, ARC Toolkit, Pa11y, equal-access, and so on — can catch this sort of thing if they are written in error. I’m a big fan of implementing these sorts of checks as part of a continuous integration strategy, as it makes it a code quality concern shared across the whole team.ARIA Is More Than Web BrowsersSpeaking of technology that listens, it is helpful to know that the ARIA you declare instructs the browser to speak to the operating system the browser is installed on. Assistive technology then listens to what the operating system reports. It then communicates that to the person using the computer, tablet, smartphone, and so on.(Large preview)A person can then instruct assistive technology to request the operating system to take action on the web content displayed in the browser.(Large preview)This interaction model is by design. It is done to make interaction from assistive technology indistinguishable from interaction performed without assistive technology.There are a few reasons for this approach. The most important one is it helps preserve the privacy and autonomy of the people who rely on assistive technologies.Just Because It Exists In The ARIA Spec Does Not Mean Assistive Technology Will Support ItThis support issue was touched on earlier and is a difficult fact to come to terms with.Contemporary developers enjoy the hard-fought, hard-won benefits of the web standards movement. This means you can declare HTML and know that it will work with every major browser out there. ARIA does not have this. Each assistive technology vendor has its own interpretation of the ARIA specification. Oftentimes, these interpretations are convergent. Sometimes, they’re not.Assistive technology vendors also have support roadmaps for their products. Some assistive technology vendors:Will eventually add support,May never, and someMight do so in a way that contradicts how other vendors choose to implement things.There is also the operating system layer to contend with, which I’ll cover in more detail in a little bit. Here, the mechanisms used to communicate with assistive technology are dusty, oft-neglected areas of software development.With these layers comes a scenario where the assistive technology can support the ARIA declared, but the operating system itself cannot communicate the ARIA’s presence, or vice-versa. The reasons for this are varied but ultimately boil down to a historic lack of support, prioritization, and resources. However, I am optimistic that this is changing.Additionally, there is no equivalent to Caniuse, Baseline, or Web Platform Status for assistive technology. The closest analog we have to support checking resources is a11ysupport.io, but know that it is the painstaking work of a single individual. Its content may not be up-to-date, as the work is both Herculean in its scale and Sisyphean in its scope. Because of this, I must re-stress the importance of manually testing with assistive technology to determine if the ARIA you use works as intended.How To Determine ARIA SupportThere are three main layers to determine if something is supported:Operating system and version.Assistive technology and version,Browser and browser version.1. Operating System And VersionEach operating system (e.g., Windows, macOS, Linux) has its own way of communicating what content is present to assistive technology. Each piece of assistive technology has to accommodate how to parse that communication.Some assistive technology is incompatible with certain operating systems. An example of this is not being able to use VoiceOver with Windows, or JAWS with macOS. Furthermore, each version of each operating system has slight variations in what is reported and how. Sometimes, the operating system needs to be updated to “teach” it the updated AIRA vocabulary. Also, do not forget that things like bugs and regressions can occur.2. Assistive Technology And VersionThere is no “one true way” to make assistive technology. Each one is built to address different access needs and wants and is done so in an opinionated way — think how different web browsers have different features and UI.Each piece of assistive technology that consumes web content has its own way of communicating this information, and this is by design. It works with what the operating system reports, filtered through things like heuristics and preferences.The “Show names” command in macOS Voice Control, which displays the accessible names of these icon buttons. The accessible name has been supplied by aria-label. (Large preview)Like operating systems, assistive technology also has different versions with what each version is capable of supporting. They can also be susceptible to bugs and regressions.Another two factors worth pointing out here are upgrade hesitancy and lack of financial resources. Some people who rely on assistive technology are hesitant to upgrade it. This is based on a very understandable fear of breaking an important mechanism they use to interact with the world. This, in turn, translates to scenarios like holding off on updates until absolutely necessary, as well as disabling auto-updating functionality altogether.Lack of financial resources is sometimes referred to as the disability or crip tax. Employment rates tend to be lower for disabled populations, and with that comes less money to spend on acquiring new technology and updating it. This concern can and does apply to operating systems, browsers, and assistive technology.3. Browser And Browser VersionSome assistive technology works better with one browser compared to another. This is due to the underlying mechanics of how the browser reports its content to assistive technology. Using Firefox with NVDA is an example of this.Additionally, the support for this reporting sometimes only gets added for newer versions. Unfortunately, it also means support can sometimes accidentally regress, and people don’t notice before releasing the browser update — again, this is due to a historic lack of resources and prioritization.The Less Commonly-Used The ARIA You Declare, The Greater The Chance You’ll Need To Test ItCommon ARIA declarations you’ll come across include, but are not limited to:aria-label,aria-labelledby,aria-describedby,aria-hidden,aria-live.These are more common because they’re more supported. They are more supported because many of these declarations have been around for a while. Recall the previous section that discussed actual assistive technology support compared to what the ARIA specification supplies.Newer, more esoteric ARIA, or historically deprioritized declarations, may not have that support yet or may never. An example of how complicated this can get is aria-controls.aria-controls is a part of ARIA that has been around for a while. JAWS had support for aria-controls, but then removed it after user feedback. Meanwhile, every other screen reader I’m aware of never bothered to add support.What does that mean for us? Determining support, or lack thereof, is best accomplished by manual testing with assistive technology.The More ARIA You Add To Something, The Greater The Chance Something Will Behave UnexpectedlyThis fact takes into consideration the complexities in preferences, different levels of support, bugs, regressions, and other concerns that come with ARIA’s usage.Philosophically, it’s a lot like adding more interactive complexity to your website or web app via JavaScript. The larger the surface area your code covers, the bigger the chance something unintended happens.Consider the amount of ARIA added to a component or discrete part of your experience. The more of it there is declared nested into the Document Object Model (DOM), the more it interacts with parent ARIA declarations. This is because assistive technology reads what the DOM exposes to help determine intent.A lot of contemporary development efforts are isolated, feature-based work that focuses on one small portion of the overall experience. Because of this, they may not take this holistic nesting situation into account. This is another reason why — you guessed it — manual testing is so important.Anecdotally, WebAIM’s annual Millions report — an accessibility evaluation of the top 1,000,000 websites — touches on this phenomenon:Increased ARIA usage on pages was associated with higher detected errors. The more ARIA attributes that were present, the more detected accessibility errors could be expected. This does not necessarily mean that ARIA introduced these errors (these pages are more complex), but pages typically had significantly more errors when ARIA was present.Assistive Technology May Support Your Invalid ARIA DeclarationThere is a chance that ARIA, which is authored inaccurately, will actually function as intended with assistive technology. While I do not recommend betting on this fact to do your work, I do think it is worth mentioning when it comes to things like debugging.This is due to the wide range of familiarity there is with people who author ARIA.Some of the more mature assistive technology vendors try to accommodate the lower end of this familiarity. This is done in order to better enable the people who use their software to actually get what they need.There isn’t an exhaustive list of what accommodations each piece of assistive technology has. Think of it like the forgiving nature of a browser’s HTML parser, where the ultimate goal is to render content for humans.aria-label Is Trickyaria-label is one of the most common ARIA declarations you’ll run across. It’s also one of the most misused.aria-label can’t be applied to non-interactive HTML elements, but oftentimes is. It can’t always be translated and is oftentimes overlooked for localization efforts. Additionally, it can make things frustrating to operate for people who use voice control software, where the visible label differs from what the underlying code uses.Another problem is when it overrides an interactive element’s pre-existing accessible name. For example:\u003c!-- Don't do this --\u003e \u003ca aria-label=\"Our services\" href=\"/services/\"\u003e Services \u003c/a\u003e This is a violation of WCAG Success Criterion 2.5.3: Label in Name, pure and simple. I have also seen it used as a way to provide a control hint. This is also a WCAG failure, in addition to being an antipattern:\u003c!-- Also don't do this --\u003e \u003ca aria-label=\"Click this link to learn more about our unique and valuable services\" href=\"/services/\"\u003e Services \u003c/a\u003e These factors — along with other considerations — are why I consider aria-label a code smell.aria-live Is Even TrickierLive region announcements are powered by aria-live and are an important part of communicating updates to an experience to people who use screen readers.Believe me when I say that getting aria-live to work properly is tricky, even under the best of scenarios. I won’t belabor the specifics here. Instead, I’ll point you to “Why are my live regions not working?”, a fantastic and comprehensive article published by TetraLogical.The ARIA Authoring Practices Guide Can Lead You AstrayAlso referred to as the APG, the ARIA Authoring Practices Guide should be treated with a decent amount of caution.(Large preview)The DownsidesThe guide was originally authored to help demonstrate ARIA’s capabilities. As a result, its code examples near-exclusively, overwhelmingly, and disproportionately favor ARIA.Unfortunately, the APG’s latest redesign also makes it far more approachable-looking than its surrounding W3C documentation. This is coupled with demonstrating UI patterns in a way that signals it’s a self-serve resource whose code can be used out of the box.These factors create a scenario where people assume everything can be used as presented. This is not true.Recall that just because ARIA is listed in the spec does not necessarily guarantee it is supported. Adrian Roselli writes about this in detail in his post, “No, APG’s Support Charts Are Not ‘Can I Use’ for ARIA”.Also, remember the first rule of ARIA and know that an ARIA-first approach is counter to the specification’s core philosophy of use.In my experience, this has led to developers assuming they can copy-paste code examples or reference how it’s structured in their own efforts, and everything will just work. This leads to mass frustration:Digital accessibility practitioners have to explain that “doing the right thing” isn’t going to work as intended.Developers then have to revisit their work to update it.Most importantly, people who rely on assistive technology risk not being able to use something.This is to say nothing about things like timelines and resourcing, working relationships, reputation, and brand perception.The UpsideThe APG’s main strength is highlighting what keyboard keypresses people will expect to work on each pattern.Consider the listbox pattern. It details keypresses you may expect (arrow keys, Space, and Enter), as well as less-common ones (typeahead selection and making multiple selections). Here, we need to remember that ARIA is based on the Windows XP era. The keyboard-based interaction the APG suggests is built from the muscle memory established from the UI patterns used on this operating system.While your tree view component may look visually different from the one on your operating system, people will expect it to be keyboard operable in the same way. Honoring this expectation will go a long way to ensuring your experiences are not only accessible but also intuitive and efficient to use.Another strength of the APG is giving standardized, centralized names to UI patterns. Is it a dropdown? A listbox? A combobox? A select menu? Something else?When it comes to digital accessibility, these terms all have specific meanings, as well as expectations that come with them. Having a common vocabulary when discussing how an experience should work goes a long way to ensuring everyone will be on the same page when it comes time to make and maintain things.macOS VoiceOver Can Also Lead You AstrayVoiceOver on macOS has been experiencing a lot of problems over the last few years. If I could wager a guess as to why this is, as an outsider, it is that Apple’s priorities are focused elsewhere.The bulk of web development efforts are conducted on macOS. This means that well-intentioned developers will reach for VoiceOver, as it comes bundled with macOS and is therefore more convenient. However, macOS VoiceOver usage has a drastic minority share for desktops and laptops. It is under 10% of usage, with Windows-based JAWS and NVDA occupying a combined 78.2% majority share:Image source: WebAIM Screen Reader User Survey #10. (Large preview)The ProblemThe sad, sorry truth of the matter is that macOS VoiceOver, in its current state, has a lot of problems. It should only be used to confirm that it can operate the experience the way Windows-based screen readers can.This means testing on Windows with NVDA or JAWS will create an experience that is far more accurate to what most people who use screen readers on a laptop or desktop will experience.Dealing With The ProblemBecause of this situation, I heavily encourage a workflow that involves:Creating an experience’s underlying markup,Testing it with NVDA or JAWS to set up baseline expectations,Testing it with macOS VoiceOver to identify what doesn’t work as expected.Most of the time, I find myself having to declare redundant ARIA on the semantic HTML I write in order to address missed expected announcements for macOS VoiceOver.macOS VoiceOver testing is still important to do, as it is not the fault of the person who uses macOS VoiceOver to get what they need, and we should ensure they can still have access.You can use apps like VirtualBox and Windows evaluation Virtual Machines to use Windows in your macOS development environment. Services like AssistivLabs also make on-demand, preconfigured testing easy.What About iOS VoiceOver?Despite sharing the same name, VoiceOver on iOS is a completely different animal. As software, it is separate from its desktop equivalent and also enjoys a whopping 70.6% usage share.With this knowledge, know that it’s also important to test the ARIA you write on mobile to make sure it works as intended.You Can Style ARIAARIA attributes can be targeted via CSS the way other HTML attributes can. Consider this HTML markup for the main navigation portion of a small e-commerce site:\u003cnav aria-label=\"Main\"\u003e \u003cul\u003e \u003cli\u003e \u003ca href=\"/home/\"\u003eHome\u003c/a\u003e \u003ca href=\"/products/\"\u003eProducts\u003c/a\u003e \u003ca aria-current=\"true\" href=\"/about-us/\"\u003eAbout Us\u003c/a\u003e \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/nav\u003e The presence of aria-current=\"true\" on the “About Us” link will tell assistive technology to announce that it is the current part of the site someone is on if they are navigating through the main site navigation.We can also tie that indicator of being the current part of the site into something that is shown visually. Here’s how you can target the attribute in CSS:nav[aria-label=\"Main\"] [aria-current=\"true\"] { border-bottom: 2px solid #ffffff; } This is an incredibly powerful way to tie application state to user-facing state. Combine it with modern CSS like :has() and view transitions and you have the ability to create robust, sophisticated UI with less reliance on JavaScript.You Can Also Use ARIA When Writing UI TestsTests are great. They help guarantee that the code you work on will continue to do what you intended it to do.A lot of web UI-based testing will use the presence of classes (e.g., .is-expanded) or data attributes (ex, data-expanded) to verify a UI’s existence, position and states. These types of selectors also have a far greater likelihood to be changed as time goes on when compared to semantic code and ARIA declarations.This is something my coworker Cam McHenry touches on in his great post, “How I write accessible Playwright tests”. Consider this piece of Playwright code, which checks for the presence of a button that toggles open an edit menu:// Selects an element with a role of `button` // that has an accessible name of \"Edit\" const editMenuButton = await page.getByRole('button', { name: \"Edit\" }); // Requires the edit button to have a property // of `aria-haspopup` with a value of `true` expect(editMenuButton).toHaveAttribute('aria-haspopup', 'true'); The test selects UI based on outcome rather than appearance. That’s a far more reliable way to target things in the long-term.This all helps to create a virtuous feedback cycle. It enshrines semantic HTML and ARIA’s presence in your front-end UI code, which helps to guarantee accessible experiences don’t regress. Combining this with styling, you have a powerful, self-contained system for building robust, accessible experiences.ARIA Is Ultimately About Caring About PeopleWeb accessibility can be about enabling important things like scheduling medical appointments. It is also about fun things like chatting with your friends. It’s also used for every web experience that lives in between.Using semantic HTML — supplemented with a judicious application of ARIA — helps you enable these experiences. To sum things up, ARIA:Has been around for a long time, and its spirit reflects the era in which it was first created;Has a governing taxonomy, vocabulary, and rules for use and is declared in the same way HTML attributes are;Is mostly used for dynamically updating things, controlled via JavaScript;Has highly specific use cases in mind for each of its roles;Fails silently if mis-authored;Only exposes the presence of something to assistive technology and does not confer interactivity;Requires input from the web browser, but also the operating system, in order for assistive technology to use it;Has a range of actual support, complicated by the more of it you use;Has some things to watch out for, namely aria-label, the ARIA Authoring Practices Guide, and macOS VoiceOver support;Can also be used for things like visual styling and writing resilient tests;Is best evaluated by using actual assistive technology.Viewed one way, ARIA is arcane, full of misconceptions, and fraught with potential missteps. Viewed another, ARIA is a beautiful and elegant way to programmatically communicate the interactivity and state of a user interface.I choose the second view. At the end of the day, using ARIA helps to ensure that disabled people can use a web experience the same way everyone else can.Thank you to Adrian Roselli and Jan Maarten for their feedback.Further Reading“What the Heck is ARIA? A Beginner’s Guide to ARIA for Accessibility,” Kat Shaw“Accessibility APIs: A Key To Web Accessibility,” Léonie Watson \u0026 Chaals McCathie Nevile“Semantics to Screen Readers,” Melanie Richards“What ARIA does not do,” Steve Faulkner“What ARIA still does not do,” stevef“APG support tables — why they matter,” Michael Fairchild“ARIA vs HTML,” Adrian Roselli (gg, yk)",
  "image": "https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/what-i-wish-someone-told-me-aria.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e34 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/accessibility\"\u003eAccessibility\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/coding\"\u003eCoding\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/guides\"\u003eGuides\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003e\u003ca href=\"https://www.w3.org/WAI/standards-guidelines/aria/\"\u003eAccessible Rich Internet Applications (ARIA)\u003c/a\u003e is an inevitability when working on web accessibility. That said, it’s everyone’s first time learning about ARIA at some point.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eIf you haven’t encountered ARIA before, great! It’s a chance to learn something new and exciting. If you have heard of ARIA before, this might help you better understand it or maybe even teach you something new!\u003c/p\u003e\u003cp\u003eThese are all things I wish someone had told me when I was getting started on my web accessibility journey. This post will:\u003c/p\u003e\u003cul\u003e\u003cli\u003eProvide a mindset for \u003cstrong\u003ehow to approach ARIA\u003c/strong\u003e as a concept,\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eDebunk some common misconceptions\u003c/strong\u003e, and\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eProvide some guiding thoughts\u003c/strong\u003e to help you better understand and work with it.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIt is my hope that in doing so, this post will help make an oft-overlooked yet vital corner of web design and development easier to approach.\u003c/p\u003e\u003ch2 id=\"what-this-post-is-not\"\u003eWhat This Post Is Not\u003c/h2\u003e\u003cp\u003eThis \u003cstrong\u003eis not\u003c/strong\u003e a recipe book for how to use ARIA to build accessible websites and web apps. It is also not a guide for how to remediate an inaccessible experience. \u003cstrong\u003eA lot of accessibility work is highly contextual\u003c/strong\u003e. I do not know the specific needs of your project or organization, so trying to give advice here could easily do more harm than good.\u003c/p\u003e\u003cp\u003eInstead, think of this post as a “know before you go” guide. I’m hoping to give you a good headspace to approach ARIA, as well as highlight things to watch out for when you undertake your journey. So, with that out of the way, let’s dive in!\u003c/p\u003e\u003ch2 id=\"so-what-is-aria\"\u003eSo, What Is ARIA?\u003c/h2\u003e\u003cblockquote\u003eARIA is what you turn to if there is not a native HTML element or attribute that is better suited for the job of communicating interactivity, purpose, and state.\u003c/blockquote\u003e\u003cp\u003eThink of it like a spice that you sprinkle into your markup to enhance things.\u003c/p\u003e\u003cp\u003eAdding ARIA to your HTML markup is a way of providing additional information to a website or web app for \u003ca href=\"https://webaim.org/articles/visual/blind#screenreaders\"\u003escreen readers\u003c/a\u003e and \u003ca href=\"https://webaim.org/articles/motor/assistive#voicerecognition\"\u003evoice control software\u003c/a\u003e.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eInteractivity\u003c/strong\u003e means the content can be activated or manipulated. An example of this is navigating to a link’s destination.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ePurpose\u003c/strong\u003e means what something is used for. An example of this is a text input used to collect someone’s name.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eState\u003c/strong\u003e means the current status content has been placed in and controlled by \u003ca href=\"https://www.w3.org/TR/wai-aria/#introstates\"\u003estates, properties, and values\u003c/a\u003e. An example of this is an accordion panel ​​that can either be expanded or collapsed.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eHere is an illustration to help communicate what I mean by this:\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/1-interactivity-purpose-state.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"244\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/1-interactivity-purpose-state.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/1-interactivity-purpose-state.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/1-interactivity-purpose-state.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/1-interactivity-purpose-state.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/1-interactivity-purpose-state.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/1-interactivity-purpose-state.png\" sizes=\"100vw\" alt=\"Three panels, showing a pressed-in mute button, its underlying HTML code, and three labels for “Interactivity,” “Purpose,” and “State.” The button element uses the “Interactivity” label. A declaration of aria-pressed equals true uses the “State” label. And finally, the button’s string value of “Mute” uses the “Purpose” label. The button’s HTML also uses a visually hidden CSS class to hide the string, then a decorative SVG icon to show a speaker mute icon.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/1-interactivity-purpose-state.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cul\u003e\u003cli\u003eThe presence of \u003ca href=\"https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element\"\u003eHTML’s \u003ccode\u003ebutton\u003c/code\u003e element\u003c/a\u003e will instruct assistive technology to report it as a button, letting someone know that it can be activated to perform a predefined action.\u003c/li\u003e\u003cli\u003eThe presence of the text string “Mute” will be reported by assistive technology to clue the person into what the button is used for.\u003c/li\u003e\u003cli\u003eThe presence of \u003ca href=\"https://w3c.github.io/aria/#aria-pressed\"\u003e\u003ccode\u003earia-pressed=\u0026#34;true\u0026#34;\u003c/code\u003e\u003c/a\u003e means that someone or something has previously activated the button, and it is now in a “pushed in” state that sustains its action.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis overall pattern will let people who use assistive technology know:\u003c/p\u003e\u003col\u003e\u003cli\u003eIf something is interactive,\u003c/li\u003e\u003cli\u003eWhat kind of interactive behavior it performs, and\u003c/li\u003e\u003cli\u003eIts \u003ca href=\"https://w3c.github.io/aria/#host_general_attrs\"\u003ecurrent state\u003c/a\u003e.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"aria-s-history\"\u003eARIA’s History\u003c/h2\u003e\u003cp\u003eARIA has been around for a long time, with \u003ca href=\"https://www.w3.org/TR/2006/WD-aria-role-20060926/\"\u003ethe first version published on September 26th, 2006\u003c/a\u003e.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/2-browser.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"592\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/2-browser.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/2-browser.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/2-browser.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/2-browser.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/2-browser.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/2-browser.png\" sizes=\"100vw\" alt=\"The Roles for Accessible Rich Internet Applications (WAI-ARIA Roles) specification, loaded in a copy of Internet Explorer 7.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/2-browser.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp\u003e\u003ca aria-label=\"Share on Twitter\" href=\"https://twitter.com/share?text=%0aARIA%20was%20created%20to%20provide%20a%20bridge%20between%20the%20limitations%20of%20HTML%20and%20the%20need%20for%20making%20interactive%20experiences%20understandable%20by%20assistive%20technology.%0a\u0026amp;url=https://smashingmagazine.com%2f2025%2f06%2fwhat-i-wish-someone-told-me-aria%2f\"\u003eARIA was created to provide a bridge between the limitations of HTML and the need for making interactive experiences understandable by assistive technology.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eThe latest version of ARIA is \u003ca href=\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eversion 1.2\u003c/a\u003e, published on June 6th, 2023. Version 1.3 is slated to be released relatively soon, and you can read more about it in \u003ca href=\"https://www.craigabbott.co.uk/blog/a-look-at-the-new-wai-aria-1-3-draft/\"\u003ethis excellent article by Craig Abbott\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eYou may also see it referred to as WAI-ARIA, where WAI stands for “Web Accessibility Initiative.” The \u003ca href=\"https://www.w3.org/WAI/\"\u003eWAI\u003c/a\u003e is part of the \u003ca href=\"https://www.w3.org/\"\u003eW3C\u003c/a\u003e, the organization that sets standards for the web. That said, most accessibility practitioners I know call it “ARIA” in written and verbal communication and leave out the “WAI-” part.\u003c/p\u003e\u003ch2 id=\"the-spirit-of-aria-reflects-the-era-in-which-it-was-created\"\u003eThe Spirit Of ARIA Reflects The Era In Which It Was Created\u003c/h2\u003e\u003cp\u003eThe reason for this is simple: The web was a lot less mature in the past than it is now. The most popular operating system in 2006 was \u003ca href=\"https://en.wikipedia.org/wiki/Windows_XP\"\u003eWindows XP\u003c/a\u003e. The iPhone didn’t exist yet; it was released a year later.\u003c/p\u003e\u003cp\u003eFrom a very high level, \u003cstrong\u003eARIA is a snapshot of the operating system interaction paradigms of this time period\u003c/strong\u003e. This is because ARIA recreates them.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/3-wxpdefaultdesk.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"600\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/3-wxpdefaultdesk.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/3-wxpdefaultdesk.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/3-wxpdefaultdesk.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/3-wxpdefaultdesk.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/3-wxpdefaultdesk.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/3-wxpdefaultdesk.png\" sizes=\"100vw\" alt=\"Windows XP, showing an open Start menu, the famous Rolling Green Hills desktop wallpaper, and a tooltip popping up from the taskbar advising us to take a tour of Windows XP. Screenshot.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eImage source: \u003ca href=\"https://the-microsoft-windows-xp.fandom.com/wiki/Windows_XP\"\u003eThe Microsoft Windows XP Wiki\u003c/a\u003e. (\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/3-wxpdefaultdesk.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"the-mindset\"\u003eThe Mindset\u003c/h3\u003e\u003cp\u003eSmartphones with features like \u003ca href=\"https://jquerymobile.com/\"\u003etappable\u003c/a\u003e, swipeable, and draggable surfaces were far less commonplace. Single Page Application “web app” experiences were also rare, with \u003ca href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\"\u003eAjax\u003c/a\u003e-based approaches being the most popular. This means that we have to \u003cstrong\u003ebuild the experiences of today using the technology of 2006\u003c/strong\u003e. In a way, \u003cstrong\u003ethis is a good thing\u003c/strong\u003e. It forces us to take new and novel experiences and interrogate them.\u003c/p\u003e\u003cp\u003eInteractions that cannot be broken down into smaller, more focused pieces that map to ARIA patterns are most likely inaccessible. This is because they won’t be able to be operated by assistive technology or function on older or less popular devices.\u003c/p\u003e\u003cp\u003eI may be biased, but I also think these sorts of novel interactions that can’t translate also serve as a warning that a general audience will find them to be \u003cstrong\u003econfusing and, therefore, unusable\u003c/strong\u003e. This belief is important to consider given that the internet serves:\u003c/p\u003e\u003cul\u003e\u003cli\u003eAn unknown number of people,\u003c/li\u003e\u003cli\u003eUsing an unknown number of devices,\u003c/li\u003e\u003cli\u003eEach with an unknown amount of personal customizations,\u003c/li\u003e\u003cli\u003eWho have their own unique needs and circumstances and\u003c/li\u003e\u003cli\u003eHave unknown motivational factors.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"interaction-expectations\"\u003eInteraction Expectations\u003c/h3\u003e\u003cp\u003eContemporary expectations for keyboard-based interaction for web content — checkboxes, radios, modals, accordions, and so on — are sourced from Windows XP and its predecessor operating systems. These interaction models are carried forward as muscle memory for older people who use assistive technology. Younger people who rely on assistive technology also learn these de facto standards, thus continuing the cycle.\u003c/p\u003e\u003cp\u003eWhat does this mean for you? Someone using a keyboard to interact with your website or web app \u003cstrong\u003ewill most likely\u003c/strong\u003e \u003ca href=\"https://github.blog/engineering/user-experience/considerations-for-making-a-tree-view-component-accessible/#start-with-windows\"\u003e\u003cstrong\u003etry these Windows OS-based keyboard shortcuts first\u003c/strong\u003e\u003c/a\u003e. This means things like pressing:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ckbd\u003eEnter\u003c/kbd\u003e to navigate to a link’s destination,\u003c/li\u003e\u003cli\u003e\u003ckbd\u003eSpace\u003c/kbd\u003e to activate buttons,\u003c/li\u003e\u003cli\u003e\u003ckbd\u003eHome\u003c/kbd\u003e and \u003ckbd\u003eEnd\u003c/kbd\u003e to jump to the start or end of a list of items, and so on.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"it-s-also-a-living-document\"\u003eIt’s Also A Living Document\u003c/h3\u003e\u003cp\u003eThis is not to say that ARIA has stagnated. It is constantly being worked on with new additions, removals, and clarifications. Remember, it is now at version 1.2, with \u003ca href=\"https://www.w3.org/TR/wai-aria-1.3/\"\u003eversion 1.3 arriving soon\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn parallel, HTML as a language also reflects this evolution. Elements were originally created to support a document-oriented web and have been gradually evolving to \u003ca href=\"https://open-ui.org/\"\u003esupport more dynamic, app-like experiences\u003c/a\u003e. The great bit here is that this is all \u003ca href=\"https://github.com/w3c/aria/\"\u003econducted in the open\u003c/a\u003e and is something you can contribute to if you feel motivated to do so.\u003c/p\u003e\u003ch2 id=\"aria-has-rules-for-using-it\"\u003eARIA Has Rules For Using It\u003c/h2\u003e\u003cp\u003eThere are \u003ca href=\"https://www.w3.org/TR/using-aria/#NOTES\"\u003efive rules included in ARIA’s documentation\u003c/a\u003e to help steer how you approach it:\u003c/p\u003e\u003col\u003e\u003cli\u003e\u003ca href=\"https://www.w3.org/TR/using-aria/#firstrule\"\u003eUse a native element whenever possible.\u003c/a\u003e\u003cbr/\u003eAn example would be using an anchor element (\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e) for a link rather than a \u003ccode\u003ediv\u003c/code\u003e with a click handler and a \u003ccode\u003erole\u003c/code\u003e of \u003ccode\u003elink\u003c/code\u003e.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.w3.org/TR/using-aria/#secondrule\"\u003eDon’t adjust a native element’s semantics if at all possible.\u003c/a\u003e\u003cbr/\u003eAn example would be trying to use a heading element as a tab rather than wrapping the heading in a semantically neutral \u003ccode\u003ediv\u003c/code\u003e.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.w3.org/TR/using-aria/#3rdrule\"\u003eAnything interactive has to be keyboard operable.\u003c/a\u003e\u003cbr/\u003eIf you can’t use it with a keyboard, it isn’t accessible. Full stop.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.w3.org/TR/using-aria/#4thrule\"\u003eDo not use \u003ccode\u003erole=\u0026#34;presentation\u0026#34;\u003c/code\u003e or \u003ccode\u003earia-hidden=\u0026#34;true\u0026#34;\u003c/code\u003e on a focusable element.\u003c/a\u003e\u003cbr/\u003eThis makes something intended to be interactive unable to be used by assistive technology.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.w3.org/TR/using-aria/#fifthrule\"\u003eInteractive elements must be named.\u003c/a\u003e\u003cbr/\u003eAn example of this is using the text string “Print” for a \u003ccode\u003ebutton\u003c/code\u003e element.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eObserving these five rules will do a lot to help you out. The following is more context to provide even more support.\u003c/p\u003e\u003ch2 id=\"aria-has-a-taxonomy\"\u003eARIA Has A Taxonomy\u003c/h2\u003e\u003cp\u003eThere is a structured grammar to ARIA, and it is centered around roles, as well as states and properties.\u003c/p\u003e\u003ch3 id=\"roles\"\u003eRoles\u003c/h3\u003e\u003cp\u003eA \u003ca href=\"https://www.w3.org/TR/wai-aria/#dfn-role\"\u003eRole\u003c/a\u003e is what assistive technology reads and then announces. A lot of people refer to this in shorthand as \u003cem\u003esemantics\u003c/em\u003e. \u003cstrong\u003eHTML elements have implied roles\u003c/strong\u003e, which is why an anchor element will be announced as a link by screen readers with no additional work.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/4-roles.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"198\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/4-roles.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/4-roles.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/4-roles.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/4-roles.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/4-roles.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/4-roles.png\" sizes=\"100vw\" alt=\"Three panels, showing how an implied role gets announced by assistive technology. The first panel shows an anchor element with a string value of “French fries.” The anchor element has the label “Implied link role.” The second panel shows a standard blue link with an underline. The link reads, “French fries.” The third panel shows a speech balloon coming from a laptop. The speech balloon’s contents read, “French fries, link.” A label points to the speech balloon and reads, “Implied link role.”\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/4-roles.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003cstrong\u003eImplied roles are almost always better to use\u003c/strong\u003e if the use case calls for them. Recall \u003ca href=\"https://www.w3.org/TR/using-aria/#firstrule\"\u003ethe first rule of ARIA\u003c/a\u003e here. This is usually what digital accessibility practitioners refer to when they say, “Just use semantic HTML.”\u003c/p\u003e\u003cp\u003eThere are many reasons for favoring implied roles. The main consideration is better guarantees of support across an unknown number of operating systems, browsers, and assistive technology combinations.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://www.w3.org/TR/wai-aria/#roles_categorization\"\u003eRoles have categories\u003c/a\u003e, each with its own purpose. The \u003ca href=\"https://www.w3.org/TR/wai-aria/#abstract_roles\"\u003eAbstract role category\u003c/a\u003e is notable in that it is an organizing \u003ca href=\"https://en.wiktionary.org/wiki/supercategory\"\u003esupercategory\u003c/a\u003e \u003cstrong\u003enot intended to be used by authors\u003c/strong\u003e:\u003c/p\u003e\u003cblockquote\u003eAbstract roles are used for the ontology. Authors \u003cstrong\u003eMUST NOT\u003c/strong\u003e use abstract roles in content.\u003c/blockquote\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- This won\u0026#39;t work, don\u0026#39;t do it --\u0026gt;\n\u0026lt;h2 role=\u0026#34;sectionhead\u0026#34;\u0026gt;\n  Anatomy and physiology\n\u0026lt;/h2\u0026gt;\n\n\u0026lt;!-- Do this instead --\u0026gt;\n\u0026lt;section aria-labeledby=\u0026#34;anatomy-and-physiology\u0026#34;\u0026gt;\n  \u0026lt;h2 id=\u0026#34;anatomy-and-physiology\u0026#34;\u0026gt;\n    Anatomy and physiology\n  \u0026lt;/h2\u0026gt;\n\u0026lt;/section\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAdditionally, in the same way, you can only declare ARIA on certain things, \u003cstrong\u003eyou can only declare some ARIA as children of other ARIA declarations\u003c/strong\u003e. An example of this is the \u003ca href=\"https://www.w3.org/TR/wai-aria/#listitem\"\u003ethe \u003ccode\u003elistitem\u003c/code\u003e role\u003c/a\u003e, which requires \u003ca href=\"https://www.w3.org/TR/wai-aria/#list\"\u003ea role of \u003ccode\u003elist\u003c/code\u003e\u003c/a\u003e to be present on its parent element.\u003c/p\u003e\u003cp\u003eSo, what’s the best way to determine if a role requires a parent declaration? The answer is to \u003ca href=\"https://www.w3.org/TR/wai-aria/#role_definitions\"\u003ereview the official definition\u003c/a\u003e.\u003c/p\u003e\u003ch3 id=\"states-and-properties\"\u003eStates And Properties\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://www.w3.org/TR/wai-aria/#introstates\"\u003eStates and properties\u003c/a\u003e are the other two main parts of ARIA‘s overall taxonomy.\u003c/p\u003e\u003cp\u003eImplicit roles are provided by semantic HTML, and explicit roles are provided by ARIA. Both describe \u003cstrong\u003ewhat an element is\u003c/strong\u003e. States \u003cstrong\u003edescribe that element’s characteristics in a way that assistive technology can understand\u003c/strong\u003e. This is done via property declarations and their companion values.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/5-role-and-state.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"344\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/5-role-and-state.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/5-role-and-state.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/5-role-and-state.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/5-role-and-state.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/5-role-and-state.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/5-role-and-state.png\" sizes=\"100vw\" alt=\"A code example that shows how roles, states, and properties all work together. The first panel shows HTML code for a button element, which uses an ARIA declaration of aria disabled equals true. The button element is labeled as “Role”. The ARIA declaration, including both the property and value portions, is labeled “State.”\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/5-role-and-state.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eARIA states can change quickly or slowly, both as a result of human interaction as well as application state. When the state is changed as a result of human interaction, it is considered an “unmanaged state.” Here, a developer must supply the underlying JavaScript logic to control the interaction.\u003c/p\u003e\u003cp\u003eWhen the state changes as a result of the application (e.g., operating system, web browser, and so on), this is considered “\u003ca href=\"https://www.w3.org/TR/wai-aria/#dfn-managed-state\"\u003emanaged state\u003c/a\u003e.” Here, the application automatically supplies the underlying logic.\u003c/p\u003e\u003ch2 id=\"how-to-declare-aria\"\u003eHow To Declare ARIA\u003c/h2\u003e\u003cp\u003eThink of ARIA as an extension of \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\"\u003eHTML attributes\u003c/a\u003e, a suite of name/value pairs. Some values are predefined, while others are author-supplied:\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/6-predefined-author-defined.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"432\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/6-predefined-author-defined.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/6-predefined-author-defined.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/6-predefined-author-defined.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/6-predefined-author-defined.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/6-predefined-author-defined.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/6-predefined-author-defined.png\" sizes=\"100vw\" alt=\"Two HTML declarations. One is a div element with an ARIA declaration of aria-live equals polite declared on it. The second is a button element with an ARIA declaration of aria-label equals save. The aria-live declaration is labeled “Predefined value,” and the aria-label declaration is labeled “Author-supplied value.”\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/6-predefined-author-defined.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eFor the examples in the previous graphic, the \u003ccode\u003epolite\u003c/code\u003e value for \u003ccode\u003earia-live\u003c/code\u003e is one of \u003ca href=\"https://w3c.github.io/aria/#aria-live\"\u003ethe three predefined values\u003c/a\u003e (\u003ccode\u003eoff\u003c/code\u003e, \u003ccode\u003epolite\u003c/code\u003e, and \u003ccode\u003eassertive\u003c/code\u003e). For \u003ccode\u003earia-label\u003c/code\u003e, “Save” is a text string manually supplied by the author.\u003c/p\u003e\u003cp\u003eYou declare ARIA on HTML elements the same way you declare other attributes:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- \n  Applies an id value of \n  \u0026#34;carrot\u0026#34; to the div\n--\u0026gt;\n\u0026lt;div id=\u0026#34;carrot\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n\n\u0026lt;!-- \n  Hides the content of this paragraph \n  element from assistive technology \n--\u0026gt;\n\u0026lt;p aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\n  Assistive technology can\u0026#39;t read this\n\u0026lt;/p\u0026gt;\n\n\u0026lt;!-- \n  Provides an accessible name of \u0026#34;Stop\u0026#34;, \n  and also communicates that the button \n  is currently pressed. A type property \n  with a value of \u0026#34;button\u0026#34; prevents \n  browser form submission.\n--\u0026gt;\n\u0026lt;button \n  aria-label=\u0026#34;Stop\u0026#34;\n  aria-pressed=\u0026#34;true\u0026#34;\n  type=\u0026#34;button\u0026#34;\u0026gt;\n  \u0026lt;!-- SVG icon --\u0026gt;\n\u0026lt;/button\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOther usage notes:\u003c/p\u003e\u003cul\u003e\u003cli\u003eYou can place more than one ARIA declaration on an HTML element.\u003c/li\u003e\u003cli\u003eThe order of placement of ARIA when declared on an HTML element does not matter.\u003c/li\u003e\u003cli\u003eThere is no limit to how many ARIA declarations can be placed on an element. Be aware that \u003cstrong\u003ethe more you add, the more complexity you introduce\u003c/strong\u003e, and more complexity means a larger chance \u003ca href=\"https://www.a11yproject.com/posts/aria-has-perfect-support/\"\u003ethings may break or not function as expected\u003c/a\u003e.\u003c/li\u003e\u003cli\u003eYou can declare ARIA on an HTML element and also have other non-ARIA declarations, such as \u003ccode\u003eclass\u003c/code\u003e or \u003ccode\u003eid\u003c/code\u003e. The order of declarations does not matter here, either.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eIt might also be helpful to know that boolean attributes are treated a little differently in ARIA when compared to HTML. \u003ca href=\"https://hidde.blog/\"\u003eHidde de Vries\u003c/a\u003e writes about this in his post, \u003ca href=\"https://hidde.blog/boolean-attributes-in-html-and-aria-whats-the-difference/\"\u003e“Boolean attributes in HTML and ARIA: what’s the difference?”\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"not-a-whole-lot-of-aria-is-hardcoded\"\u003eNot A Whole Lot Of ARIA Is “Hardcoded”\u003c/h2\u003e\u003cp\u003eIn this context, “hardcoding” means directly writing a static attribute or value declaration into your component, view, or page.\u003c/p\u003e\u003cp\u003eA lot of ARIA is designed to be applied or conditionally modified dynamically based on \u003ca href=\"https://www.freecodecamp.org/news/stateful-vs-stateless-architectures-explained/\"\u003eapplication state\u003c/a\u003e or as a response to someone’s action. An example of this is a show-and-hide disclosure pattern:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://w3c.github.io/aria/#aria-expanded\"\u003eARIA’s \u003ccode\u003earia-expanded\u003c/code\u003e attribute\u003c/a\u003e is toggled from \u003ccode\u003efalse\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e to communicate if the disclosure is in an expanded or collapsed state.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://html.spec.whatwg.org/multipage/interaction.html#the-hidden-attribute\"\u003eHTML’s \u003ccode\u003ehidden\u003c/code\u003e attribute\u003c/a\u003e is conditionally removed or added in tandem to show or hide the disclosure’s full content area.\u003c/li\u003e\u003c/ul\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;div class=\u0026#34;disclosure-container\u0026#34;\u0026gt;\n  \u0026lt;button \n    aria-expanded=\u0026#34;false\u0026#34;\n    class=\u0026#34;disclosure-toggle\u0026#34;\n    type=\u0026#34;button\u0026#34;\u0026gt;\n    How we protect your personal information\n  \u0026lt;/button\u0026gt;\n  \u0026lt;div \n    hidden\n    class=\u0026#34;disclosure-content\u0026#34;\u0026gt;\n    \u0026lt;ul\u0026gt;\n      \u0026lt;li\u0026gt;Fast, accurate, thorough and non-stop protection from cyber attacks\u0026lt;/li\u0026gt;\n      \u0026lt;li\u0026gt;Patching practices that address vulnerabilities that attackers try to exploit\u0026lt;/li\u0026gt;\n      \u0026lt;li\u0026gt;Data loss prevention practices help to ensure data doesn\u0026#39;t fall into the wrong hands\u0026lt;/li\u0026gt;\n      \u0026lt;li\u0026gt;Supply risk management practices help ensure our suppliers adhere to our expectations\u0026lt;/li\u0026gt;\n    \u0026lt;/ul\u0026gt;\n    \u0026lt;p\u0026gt;\n      \u0026lt;a href=\u0026#34;/security/\u0026#34;\u0026gt;Learn more about our security best practices\u0026lt;/a\u0026gt;.\n    \u0026lt;/p\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA common example of a hardcoded ARIA declaration you’ll encounter on the web is \u003ca href=\"https://www.smashingmagazine.com/2021/05/accessible-svg-patterns-comparison/\"\u003emaking an SVG icon inside a button decorative\u003c/a\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;button type=\u0026#34;button\u0026gt;\n  \u0026lt;svg aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\n    \u0026lt;!-- SVG code --\u0026gt;\n  \u0026lt;/svg\u0026gt;\n  Save\n\u0026lt;/button\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, the string “Save” is what is required for someone to understand what the button will do when they activate it. The accompanying icon helps that understanding visually but is considered redundant and therefore \u003ca href=\"https://www.w3.org/WAI/tutorials/images/decorative/\"\u003edecorative\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAn implied role is all you need if you’re using semantic HTML. Explicitly declaring its role via ARIA does not confer any additional advantages.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- \n  You don\u0026#39;t need to declare role=\u0026#34;button\u0026#34; here.\n  Using the \u0026lt;button\u0026gt; element will make assistive \n  technology announce it as a button. The \n  role=\u0026#34;button\u0026#34; declaration is redundant.\n --\u0026gt;\n\u0026lt;button role=\u0026#34;button\u0026#34;\u0026gt;\n  Save\n\u0026lt;/button\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou might occasionally run into these redundant declarations on \u003ca href=\"https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/examples/HTML5.html\"\u003eHTML sectioning elements\u003c/a\u003e, such as \u003ccode\u003e\u0026lt;main role=\u0026#34;main\u0026#34;\u0026gt;\u003c/code\u003e, or \u003ccode\u003e\u0026lt;footer role=\u0026#34;contentinfo\u0026#34;\u0026gt;\u003c/code\u003e. This isn’t needed anymore, and you can just use the \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;footer\u0026gt;\u003c/code\u003e elements.\u003c/p\u003e\u003cp\u003eThe reason for this is historic. These declarations were done for support reasons, in that it was a stop-gap technique for assistive technology that needed to be updated to support these \u003ca href=\"https://www.w3.org/html/logo/\"\u003enew-at-the-time HTML elements\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eContemporary assistive technology does not need these redundant declarations. Think of it the same way that we don’t have to use vendor prefixes for the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius\"\u003eCSS \u003ccode\u003eborder-radius\u003c/code\u003e property\u003c/a\u003e anymore.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: \u003cem\u003eThere is an exception to this guidance. There are circumstances where certain complex and complicated markup patterns don’t work as expected for assistive technology. In these cases, we want to hardcode the implicit role as explicit ARIA to ensure it works. This assistive technology support concern is \u003ca href=\"#the-more-aria-you-add-to-something-the-greater-the-chance-something-will-behave-unexpectedly\"\u003ecovered in more detail later in this post\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\u003ch2 id=\"you-don-t-need-to-say-what-a-control-is-that-is-what-roles-are-for\"\u003eYou Don’t Need To Say What A Control Is; That Is What Roles Are For\u003c/h2\u003e\u003cp\u003eBoth implicit and explicit roles are announced by screen readers. You don’t need to include that part for things like the interactive element’s text string or \u003ca href=\"https://w3c.github.io/aria/#aria-label\"\u003ean \u003ccode\u003earia-label\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- Don\u0026#39;t do this --\u0026gt;\n\u0026lt;button \n  aria-label=\u0026#34;Save button\u0026#34;\n  type=\u0026#34;button\u0026#34;\u0026gt;\n  \u0026lt;!-- Icon SVG --\u0026gt;\n\u0026lt;/button\u0026gt;\n\n\u0026lt;!-- Do this instead --\u0026gt;\n\u0026lt;button \n  aria-label=\u0026#34;Save\u0026#34;\n  type=\u0026#34;button\u0026#34;\u0026gt;\n  \u0026lt;!-- Icon SVG --\u0026gt;\n\u0026lt;/button\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHad we used the string value of “Save button” for our Save button, a screen reader would announce it along the lines of, “Save button, button.” That’s \u003ca href=\"https://theideaplace.net/tooltip-should-not-start-an-accessible-name/\"\u003eredundant\u003c/a\u003e and confusing.\u003c/p\u003e\u003ch2 id=\"aria-roles-have-very-specific-meanings\"\u003eARIA Roles Have Very Specific Meanings\u003c/h2\u003e\u003cp\u003eWe sometimes refer to website and web app navigation colloquially as menus, especially if it’s an e-commerce-style \u003ca href=\"https://www.nngroup.com/articles/mega-menus-work-well/\"\u003emega menu\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn ARIA, \u003ca href=\"https://w3c.github.io/aria/#menu\"\u003emenus mean something very specific\u003c/a\u003e. Don’t think of global or in-page navigation or the like. Think of menus in this context as what appears when you click the Edit menu button on your application’s menubar.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/7-menu.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"712\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/7-menu.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/7-menu.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/7-menu.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/7-menu.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/7-menu.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/7-menu.png\" sizes=\"100vw\" alt=\"The edit menu option activated on Windows Notepad. It shows a list of menu options, with the option for “Go to” being in focus. Some options are disabled, as there is no content in the Notepad file, nor is there anything on the Windows Clipboard. The other menu options are Undo, Cut, Copy, Paste, Delete, Search with Bing, Find, Find Next, Find Previous, Replace, Select All, Time/Date, and Font. Screenshot.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eNotepad, Windows 11. (\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/7-menu.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eUsing a role improperly because its name seems like an appropriate fit at first glance creates confusion for people who do not have the context of the visual UI. \u003cstrong\u003eTheir expectations will be set with the announcement of the role\u003c/strong\u003e, then subverted when it does not act the way it is supposed to.\u003c/p\u003e\u003cp\u003eImagine if you click on a link, and instead of taking you to another webpage, it sends something completely unrelated to your printer instead. It’s sort of like that.\u003c/p\u003e\u003cp\u003eDeclaring \u003ccode\u003erole=\u0026#34;menu\u0026#34;\u003c/code\u003e is a common example of a misapplied role, but there are others. The best way to know what a role is used for? \u003ca href=\"https://www.w3.org/TR/wai-aria/#role_definitions\"\u003eGo straight to the source\u003c/a\u003e and read up on it.\u003c/p\u003e\u003ch2 id=\"certain-roles-are-forbidden-from-having-accessible-names\"\u003eCertain Roles Are Forbidden From Having Accessible Names\u003c/h2\u003e\u003cp\u003eThese roles are \u003ccode\u003ecaption\u003c/code\u003e, \u003ccode\u003ecode\u003c/code\u003e, \u003ccode\u003edeletion\u003c/code\u003e, \u003ccode\u003eemphasis\u003c/code\u003e, \u003ccode\u003egeneric\u003c/code\u003e, \u003ccode\u003einsertion\u003c/code\u003e, \u003ccode\u003eparagraph\u003c/code\u003e, \u003ccode\u003epresentation\u003c/code\u003e, \u003ccode\u003estrong\u003c/code\u003e, \u003ccode\u003esubscript\u003c/code\u003e, and \u003ccode\u003esuperscript\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eThis means you can try and provide an accessible name for one of these elements — say via \u003ccode\u003earia-label\u003c/code\u003e — but it won’t work because it’s disallowed by \u003ca href=\"https://www.w3.org/TR/wai-aria-1.2/#namefromprohibited\"\u003ethe rules of ARIA’s grammar\u003c/a\u003e.\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- This won\u0026#39;t work--\u0026gt;\n\u0026lt;strong aria-label=\u0026#34;A 35% discount!\u0026#34;\u0026gt;\n  $39.95\n\u0026lt;/strong\u0026gt;\n\n\u0026lt;!-- Neither will this --\u0026gt;\n\u0026lt;code title=\u0026#34;let JavaScript example\u0026#34;\u0026gt;\n  let submitButton = document.querySelector(\u0026#39;button[type=\u0026#34;submit\u0026#34;]\u0026#39;);\n\u0026lt;/code\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor these examples, recall that the role is implicit, sourced from the declared HTML element.\u003c/p\u003e\u003cp\u003eNote here that sometimes a browser will make an attempt regardless and overwrite the author-specified string value. This overriding is a confusing act for all involved, which led to the rule being established in the first place.\u003c/p\u003e\u003ch2 id=\"you-can-t-make-up-aria-and-expect-it-to-work\"\u003eYou Can’t Make Up ARIA And Expect It To Work\u003c/h2\u003e\u003cp\u003eI’ve witnessed some developers guess-adding CSS classes, such as \u003ccode\u003e.background-red\u003c/code\u003e or \u003ccode\u003e.text-white\u003c/code\u003e, to their markup and being rewarded if the design visually updates correctly.\u003c/p\u003e\u003cp\u003eThe reason this works is that someone previously added those classes to the project. With ARIA, the people who add the content we can use are the \u003ca href=\"https://www.w3.org/WAI/about/groups/ariawg/\"\u003eAccessible Rich Internet Applications Working Group\u003c/a\u003e. This means each new version of ARIA has a predefined set of properties and values. Assistive technology is then updated to parse those attributes and values, \u003ca href=\"https://ericwbailey.website/published/it-needs-to-map-back-to-a-role/#edicts-still-need-to-be-carried-out\"\u003ealthough this isn’t always a guarantee\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eDeclaring ARIA, which isn’t part of that predefined set, means assistive technology won’t know what it is and consequently won’t announce it.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- \n  There is no \u0026#34;selectpanel\u0026#34; role in ARIA.\n  Because of this, this code will be announced \n  as a button and not as a select panel.\n--\u0026gt;\n\u0026lt;button \n  role=\u0026#34;selectpanel\u0026#34;\n  type=\u0026#34;button\u0026#34;\u0026gt;\n  Choose resources\n\u0026lt;/button\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"aria-fails-silently\"\u003eARIA Fails Silently\u003c/h2\u003e\u003cp\u003eThis speaks to the previous section, where ARIA won’t understand words spoken to it that exist outside its limited vocabulary.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eThere are no console errors for malformed ARIA\u003c/strong\u003e. There’s also no alert dialog, beeping sound, or flashing light for your operating system, browser, or assistive technology. This fact is yet another reason why it is so important to \u003ca href=\"https://webaim.org/articles/nvda/\"\u003e\u003cstrong\u003etest with actual assistive technology\u003c/strong\u003e\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://webaim.org/articles/screenreader_testing/\"\u003eYou don’t have to be an expert\u003c/a\u003e here, either. There is a good chance your code needs updating if you set something to announce as a specific \u003ca href=\"https://www.w3.org/TR/wai-aria/#introstates\"\u003estate\u003c/a\u003e and assistive technology in its default configuration does not announce that state.\u003c/p\u003e\u003ch2 id=\"aria-only-exposes-the-presence-of-something-to-assistive-technology\"\u003eARIA Only Exposes The Presence Of Something To Assistive Technology\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eApplying ARIA to something does not automatically “unlock” capabilities\u003c/strong\u003e. It \u003cstrong\u003eonly\u003c/strong\u003e sends a hint to assistive technology about how the interactive content should behave.\u003c/p\u003e\u003cp\u003eFor assistive technology like screen readers, that hint could be for how to announce something. For assistive technology like \u003ca href=\"https://www.afb.org/node/16207/refreshable-braille-displays\"\u003erefreshable Braille displays\u003c/a\u003e, it could be for how it raises and lowers its pins. For example, \u003cstrong\u003edeclaring \u003ccode\u003erole=\u0026#34;button\u0026#34;\u003c/code\u003e on a \u003ccode\u003ediv\u003c/code\u003e element does not automatically make it clickable\u003c/strong\u003e. You will still need to:\u003c/p\u003e\u003cul\u003e\u003cli\u003eTarget the \u003ccode\u003ediv\u003c/code\u003e element in JavaScript,\u003c/li\u003e\u003cli\u003eTie it to a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event\"\u003eclick event\u003c/a\u003e,\u003c/li\u003e\u003cli\u003eAuthor the interactive logic that it performs when clicked, and then\u003c/li\u003e\u003cli\u003eAccommodate \u003ca href=\"https://adrianroselli.com/2022/04/brief-note-on-buttons-enter-and-space.html\"\u003eall the other expected behaviors\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis all makes me wonder why you can’t save yourself some work and use a \u003ccode\u003ebutton\u003c/code\u003e element in the first place, but that is a different story for a different day.\u003c/p\u003e\u003cp\u003eAdditionally, \u003cstrong\u003eadjusting an element’s role via ARIA does not modify the element’s native functionality\u003c/strong\u003e. For example, you can declare \u003ccode\u003erole=\u0026#34;image\u0026#34;\u003c/code\u003e on a \u003ccode\u003ediv\u003c/code\u003e element. However, attempting to declare the \u003ccode\u003ealt\u003c/code\u003e or \u003ccode\u003esrc\u003c/code\u003e attributes on the \u003ccode\u003ediv\u003c/code\u003e won’t work. This is because \u003ccode\u003ealt\u003c/code\u003e and \u003ccode\u003esrc\u003c/code\u003e are \u003ca href=\"https://html.spec.whatwg.org/multipage/grouping-content.html#the-div-element\"\u003enot supported attributes for \u003ccode\u003ediv\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/8-image%20element-div.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"289\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/8-image%20element-div.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/8-image%20element-div.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/8-image%20element-div.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/8-image%20element-div.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/8-image%20element-div.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/8-image%20element-div.png\" sizes=\"100vw\" alt=\"Two panels, one labeled “Will work” and the other labeled, “Won’t work.” The panel labeled “Will work” shows an image element with an alt and src attribute. The panel labeled “Won’t work” shows a div with a role of image, as well as alt and src attributes. Both src attributes link to a file called cucumber.jpg, and both alt attributes use a string value of “A small cucumber.”\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/8-image%20element-div.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"declaring-an-aria-role-on-something-will-override-its-semantics-but-not-its-behavior\"\u003eDeclaring an ARIA Role On Something Will Override Its Semantics, But Not Its Behavior\u003c/h2\u003e\u003cp\u003eThis speaks to the previous section on \u003cstrong\u003eARIA only exposing something’s presence\u003c/strong\u003e. Don’t forget that certain HTML elements have primary and secondary interactive capabilities built into them.\u003c/p\u003e\u003cp\u003eFor example, an anchor element’s primary capability is navigating to whatever URL value is provided for its \u003ccode\u003ehref\u003c/code\u003e attribute. Secondary capabilities for an anchor element include copying the URL value, opening it in a new tab or incognito window, and so on.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/9-right-click.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"720\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/9-right-click.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/9-right-click.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/9-right-click.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/9-right-click.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/9-right-click.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/9-right-click.png\" sizes=\"100vw\" alt=\"A link whose string value is “Link with a role set to button.” Above it is text that reads, “For demonstration purposes only. Please don’t do this.” The link has a cursor placed over it, with an active right-click menu. The menu shows multiple actions you can take on the link, including opening it in a new tab or window, copying and saving the link address, searching the web for the link’s string value, as well as options provided by user-installed browser extensions. These options are managing the link with the 1Password password manager and copying a link to the selected text. Cropped screenshot.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eChrome on macOS. Note the support for user-installed browser extensions. (\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/9-right-click.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThese secondary capabilities are still preserved. However, it may not be apparent to someone that they can use them — or use them in the way that they’d expect — depending on what is announced.\u003c/p\u003e\u003cp\u003eThe opposite is also true. When an element has no capabilities, having its role adjusted does not grant it any new abilities. Remember, \u003ca href=\"#aria-only-exposes-the-presence-of-something-to-assistive-technology\"\u003e\u003cstrong\u003eARIA only announces\u003c/strong\u003e\u003c/a\u003e. This is why that \u003ccode\u003ediv\u003c/code\u003e with a \u003ccode\u003erole\u003c/code\u003e of \u003ccode\u003ebutton\u003c/code\u003e assigned to it won’t do anything when clicked if no companion JavaScript logic is also present.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/keyboard-support.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"705\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/keyboard-support.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/keyboard-support.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/keyboard-support.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/keyboard-support.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/keyboard-support.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/keyboard-support.png\" sizes=\"100vw\" alt=\"Two side-by-side graphics, each one consisting of three panels. The first panel on the left of the graphic shows the HTML code for a button element. The first panel for the right graphic shows HTML code for a div with a role of button. Both examples use a string value of “Favorite” and have a class of “button-fav” applied to them. The second panel for both left and right graphics shows an identical-looking button labeled “Favorite”, which has a golden-colored background. The third panel for the left graphic shows support for Enter and Space keypresses. The third panel for the right graphic shows no support for Enter and Space keypresses.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/keyboard-support.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"you-will-need-to-declare-aria-to-make-certain-interactions-accessible\"\u003eYou Will Need To Declare ARIA To Make Certain Interactions Accessible\u003c/h2\u003e\u003cp\u003eA lot of the previous content may make it seem like ARIA is something you should avoid using altogether. This isn’t true. Know that this guidance is written to help steer you to \u003cstrong\u003esituations where HTML does not offer the capability to describe an interaction\u003c/strong\u003e out of the box. \u003cstrong\u003eThis space is where you want to use ARIA\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eKnowing how to identify this area requires spending some time learning what HTML elements there are, as well as what they are and are not used for. I quite like \u003ca href=\"https://html5doctor.com/\"\u003eHTML5 Doctor’s Element Index\u003c/a\u003e for upskilling on this.\u003c/p\u003e\u003ch2 id=\"certain-aria-states-require-certain-aria-roles-to-be-present\"\u003eCertain ARIA States Require Certain ARIA Roles To Be Present\u003c/h2\u003e\u003cp\u003eThis is analogous to how HTML has both \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\"\u003eglobal attributes\u003c/a\u003e and attributes that can only be used on a per-element basis. For example, \u003ca href=\"https://w3c.github.io/aria/#aria-describedby\"\u003e\u003ccode\u003earia-describedby\u003c/code\u003e can be used on any HTML element\u003c/a\u003e or role. However, \u003ca href=\"https://w3c.github.io/aria/#aria-posinset\"\u003e\u003ccode\u003earia-posinset\u003c/code\u003e can only be used with \u003ccode\u003earticle\u003c/code\u003e, \u003ccode\u003ecomment\u003c/code\u003e, \u003ccode\u003elistitem\u003c/code\u003e, \u003ccode\u003emenuitem\u003c/code\u003e, \u003ccode\u003eoption\u003c/code\u003e, \u003ccode\u003eradio\u003c/code\u003e, \u003ccode\u003erow\u003c/code\u003e, and \u003ccode\u003etab\u003c/code\u003e roles\u003c/a\u003e. Remember here that these roles can be provided by either HTML or ARIA.\u003c/p\u003e\u003cp\u003eLearning what states require which roles can be achieved by \u003ca href=\"https://www.w3.org/TR/wai-aria/#state_prop_def\"\u003ereading the official reference\u003c/a\u003e. Check for the “Used in Roles” portion of each entry’s characteristics:\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/11-used-in-roles.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"523\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/11-used-in-roles.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/11-used-in-roles.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/11-used-in-roles.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/11-used-in-roles.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/11-used-in-roles.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/11-used-in-roles.png\" sizes=\"100vw\" alt=\" A characteristics table for aria setsize. The table’s two columns are labeled “Characteristic” and “Value.” The second table row is highlighted, demonstrating where you look for what role supports what state. The First row’s first cell has the text, “Used in roles.” The first row’s second cell has the text, “article, listitem, menuitem, option, radio, row, tab.” The second row’s first cell has the text, “Inherits into Roles.” The second row’s second cell has the text, “menuitemcheckbox, menuitemradio, treeitem.” The third row’s first cell has the text “Value.” Cropped screenshot.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eCharacteristics for \u003ccode\u003earia-setsize\u003c/code\u003e. (\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/11-used-in-roles.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAutomated code scanners — like \u003ca href=\"https://www.deque.com/axe/\"\u003eaxe\u003c/a\u003e, \u003ca href=\"https://wave.webaim.org/\"\u003eWAVE\u003c/a\u003e, \u003ca href=\"https://www.tpgi.com/arc-platform/arc-toolkit/\"\u003eARC Toolkit\u003c/a\u003e, \u003ca href=\"https://pa11y.org/\"\u003ePa11y\u003c/a\u003e, \u003ca href=\"https://github.com/IBMa/equal-access#equal-access\"\u003eequal-access\u003c/a\u003e, and so on — can catch this sort of thing if they are written in error. I’m a big fan of implementing these sorts of checks as part of a \u003ca href=\"https://en.wikipedia.org/wiki/Continuous_integration\"\u003econtinuous integration\u003c/a\u003e strategy, as it makes it a code quality concern shared across the whole team.\u003c/p\u003e\u003ch2 id=\"aria-is-more-than-web-browsers\"\u003eARIA Is More Than Web Browsers\u003c/h2\u003e\u003cp\u003eSpeaking of technology that listens, it is helpful to know that the ARIA you declare \u003cstrong\u003einstructs the browser to speak to the operating system\u003c/strong\u003e the browser is installed on. Assistive technology then listens to \u003ca href=\"https://www.w3.org/TR/wai-aria/#dfn-accessibility-tree\"\u003ewhat the operating system reports\u003c/a\u003e. It then communicates that to the person using the computer, tablet, smartphone, and so on.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/12-flowchart-four-steps.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"296\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/12-flowchart-four-steps.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/12-flowchart-four-steps.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/12-flowchart-four-steps.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/12-flowchart-four-steps.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/12-flowchart-four-steps.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/12-flowchart-four-steps.png\" sizes=\"100vw\" alt=\"A flowchart with four steps. The first step is a webpage with a code icon floating above it. The second step is a computer, with an icon of an indented list floating above it. The third step is the symbol for accessibility, a Vitruvian man in a circle. Above this icon is a speech bubble. The fourth and final step is a person, with an icon of a lit lightbulb floating above it.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/12-flowchart-four-steps.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eA person can then instruct assistive technology to request the operating system to take action on the web content displayed in the browser.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/13-flowchart-four-steps.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"296\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/13-flowchart-four-steps.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/13-flowchart-four-steps.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/13-flowchart-four-steps.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/13-flowchart-four-steps.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/13-flowchart-four-steps.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/13-flowchart-four-steps.png\" sizes=\"100vw\" alt=\"A flowchart with four steps. The first step is a person with an icon of a finger pressing a button floating above it. The second step is the symbol for accessibility, a Vitruvian man in a circle. Above this icon is a speech bubble. The third step is a computer, with an icon of a handshake floating above it. The fourth and final step is an updated webpage, with a clicking mouse cursor icon floating above it.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/13-flowchart-four-steps.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003cstrong\u003eThis interaction model is by design\u003c/strong\u003e. It is done to make interaction from assistive technology indistinguishable from interaction performed without assistive technology.\u003c/p\u003e\u003cp\u003eThere are a few reasons for this approach. The most important one is \u003ca href=\"https://css-tricks.com/accessibility-events/\"\u003eit helps \u003cstrong\u003epreserve the privacy and autonomy\u003c/strong\u003e\u003c/a\u003e of the \u003ca href=\"https://accessaces.com/what-disabled-people-have-to-give-up-in-the-name-of-accessibility/\"\u003epeople who rely on assistive technologies\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"just-because-it-exists-in-the-aria-spec-does-not-mean-assistive-technology-will-support-it\"\u003eJust Because It Exists In The ARIA Spec Does Not Mean Assistive Technology Will Support It\u003c/h2\u003e\u003cp\u003eThis support issue was touched on earlier and is a difficult fact to come to terms with.\u003c/p\u003e\u003cp\u003eContemporary developers enjoy the hard-fought, hard-won benefits of \u003ca href=\"https://www.webstandards.org/\"\u003ethe web standards movement\u003c/a\u003e. This means you can declare HTML and know that it will \u003ca href=\"https://www.w3.org/standards/\"\u003ework with every major browser\u003c/a\u003e out there. ARIA does not have this. \u003cstrong\u003eEach assistive technology vendor has its own interpretation of the ARIA specification\u003c/strong\u003e. Oftentimes, these interpretations are convergent. Sometimes, they’re not.\u003c/p\u003e\u003cp\u003eAssistive technology vendors also have support roadmaps for their products. Some assistive technology vendors:\u003c/p\u003e\u003cul\u003e\u003cli\u003eWill eventually add support,\u003c/li\u003e\u003cli\u003eMay never, and some\u003c/li\u003e\u003cli\u003eMight do so in a way that contradicts how other vendors choose to implement things.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThere is also the operating system layer to contend with, which I’ll cover in more detail in a little bit. Here, the mechanisms used to communicate with assistive technology are dusty, oft-neglected areas of software development.\u003c/p\u003e\u003cp\u003eWith these layers comes a scenario where \u003cstrong\u003ethe assistive technology can support the ARIA declared, but the operating system itself cannot communicate the ARIA’s presence, or vice-versa\u003c/strong\u003e. The reasons for this are varied but ultimately boil down to a historic lack of support, prioritization, and resources. However, I am \u003ca href=\"https://aria-at.w3.org/\"\u003eoptimistic that this is changing\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAdditionally, \u003cstrong\u003ethere is no equivalent to \u003ca href=\"https://caniuse.com/\"\u003eCaniuse\u003c/a\u003e, \u003ca href=\"https://web.dev/baseline\"\u003eBaseline\u003c/a\u003e, or \u003ca href=\"https://webstatus.dev/\"\u003eWeb Platform Status\u003c/a\u003e for assistive technology\u003c/strong\u003e. The closest analog we have to support checking resources is \u003ca href=\"https://a11ysupport.io/\"\u003ea11ysupport.io\u003c/a\u003e, but know that it is the painstaking work of a single individual. Its content may not be up-to-date, as the work is both Herculean in its scale and Sisyphean in its scope. Because of this, I must re-stress \u003ca href=\"https://www.smashingmagazine.com/2018/09/importance-manual-accessibility-testing/\"\u003e\u003cstrong\u003ethe importance of manually testing with assistive technology\u003c/strong\u003e\u003c/a\u003e to determine if the ARIA you use works as intended.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eHow To Determine ARIA Support\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThere are three main layers to determine if something is supported:\u003c/p\u003e\u003col\u003e\u003cli\u003eOperating system and version.\u003c/li\u003e\u003cli\u003eAssistive technology and version,\u003c/li\u003e\u003cli\u003eBrowser and browser version.\u003c/li\u003e\u003c/ol\u003e\u003ch3 id=\"1-operating-system-and-version\"\u003e1. Operating System And Version\u003c/h3\u003e\u003cp\u003eEach operating system (e.g., Windows, macOS, Linux) has its own way of \u003ca href=\"https://alistapart.com/article/semantics-to-screen-readers/\"\u003ecommunicating what content is present to assistive technology\u003c/a\u003e. Each piece of assistive technology has to accommodate \u003cstrong\u003ehow\u003c/strong\u003e to parse that communication.\u003c/p\u003e\u003cp\u003eSome assistive technology is incompatible with certain operating systems. An example of this is not being able to use \u003ca href=\"https://support.apple.com/guide/voiceover/get-started-vo4be8816d70/10/mac/15.0\"\u003eVoiceOver\u003c/a\u003e with Windows, or \u003ca href=\"https://www.freedomscientific.com/products/software/jaws/\"\u003eJAWS\u003c/a\u003e with macOS. Furthermore, each version of each operating system has slight variations in what is reported and how. Sometimes, the operating system needs to be updated to “teach” it the updated AIRA vocabulary. Also, do not forget that things like \u003ca href=\"https://github.com/FreedomScientific/standards-support/issues\"\u003ebugs and regressions\u003c/a\u003e can occur.\u003c/p\u003e\u003ch3 id=\"2-assistive-technology-and-version\"\u003e2. Assistive Technology And Version\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eThere is no “one true way” to make assistive technology\u003c/strong\u003e. Each one is built to address different access needs and wants and is done so in an opinionated way — think how different web browsers have different features and UI.\u003c/p\u003e\u003cp\u003eEach piece of assistive technology that consumes web content has its own way of communicating this information, and \u003cstrong\u003ethis is by design\u003c/strong\u003e. It works with what the operating system reports, filtered through things like heuristics and preferences.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/14-voice-control.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"586\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/14-voice-control.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/14-voice-control.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/14-voice-control.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/14-voice-control.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/14-voice-control.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/14-voice-control.png\" sizes=\"100vw\" alt=\"A three by three grid of nine buttons, with a title of “Select your order.” Each button has a food-related emoji, with a tooltip showing the button’s accessible name. The buttons are a hamburger with the title “100% Angus Beef Burger”, french fries with the title “Special Smile Fries”, a pizza slice with the title “Pepperoni Pizza”, a hot dog with the title “Hot Dog With Mustard”, a sandwich with a title of “Ham Sando”, a taco with the title of “Tuesday Taco”, a plate of spaghetti with the title of “Pasgetti”, a waffle with the title of “Waffles Sans Chicken”, and some popcorn with the title of “Poppin’ Corn”.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe “Show names” command in \u003ca href=\"https://support.apple.com/en-us/102225\"\u003emacOS Voice Control\u003c/a\u003e, which displays the accessible names of these icon buttons. The accessible name has been supplied by \u003ccode\u003earia-label\u003c/code\u003e. (\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/14-voice-control.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eLike operating systems, assistive technology also has different versions with what each version is capable of supporting. They can also be susceptible to bugs and regressions.\u003c/p\u003e\u003cp\u003eAnother two factors worth pointing out here are \u003cstrong\u003eupgrade hesitancy\u003c/strong\u003e and \u003cstrong\u003elack of financial resources\u003c/strong\u003e. Some people who rely on assistive technology are hesitant to upgrade it. This is based on a very understandable fear of breaking an important mechanism they use to interact with the world. This, in turn, translates to scenarios like holding off on updates until absolutely necessary, as well as disabling auto-updating functionality altogether.\u003c/p\u003e\u003cp\u003eLack of financial resources is sometimes referred to as \u003ca href=\"https://stimpunks.org/glossary/crip-tax/\"\u003ethe disability or crip tax\u003c/a\u003e. \u003ca href=\"https://www.un.org/development/desa/disabilities/resources/factsheet-on-persons-with-disabilities/disability-and-employment.html\"\u003eEmployment rates tend to be lower for disabled populations\u003c/a\u003e, and with that comes less money to spend on acquiring new technology and updating it. This concern can and does apply to operating systems, browsers, and assistive technology.\u003c/p\u003e\u003ch3 id=\"3-browser-and-browser-version\"\u003e3. Browser And Browser Version\u003c/h3\u003e\u003cp\u003eSome assistive technology works better with one browser compared to another. This is due to the underlying mechanics of \u003cstrong\u003ehow the browser reports its content to assistive technology\u003c/strong\u003e. Using Firefox with NVDA is an example of this.\u003c/p\u003e\u003cp\u003eAdditionally, the support for this reporting sometimes only gets added for newer versions. Unfortunately, it also means support can sometimes accidentally regress, and people don’t notice before releasing the browser update — again, this is due to a historic lack of resources and prioritization.\u003c/p\u003e\u003ch2 id=\"the-less-commonly-used-the-aria-you-declare-the-greater-the-chance-you-ll-need-to-test-it\"\u003eThe Less Commonly-Used The ARIA You Declare, The Greater The Chance You’ll Need To Test It\u003c/h2\u003e\u003cp\u003eCommon ARIA declarations you’ll come across include, but are not limited to:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003earia-label\u003c/code\u003e,\u003c/li\u003e\u003cli\u003e\u003ccode\u003earia-labelledby\u003c/code\u003e,\u003c/li\u003e\u003cli\u003e\u003ccode\u003earia-describedby\u003c/code\u003e,\u003c/li\u003e\u003cli\u003e\u003ccode\u003earia-hidden\u003c/code\u003e,\u003c/li\u003e\u003cli\u003e\u003ccode\u003earia-live\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThese are more common because they’re more supported. They are more supported because many of these declarations have been around for a while. Recall \u003ca href=\"#just-because-it-exists-in-the-aria-spec-does-not-mean-assistive-technology-will-support-it\"\u003ethe previous section that discussed actual assistive technology support\u003c/a\u003e compared to what the ARIA specification supplies.\u003c/p\u003e\u003cp\u003eNewer, more esoteric ARIA, or historically deprioritized declarations, may not have that support yet or may never. An example of how complicated this can get is \u003ca href=\"https://w3c.github.io/aria/#aria-controls\"\u003e\u003ccode\u003earia-controls\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003ccode\u003earia-controls\u003c/code\u003e is a part of ARIA that has been around for a while. \u003ca href=\"https://www.freedomscientific.com/products/software/jaws/\"\u003eJAWS\u003c/a\u003e had support for \u003ccode\u003earia-controls\u003c/code\u003e, but then removed it after user feedback. Meanwhile, every other screen reader I’m aware of never bothered to add support.\u003c/p\u003e\u003cp\u003eWhat does that mean for us? Determining support, or lack thereof, is best accomplished by \u003cstrong\u003emanual testing with assistive technology.\u003c/strong\u003e\u003c/p\u003e\u003ch2 id=\"the-more-aria-you-add-to-something-the-greater-the-chance-something-will-behave-unexpectedly\"\u003eThe More ARIA You Add To Something, The Greater The Chance Something Will Behave Unexpectedly\u003c/h2\u003e\u003cp\u003eThis fact takes into consideration the complexities in preferences, different levels of support, bugs, regressions, and other concerns that come with ARIA’s usage.\u003c/p\u003e\u003cp\u003ePhilosophically, it’s a lot like adding more interactive complexity to your website or web app via JavaScript. The larger the surface area your code covers, \u003cstrong\u003ethe bigger the chance something unintended happens\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eConsider the amount of ARIA added to a component or discrete part of your experience. The more of it there is declared nested into \u003ca href=\"https://dom.spec.whatwg.org/\"\u003ethe Document Object Model (DOM)\u003c/a\u003e, the more it interacts with parent ARIA declarations. This is because assistive technology reads what the DOM exposes to help determine intent.\u003c/p\u003e\u003cp\u003eA lot of contemporary development efforts are isolated, feature-based work that focuses on one small portion of the overall experience. Because of this, they may not take this holistic nesting situation into account. This is another reason why — you guessed it — manual testing is so important.\u003c/p\u003e\u003cp\u003eAnecdotally, \u003ca href=\"https://webaim.org/projects/million/#aria\"\u003eWebAIM’s annual Millions report\u003c/a\u003e — an accessibility evaluation of the top 1,000,000 websites — touches on this phenomenon:\u003c/p\u003e\u003cblockquote\u003e\u003cstrong\u003eIncreased ARIA usage on pages was associated with higher detected errors. The more ARIA attributes that were present, the more detected accessibility errors could be expected.\u003c/strong\u003e This does not necessarily mean that ARIA introduced these errors (these pages are more complex), but pages typically had significantly more errors when ARIA was present.\u003c/blockquote\u003e\u003ch2 id=\"assistive-technology-may-support-your-invalid-aria-declaration\"\u003eAssistive Technology May Support Your Invalid ARIA Declaration\u003c/h2\u003e\u003cp\u003eThere is a chance that ARIA, which is authored inaccurately, will actually function as intended with assistive technology. While \u003cstrong\u003eI do not recommend betting on this fact to do your work\u003c/strong\u003e, I do think it is worth mentioning when it comes to things like debugging.\u003c/p\u003e\u003cp\u003eThis is due to the wide range of familiarity there is with people who author ARIA.\u003c/p\u003e\u003cp\u003eSome of the more mature assistive technology vendors try to accommodate the lower end of this familiarity. This is done in order to \u003cstrong\u003ebetter enable the people who use their software to actually get what they need\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eThere isn’t an exhaustive list of what accommodations each piece of assistive technology has. Think of it like \u003ca href=\"https://quandyfactory.com/blog/39/the_virtue_of_forgiving_html_parsers\"\u003ethe forgiving nature of a browser’s HTML parser\u003c/a\u003e, where \u003cstrong\u003ethe ultimate goal is to render content for humans\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"aria-label-is-tricky\"\u003e\u003ccode\u003earia-label\u003c/code\u003e Is Tricky\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://w3c.github.io/aria/#aria-label\"\u003e\u003ccode\u003earia-label\u003c/code\u003e\u003c/a\u003e is one of the most common ARIA declarations you’ll run across. It’s also one of the most misused.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://benmyers.dev/blog/dont-use-aria-label-on-static-text-elements/\"\u003e\u003ccode\u003earia-label\u003c/code\u003e can’t be applied to non-interactive HTML elements\u003c/a\u003e, but oftentimes is. It \u003ca href=\"https://adrianroselli.com/2019/11/aria-label-does-not-translate.html\"\u003ecan’t always be translated\u003c/a\u003e and is oftentimes \u003ca href=\"https://ericwbailey.website/published/what-they-dont-tell-you-when-you-translate-your-app/#you%E2%80%99ll-need-to-translate-%2F-localize-more-than-you-think-you-will\"\u003eoverlooked for localization efforts\u003c/a\u003e. Additionally, it can make things frustrating to operate for people who use voice control software, where the visible label differs from what the underlying code uses.\u003c/p\u003e\u003cp\u003eAnother problem is when it overrides an interactive element’s pre-existing accessible name. For example:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- Don\u0026#39;t do this --\u0026gt;\n\u0026lt;a \n  aria-label=\u0026#34;Our services\u0026#34;\n  href=\u0026#34;/services/\u0026#34;\u0026gt;\n  Services\n\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is a violation of \u003ca href=\"https://www.w3.org/WAI/WCAG21/Understanding/label-in-name.html\"\u003eWCAG Success Criterion 2.5.3: Label in Name\u003c/a\u003e, pure and simple. I have also seen it used as a way to provide a \u003ca href=\"https://adrianroselli.com/2019/10/stop-giving-control-hints-to-screen-readers.html\"\u003econtrol hint\u003c/a\u003e. This is also a WCAG failure, in addition to being an antipattern:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- Also don\u0026#39;t do this --\u0026gt;\n\u0026lt;a \n  aria-label=\u0026#34;Click this link to learn more about our unique and valuable services\u0026#34;\n  href=\u0026#34;/services/\u0026#34;\u0026gt;\n  Services\n\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThese factors — along with other considerations — are why I consider \u003ca href=\"https://ericwbailey.website/published/aria-label-is-a-code-smell/\"\u003e\u003ccode\u003earia-label\u003c/code\u003e a code smell\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"aria-live-is-even-trickier\"\u003e\u003ccode\u003earia-live\u003c/code\u003e Is Even Trickier\u003c/h2\u003e\u003cp\u003eLive region announcements are \u003ca href=\"https://w3c.github.io/aria/#aria-live\"\u003epowered by \u003ccode\u003earia-live\u003c/code\u003e\u003c/a\u003e and are an important part of communicating updates to an experience to people who use screen readers.\u003c/p\u003e\u003cp\u003eBelieve me when I say that getting \u003ccode\u003earia-live\u003c/code\u003e to work properly is tricky, even under the best of scenarios. I won’t belabor the specifics here. Instead, I’ll point you to \u003ca href=\"https://tetralogical.com/blog/2024/05/01/why-are-my-live-regions-not-working/\"\u003e“Why are my live regions not working?”\u003c/a\u003e, a fantastic and comprehensive article published by TetraLogical.\u003c/p\u003e\u003ch2 id=\"the-aria-authoring-practices-guide-can-lead-you-astray\"\u003eThe ARIA Authoring Practices Guide Can Lead You Astray\u003c/h2\u003e\u003cp\u003eAlso referred to as the APG, the \u003ca href=\"https://www.w3.org/WAI/ARIA/apg/\"\u003eARIA Authoring Practices Guide\u003c/a\u003e should be treated with a decent amount of caution.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/15-apg-caution.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"463\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/15-apg-caution.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/15-apg-caution.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/15-apg-caution.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/15-apg-caution.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/15-apg-caution.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/15-apg-caution.png\" sizes=\"100vw\" alt=\"A screenshot of the ARIA Authoring Practices Guide homepage, with a yellow caution tape placed across it.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/15-apg-caution.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"the-downsides\"\u003eThe Downsides\u003c/h3\u003e\u003cp\u003eThe guide was originally authored to help demonstrate ARIA’s capabilities. As a result, \u003cstrong\u003eits code examples near-exclusively, overwhelmingly, and disproportionately favor ARIA\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eUnfortunately, the APG’s latest redesign also makes it far more approachable-looking than its surrounding W3C documentation. This is coupled with \u003ca href=\"https://www.w3.org/WAI/ARIA/apg/patterns/\"\u003edemonstrating UI patterns\u003c/a\u003e in a way that signals it’s a self-serve resource whose code can be used out of the box.\u003c/p\u003e\u003cp\u003eThese factors create a scenario where people assume everything can be used as presented. This is \u003cstrong\u003enot true\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eRecall that just because ARIA is listed in the spec \u003ca href=\"#just-because-it-exists-in-the-aria-spec-does-not-mean-assistive-technology-will-support-it\"\u003edoes not necessarily guarantee it is supported\u003c/a\u003e. Adrian Roselli writes about this in detail in his post, \u003ca href=\"https://adrianroselli.com/2023/04/no-apgs-support-charts-are-not-can-i-use-for-aria.html\"\u003e“No, APG’s Support Charts Are Not ‘Can I Use’ for ARIA”\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAlso, remember \u003ca href=\"https://www.w3.org/TR/using-aria/#firstrule\"\u003ethe first rule of ARIA\u003c/a\u003e and know that \u003ca href=\"#aria-has-rules-for-using-it\"\u003ean ARIA-first approach is counter to the specification’s core philosophy of use\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn my experience, this has led to developers assuming they can copy-paste code examples or reference how it’s structured in their own efforts, and everything will just work. This leads to mass frustration:\u003c/p\u003e\u003cul\u003e\u003cli\u003eDigital accessibility practitioners have to explain that “doing the right thing” isn’t going to work as intended.\u003c/li\u003e\u003cli\u003eDevelopers then have to revisit their work to update it.\u003c/li\u003e\u003cli\u003eMost importantly, people who rely on assistive technology risk not being able to use something.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis is to say nothing about things like timelines and resourcing, working relationships, reputation, and brand perception.\u003c/p\u003e\u003ch3 id=\"the-upside\"\u003eThe Upside\u003c/h3\u003e\u003cp\u003eThe APG’s main strength is \u003cstrong\u003ehighlighting what keyboard keypresses people will expect to work\u003c/strong\u003e on each pattern.\u003c/p\u003e\u003cp\u003eConsider \u003ca href=\"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/#keyboardinteraction\"\u003ethe listbox pattern\u003c/a\u003e. It details keypresses you may expect (arrow keys, \u003ckbd\u003eSpace\u003c/kbd\u003e, and \u003ckbd\u003eEnter\u003c/kbd\u003e), as well as less-common ones (\u003ca href=\"https://en.wikipedia.org/wiki/Typeahead\"\u003etypeahead\u003c/a\u003e selection and making multiple selections). Here, we need to \u003ca href=\"#the-spirit-of-aria-reflects-the-era-in-which-it-was-created\"\u003eremember that ARIA is based on the Windows XP era\u003c/a\u003e. The keyboard-based interaction the APG suggests is built from the muscle memory established from the UI patterns used on this operating system.\u003c/p\u003e\u003cp\u003eWhile your tree view component may look visually different from the one on your operating system, \u003ca href=\"https://github.blog/engineering/user-experience/considerations-for-making-a-tree-view-component-accessible/#start-with-windows\"\u003epeople will expect it to be keyboard operable in the same way\u003c/a\u003e. Honoring this expectation will go a long way to \u003cstrong\u003eensuring your experiences are not only accessible but also intuitive and efficient to use\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eAnother strength of the APG is giving \u003ca href=\"https://www.w3.org/WAI/ARIA/apg/patterns/\"\u003estandardized, centralized names to UI patterns\u003c/a\u003e. Is it a dropdown? A listbox? A combobox? A select menu? \u003ca href=\"https://adrianroselli.com/2020/03/stop-using-drop-down.html\"\u003eSomething else\u003c/a\u003e?\u003c/p\u003e\u003cp\u003eWhen it comes to digital accessibility, these terms all have specific meanings, as well as expectations that come with them. Having a common vocabulary when discussing how an experience should work goes a long way to \u003cstrong\u003eensuring everyone will be on the same page\u003c/strong\u003e when it comes time to make and maintain things.\u003c/p\u003e\u003ch2 id=\"macos-voiceover-can-also-lead-you-astray\"\u003emacOS VoiceOver Can Also Lead You Astray\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://support.apple.com/guide/voiceover/welcome/mac\"\u003eVoiceOver on macOS\u003c/a\u003e has been \u003ca href=\"https://www.applevis.com/forum/macos-mac-apps/state-screen-readers-macos\"\u003eexperiencing a lot of problems\u003c/a\u003e over the last few years. If I could wager a guess as to why this is, as an outsider, it is that Apple’s priorities are \u003ca href=\"https://www.apple.com/visionos/visionos-2/\"\u003efocused elsewhere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThe bulk of web development efforts are conducted on macOS. This means that well-intentioned developers will reach for VoiceOver, as it comes bundled with macOS and is therefore more convenient. However, macOS VoiceOver usage has a drastic minority share for desktops and laptops. It is under 10% of usage, with Windows-based JAWS and NVDA occupying a combined 78.2% majority share:\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://webaim.org/projects/screenreadersurvey10/#primary\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"526\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/16-webaim-pie-chart.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/16-webaim-pie-chart.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/16-webaim-pie-chart.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/16-webaim-pie-chart.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/16-webaim-pie-chart.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/16-webaim-pie-chart.png\" sizes=\"100vw\" alt=\"A pie chart. The legend of the pie chart reads, “JAWS, 40.5%”, “NVDA, 37.7%”, “VoiceOver, 9.7%”, “SuperNova, 3.7%”, “ZoomText, 207%”, “Orca, 2.4%”, “Narrator, 0.7%”, and “Other, 2.7%.” Cropped screenshot.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eImage source: \u003ca href=\"https://webaim.org/projects/screenreadersurvey10/#primary\"\u003eWebAIM Screen Reader User Survey #10\u003c/a\u003e. (\u003ca href=\"https://files.smashing.media/articles/what-i-wish-someone-told-me-aria/16-webaim-pie-chart.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"the-problem\"\u003eThe Problem\u003c/h3\u003e\u003cp\u003eThe sad, sorry truth of the matter is that macOS VoiceOver, in its current state, has a lot of problems. It should only be used to confirm that it can operate the experience the way Windows-based screen readers can.\u003c/p\u003e\u003cp\u003eThis means testing on Windows with NVDA or JAWS will \u003cstrong\u003ecreate an experience that is far more accurate to what most people who use screen readers on a laptop or desktop will experience\u003c/strong\u003e.\u003c/p\u003e\u003ch3 id=\"dealing-with-the-problem\"\u003eDealing With The Problem\u003c/h3\u003e\u003cp\u003eBecause of this situation, I heavily encourage a workflow that involves:\u003c/p\u003e\u003col\u003e\u003cli\u003eCreating an experience’s underlying markup,\u003c/li\u003e\u003cli\u003eTesting it with NVDA or JAWS to set up baseline expectations,\u003c/li\u003e\u003cli\u003eTesting it with macOS VoiceOver to identify what doesn’t work as expected.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eMost of the time, I find myself having to \u003ca href=\"#declaring-an-aria-role-on-something-that-already-uses-that-role-implicitly-does-not-make-it-extra-accessible\"\u003edeclare redundant ARIA on the semantic HTML I write\u003c/a\u003e in order to address missed expected announcements for macOS VoiceOver.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003emacOS VoiceOver testing is still important to do\u003c/strong\u003e, as it is not the fault of the person who uses macOS VoiceOver to get what they need, and we should ensure they can still have access.\u003c/p\u003e\u003cp\u003eYou can use apps like \u003ca href=\"https://www.virtualbox.org/\"\u003eVirtualBox\u003c/a\u003e and \u003ca href=\"https://www.microsoft.com/en-us/evalcenter/evaluate-windows-11-enterprise\"\u003eWindows evaluation Virtual Machines\u003c/a\u003e to use Windows in your macOS development environment. Services like \u003ca href=\"https://assistivlabs.com/\"\u003eAssistivLabs\u003c/a\u003e also make on-demand, preconfigured testing easy.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eWhat About iOS VoiceOver?\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eDespite sharing the same name, \u003ca href=\"https://support.apple.com/guide/iphone/turn-on-and-practice-voiceover-iph3e2e415f/ios\"\u003eVoiceOver on iOS\u003c/a\u003e is a completely different animal. As software, it is separate from its desktop equivalent and also enjoys \u003ca href=\"https://webaim.org/projects/screenreadersurvey10/#mobileplatforms\"\u003ea whopping 70.6% usage share\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWith this knowledge, know that it’s also important to \u003cstrong\u003etest the ARIA you write on mobile\u003c/strong\u003e to make sure it works as intended.\u003c/p\u003e\u003ch2 id=\"you-can-style-aria\"\u003eYou Can Style ARIA\u003c/h2\u003e\u003cp\u003eARIA attributes can be targeted via CSS the way other HTML attributes can. Consider this HTML markup for the main navigation portion of a small e-commerce site:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;nav aria-label=\u0026#34;Main\u0026#34;\u0026gt;\n  \u0026lt;ul\u0026gt;\n    \u0026lt;li\u0026gt;\n      \u0026lt;a href=\u0026#34;/home/\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\n      \u0026lt;a href=\u0026#34;/products/\u0026#34;\u0026gt;Products\u0026lt;/a\u0026gt;\n      \u0026lt;a aria-current=\u0026#34;true\u0026#34; href=\u0026#34;/about-us/\u0026#34;\u0026gt;About Us\u0026lt;/a\u0026gt;\n      \u0026lt;a href=\u0026#34;/contact/\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt;\n    \u0026lt;/li\u0026gt;\n  \u0026lt;/ul\u0026gt;\n\u0026lt;/nav\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe presence of \u003ccode\u003earia-current=\u0026#34;true\u0026#34;\u003c/code\u003e on the “About Us” link will tell assistive technology to \u003ca href=\"https://tink.uk/using-the-aria-current-attribute/\"\u003eannounce that it is the current part of the site someone is on\u003c/a\u003e if they are navigating through the main site navigation.\u003c/p\u003e\u003cp\u003eWe can also tie that indicator of being the current part of the site into something that is shown visually. Here’s how you can target the attribute in CSS:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003enav[aria-label=\u0026#34;Main\u0026#34;] [aria-current=\u0026#34;true\u0026#34;] {\n  border-bottom: 2px solid #ffffff;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is \u003cstrong\u003ean incredibly powerful way to\u003c/strong\u003e \u003ca href=\"https://css-tricks.com/user-facing-state/\"\u003e\u003cstrong\u003etie application state to user-facing state\u003c/strong\u003e\u003c/a\u003e. Combine it with modern CSS like \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:has\"\u003e\u003ccode\u003e:has()\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://developer.chrome.com/docs/web-platform/view-transitions\"\u003eview transitions\u003c/a\u003e and you have the ability to create robust, sophisticated UI with less reliance on JavaScript.\u003c/p\u003e\u003ch2 id=\"you-can-also-use-aria-when-writing-ui-tests\"\u003eYou Can Also Use ARIA When Writing UI Tests\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Software_testing\"\u003eTests\u003c/a\u003e are great. They help guarantee that the code you work on will continue to do what you intended it to do.\u003c/p\u003e\u003cp\u003eA lot of web UI-based testing will use the presence of classes (e.g., \u003ccode\u003e.is-expanded\u003c/code\u003e) or data attributes (ex, \u003ccode\u003edata-expanded\u003c/code\u003e) to verify a UI’s existence, position and states. These types of selectors also have a far greater likelihood to be changed as time goes on when compared to semantic code and ARIA declarations.\u003c/p\u003e\u003cp\u003eThis is something my coworker Cam McHenry touches on in his great post, \u003ca href=\"https://camchenry.com/blog/how-i-write-accessible-playwright-tests\"\u003e“How I write accessible Playwright tests”\u003c/a\u003e. Consider this piece of \u003ca href=\"https://playwright.dev/\"\u003ePlaywright\u003c/a\u003e code, which checks for the presence of a button that toggles open an edit menu:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e// Selects an element with a role of `button` \n// that has an accessible name of \u0026#34;Edit\u0026#34;\nconst editMenuButton = await page.getByRole(\u0026#39;button\u0026#39;, { name: \u0026#34;Edit\u0026#34; });\n\n// Requires the edit button to have a property \n// of `aria-haspopup` with a value of `true`\nexpect(editMenuButton).toHaveAttribute(\u0026#39;aria-haspopup\u0026#39;, \u0026#39;true\u0026#39;);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe test selects UI based on outcome rather than appearance. That’s \u003cstrong\u003ea far more reliable way to target things in the long-term\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eThis all helps to create a virtuous feedback cycle. It enshrines semantic HTML and ARIA’s presence in your front-end UI code, which helps to guarantee accessible experiences don’t regress. Combining this with styling, you have a \u003cstrong\u003epowerful, self-contained system for building robust, accessible experiences\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"aria-is-ultimately-about-caring-about-people\"\u003eARIA Is Ultimately About Caring About People\u003c/h2\u003e\u003cp\u003eWeb accessibility can be about enabling important things like scheduling medical appointments. It is also about fun things like chatting with your friends. It’s also used for every web experience that lives in between.\u003c/p\u003e\u003cp\u003eUsing semantic HTML — supplemented with a judicious application of ARIA — helps you enable these experiences. To sum things up, ARIA:\u003c/p\u003e\u003cul\u003e\u003cli\u003eHas been around for a long time, and its spirit reflects the era in which it was first created;\u003c/li\u003e\u003cli\u003eHas a governing taxonomy, vocabulary, and rules for use and is declared in the same way HTML attributes are;\u003c/li\u003e\u003cli\u003eIs mostly used for dynamically updating things, controlled via JavaScript;\u003c/li\u003e\u003cli\u003eHas highly specific use cases in mind for each of its roles;\u003c/li\u003e\u003cli\u003eFails silently if mis-authored;\u003c/li\u003e\u003cli\u003eOnly exposes the presence of something to assistive technology and does not confer interactivity;\u003c/li\u003e\u003cli\u003eRequires input from the web browser, but also the operating system, in order for assistive technology to use it;\u003c/li\u003e\u003cli\u003eHas a range of actual support, complicated by the more of it you use;\u003c/li\u003e\u003cli\u003eHas some things to watch out for, namely \u003ccode\u003earia-label\u003c/code\u003e, the ARIA Authoring Practices Guide, and macOS VoiceOver support;\u003c/li\u003e\u003cli\u003eCan also be used for things like visual styling and writing resilient tests;\u003c/li\u003e\u003cli\u003eIs best evaluated by using actual assistive technology.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eViewed one way, ARIA is arcane, full of misconceptions, and fraught with potential missteps. Viewed another, ARIA is a beautiful and elegant way to programmatically communicate the interactivity and state of a user interface.\u003c/p\u003e\u003cp\u003eI choose the second view. At the end of the day, using ARIA helps to \u003cstrong\u003eensure that disabled people can use a web experience the same way everyone else can\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003e\u003cem\u003eThank you to \u003ca href=\"https://adrianroselli.com/\"\u003eAdrian Roselli\u003c/a\u003e and \u003ca href=\"https://janmaarten.com/\"\u003eJan Maarten\u003c/a\u003e for their feedback.\u003c/em\u003e\u003c/p\u003e\u003ch3 id=\"further-reading\"\u003eFurther Reading\u003c/h3\u003e\u003cul\u003e\u003cli\u003e“\u003ca href=\"https://www.lullabot.com/articles/what-heck-aria-beginners-guide-aria-accessibility\"\u003eWhat the Heck is ARIA? A Beginner’s Guide to ARIA for Accessibility\u003c/a\u003e,” Kat Shaw\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://www.smashingmagazine.com/2015/03/web-accessibility-with-accessibility-api/\"\u003eAccessibility APIs: A Key To Web Accessibility\u003c/a\u003e,” Léonie Watson \u0026amp; Chaals McCathie Nevile\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://alistapart.com/article/semantics-to-screen-readers/\"\u003eSemantics to Screen Readers\u003c/a\u003e,” Melanie Richards\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://www.tpgi.com/what-aria-does-not-do/\"\u003eWhat ARIA does not do\u003c/a\u003e,” Steve Faulkner\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://html5accessibility.com/stuff/2024/07/15/what-aria-still-does-not-do/\"\u003eWhat ARIA still does not do\u003c/a\u003e,” stevef\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://www.deque.com/blog/apg-support-tables-why-they-matter/\"\u003eAPG support tables — why they matter\u003c/a\u003e,” Michael Fairchild\u003c/li\u003e\u003cli\u003e“\u003ca href=\"https://adrianroselli.com/2023/02/aria-vs-html.html\"\u003eARIA vs HTML\u003c/a\u003e,” Adrian Roselli\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(gg, yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "46 min read",
  "publishedTime": "2025-06-16T13:00:00Z",
  "modifiedTime": "2025-06-16T13:00:00Z"
}
