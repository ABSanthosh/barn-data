{
  "id": "f86e1abf-9c28-421a-8fa6-a510b7df100f",
  "title": "Designing Scroll Behavior: When to Save a User’s Place",
  "link": "https://www.nngroup.com/articles/saving-scroll-position/?utm_source=rss\u0026utm_medium=feed\u0026utm_campaign=rss-syndication",
  "description": "Save scroll position when users are likely to compare content in a long static list.",
  "author": "Megan Chan",
  "published": "Fri, 11 Jul 2025 17:00:00 +0000",
  "source": "https://www.nngroup.com/feed/rss/",
  "categories": [
    "Article"
  ],
  "byline": "Megan Chan",
  "length": 8536,
  "excerpt": "Save scroll position when users are likely to compare content in a long static list.",
  "siteName": "Nielsen Norman Group",
  "favicon": "",
  "text": "Summary:  Save scroll position when users are likely to compare content in a long static list. One of the fastest ways to frustrate a user is by losing their progress. Imagine this: you scroll, scroll, scroll down a long list…click…read, and hit the Back button, only to land back at the top of the list instead of where you left off. It’s a small moment, but failing to save scroll position increases the interaction cost of using sites with long pages. Most of the time, saving scroll position reduces user effort. That being said, there’s no always in UX. It is important to consider user intent, and there are a few cases where saving scroll position is not the right choice. Understanding Scroll Behavior Save Scroll Position Almost Always Exceptions for Saving Scroll Position When User Intent May Vary, Choose the Least Disruptive Default Conclusion Pogo sticking refers to the pattern of navigating back and forth between a routing page (usually, a list such as a search-results page or a list of products) to a page deeper in the site’s hierarchy, linked from that routing page (for example, a product page). It happens a lot when people visit news aggregators or ecommerce product-listing pages, and it’s also one of the common cases when people lose their spot on the page. That’s because when users navigate back to the routing page, the page often resets to the top of the list, forcing the user to scroll and scan again to return to their original position. In a recent study, a participant was browsing podcast episodes in the Spotify app. He scrolled down past episodes that he had already listened to, looking for a new one. After the participant clicked on an episode to check out the details, he decided that he wanted to go back and continue browsing. However, he was returned to the top of the list, which meant that he had to scroll down again to find his place. This design unnecessarily increased interaction cost.   Spotify did not preserve the user’s scroll position when he was browsing podcast episodes. The participant returning from an episode’s details page had to scroll down to find his place in the episode list.   To work around this issue, many (but not all) users use page parking — opening items in new tabs. However, this technique is not always available, either because using tabs is cumbersome or even unavailable (e.g., in a mobile app), or the user may not be aware of it. Instead of forcing users to rely on workarounds like page parking, we can reduce friction by saving their scroll position. In most cases, preserving scroll position is the right choice as it minimizes interaction cost. When it’s not saved, simple tasks like shopping, reading, or choosing a podcast become more tedious than necessary. Saving scroll position is helpful when users come back to the page during the same session, and the page content has not changed.   On ecommerce sites, users typically browse products across categories. They may click into several items to compare sizes, prices, and reviews. Muji saved scroll position as the user switched between the product-listing page and product-detail pages. It’s the same as with pagination. Users expect to return to the same page they were on while browsing a paginated list. If the user clicks into an item on page 8 and then returns to the list, they should not land back on page 1.   After viewing an item’s details, Ravelry brought the user back to the same page they left, page 8. While saving a user’s place is often the right choice, there are some cases where it is more helpful to reset the scroll position. To determine the best design for scroll behavior, consider the context: the type of content that is being shown, how often it updates, and what the user is trying to accomplish. Reset Scroll Position When the Content Is Frequently Updated If the content has been updated since the user last viewed the page, saving their old scroll position may cause them to be placed in an outdated or irrelevant part of the list. This can be particularly problematic in real-time or fast-changing sites. For example, during a political debate or a live sports event, updates are posted constantly as the event unfolds. If a user returns to the same scroll position after stepping away, they might miss important developments that have occurred since they left.   The Score, a sport-news app, reset the scroll position when the user returned to the chat. A scroll animation moved the newest messages into view. When important, timely updates occur, automatically resetting the scroll position helps surface the newest content for users right away. When resetting the scroll position, use a clear visual indicator to show that the content has changed and the scroll position has reset. TheScore’s app uses a scroll animation that brings the latest chat messages into view. The animation communicates to the user that they are seeing new content and helps them stay oriented. Reset Scroll Position When Too Much Time Has Passed Saving scroll position works best when users return shortly after leaving a page, while their mental context is still fresh. However, as time passes, the mental anchor that helped them remember their place begins to fade. Therefore, saving scroll position should only apply in individual sessions — roughly up to 30–60 minutes after the last user action. Users who return after hours, days, or even weeks may not remember where they left off or why they were there. In these cases, dropping them back into a deep scroll position risks confusion: Why am I halfway down this list? What was I looking for? Refreshing the page and sending users to the top helps reestablish context and gives them a clean starting point after the session has ended. On mobile, users often leave tabs open for long periods of time. When users return to the tab long after their session ends, it’s likely they intend to start over rather than pick up where they left off. Multiple tabs have been left open on Google Chrome. When users return after time has passed, these pages reload instead of saving the scroll position. This reset helps users regain context, especially if the content has changed or if they forgot their original intent. When User Intent May Vary, Choose the Least Disruptive Default Sometimes, users want to pick up exactly where they left off on a page. Other times, they need the page to refresh so they can view the most recent content right away. It’s important to understand user intent when designing interactions, since what works well in one scenario can cause annoyance in another. In cases when user intent varies, choose the lowest-friction default. Typically, that means saving the scroll position and offering an easy way to reset the position if users prefer so. Take ChatGPT: A user might scan up through their current conversation and, as they’re doing so, switch conversations to confirm a fact or look something up, then return to the chat to continue their train of thought. In that case, saving the scroll position would reduce friction. Or, the user may come back and want to ask a new question, in which case, seeing the latest bot-message and the chat box might be more helpful.   It’s hard to say which of the two designs would be best for a particular context. In such situations, the solution is to choose the least disruptive design. In the case of ChatGPT, this design would preserve the last scroll position and would offer users a persistent chat box or a Jump to Latest Message button that would allow them to quickly navigate to the end of the conversation. (This, unfortunately, is not the current design used by ChatGPT. The scroll position is not saved when the user returns to a conversation, even though the chat box is persistent.)   ChatGPT reset the scroll position to the end of the conversation when the user switched between chats. This design is more disruptive than saving the user’s last scroll position within the conversation and enabling them to quickly access the newest message by clicking on the persistent chatbox or on a Jump to Latest Message button.   Conclusion Scroll position is a small UX detail that shapes the experience. You might not notice it when it works, but you definitely notice it when it doesn’t. Like all UX decisions, scroll behavior should be guided by context. A thoughtful approach to scroll behavior can make the difference between a frustrating experience and an efficient one.",
  "image": "https://media.nngroup.com/media/articles/opengraph_images/Scroll_Behavior_Opengraph_copy_4.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\u003cspan\u003e\n                  Summary: \n                \u003c/span\u003eSave scroll position when users are likely to compare content in a long static list.\n              \u003c/p\u003e\u003cdiv\u003e\n              \u003cp\u003eOne of the fastest ways to frustrate a user is by losing their progress. Imagine this: you scroll, scroll, scroll down a long list…click…read, and hit the \u003cem\u003eBack\u003c/em\u003e button, only to land back at the top of the list instead of where you left off.\u003c/p\u003e\n\u003cp\u003eIt’s a small moment, but failing to save scroll position increases the \u003ca href=\"https://www.nngroup.com/articles/interaction-cost-definition/\"\u003einteraction cost\u003c/a\u003e of using sites with long pages. Most of the time, saving scroll position reduces user effort.\u003c/p\u003e\n\u003cp\u003eThat being said, there’s no \u003cem\u003ealways \u003c/em\u003ein\u003cem\u003e \u003c/em\u003eUX. It is important to consider user intent, and there are a few cases where saving scroll position is not the right choice.\u003c/p\u003e\n\u003cdiv\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"#toc-understanding-scroll-behavior-1\"\u003eUnderstanding Scroll Behavior\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#toc-save-scroll-position-almost-always-2\"\u003eSave Scroll Position Almost Always\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#toc-exceptions-for-saving-scroll-position-3\"\u003eExceptions for Saving Scroll Position\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#toc-when-user-intent-may-vary-choose-the-least-disruptive-default-4\"\u003eWhen User Intent May Vary, Choose the Least Disruptive Default\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#toc-conclusion-5\"\u003eConclusion\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cp\u003e\u003ca href=\"https://www.nngroup.com/articles/pogo-sticking/\"\u003ePogo sticking\u003c/a\u003e refers to the pattern of navigating back and forth between a routing page (usually, a list such as a search-results page or a list of products) to a page deeper in the site’s hierarchy, linked from that routing page (for example, a product page). It happens a lot when people visit news aggregators or ecommerce product-listing pages, and it’s also one of the common cases when people lose their spot on the page. That’s because when users navigate back to the routing page, the page often resets to the top of the list, forcing the user to scroll and scan again to return to their original position.\u003c/p\u003e\n\u003cp\u003eIn a recent study, a participant was browsing podcast episodes in the Spotify app. He scrolled down past episodes that he had already listened to, looking for a new one. After the participant clicked on an episode to check out the details, he decided that he wanted to go back and continue browsing. However, he was returned to the top of the list, which meant that he had to scroll down again to find his place. This design unnecessarily increased interaction cost.\u003c/p\u003e\n\u003cfigure\u003e\n\u003cvideo controls=\"controls\" poster=\"https://media.nngroup.com/media/editor/2025/06/30/spotify_thumbnail.png\" src=\"https://media.nngroup.com/media/editor/2025/06/30/spotify_resets.mp4\" title=\"\" width=\"692\"\u003e \u003c/video\u003e\n\u003cfigcaption\u003e\u003cem\u003eSpotify did not preserve the user’s scroll position when he was browsing podcast episodes. The participant returning from an episode’s details page had to scroll down to find his place in the episode list. \u003c/em\u003e \u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003eTo work around this issue, many (but not all) users use \u003ca href=\"https://www.nngroup.com/articles/multi-tab-page-parking/\"\u003epage parking\u003c/a\u003e — opening items in new tabs. However, this technique is not always available, either because using tabs is cumbersome or even unavailable (e.g., in a mobile app), or the user may not be aware of it. Instead of forcing users to rely on workarounds like page parking, we can reduce friction by saving their scroll position.\u003c/p\u003e\n\n\u003cp\u003eIn most cases, preserving scroll position is the right choice as it minimizes interaction cost. When it’s not saved, simple tasks like shopping, reading, or choosing a podcast become more tedious than necessary.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSaving scroll position is helpful when users come back to the page during the same session, and the page content has not changed.\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\n\u003cvideo controls=\"controls\" poster=\"https://media.nngroup.com/media/editor/2025/06/30/muji_thumbnail.png\" src=\"https://media.nngroup.com/media/editor/2025/06/30/muji_saves_scroll.mp4\" title=\"\" width=\"692\"\u003e \u003c/video\u003e\n\u003cfigcaption\u003e\u003cem\u003eOn ecommerce sites, users typically browse\u003c/em\u003e\u003cem\u003e products across categories. They may click into several items to compare sizes, prices, and reviews. Muji saved scroll position as the user switched between the product-listing page and product-detail pages.\u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003eIt’s the same as with \u003ca href=\"https://www.nngroup.com/articles/alternatives-pagination-listing-pages/\"\u003epagination\u003c/a\u003e. Users expect to return to the same page they were on while browsing a paginated list. If the user clicks into an item on page 8 and then returns to the list, they should not land back on page 1.\u003c/p\u003e\n\u003cfigure\u003e\n\u003cvideo controls=\"controls\" poster=\"https://media.nngroup.com/media/editor/2025/06/30/pagination_thumbnail.png\" src=\"https://media.nngroup.com/media/editor/2025/06/30/ravelry_pagination_article.mp4\" title=\"\" width=\"692\"\u003e \u003c/video\u003e\n\u003cfigcaption\u003e\u003cem\u003eAfter viewing an item’s details, Ravelry brought the user back to the same page they left, page 8. \u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eWhile saving a user’s place is often the right choice, there are some cases where it is more helpful to reset the scroll position. To determine the best design for scroll behavior, consider the context: the type of content that is being shown, how often it updates, and what the user is trying to accomplish.\u003c/p\u003e\n\u003ch3\u003eReset Scroll Position When the Content Is Frequently Updated\u003c/h3\u003e\n\u003cp\u003eIf the content has been updated since the user last viewed the page, saving their old scroll position may cause them to be placed in an outdated or irrelevant part of the list. This can be particularly problematic in real-time or fast-changing sites.\u003c/p\u003e\n\u003cp\u003eFor example, during a political debate or a live sports event, updates are posted constantly as the event unfolds. If a user returns to the same scroll position after stepping away, they might miss important developments that have occurred since they left.\u003c/p\u003e\n\u003cfigure\u003e\n\u003cvideo controls=\"controls\" poster=\"https://media.nngroup.com/media/editor/2025/06/30/thescore_thumbnail.png\" src=\"https://media.nngroup.com/media/editor/2025/06/30/thescore.mp4\" title=\"\" width=\"350\"\u003e \u003c/video\u003e\n\u003cfigcaption\u003e\u003cem\u003eThe Score, a sport-news app, reset the scroll position when the user returned to the chat. A scroll animation moved the newest messages into view.\u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003eWhen important, timely updates occur, automatically resetting the scroll position helps surface the newest content for users right away.\u003c/p\u003e\n\u003cp\u003eWhen resetting the scroll position, \u003cstrong\u003euse a clear visual indicator to show that the content has changed and the scroll position has reset.\u003c/strong\u003e TheScore’s app uses a scroll \u003ca href=\"https://www.nngroup.com/articles/animation-purpose-ux/\"\u003eanimation\u003c/a\u003e that brings the latest chat messages into view. The animation communicates to the user that they are seeing new content and helps them stay oriented.\u003c/p\u003e\n\u003ch3\u003eReset Scroll Position When Too Much Time Has Passed\u003c/h3\u003e\n\u003cp\u003eSaving scroll position works best when users return shortly after leaving a page, while their mental context is still fresh. However, as time passes, the mental anchor that helped them remember their place begins to fade. Therefore, saving scroll position should only apply in individual sessions — roughly up to 30–60 minutes after the last user action.\u003c/p\u003e\n\u003cp\u003eUsers who return after hours, days, or even weeks may not remember where they left off or why they were there. In these cases, dropping them back into a deep scroll position risks confusion: \u003cem\u003eWhy am I halfway down this list?\u003c/em\u003e \u003cem\u003eWhat was I looking for? \u003c/em\u003eRefreshing the page and sending users to the top helps reestablish context and gives them a clean starting point after the session has ended.\u003c/p\u003e\n\u003cp\u003eOn mobile, users often leave tabs open for long periods of time. When users return to the tab long after their session ends, it’s likely they intend to start over rather than pick up where they left off.\u003c/p\u003e\n\u003cfigure\u003e\u003cimg alt=\"iPhone Safari tab overview with 6 open tabs: Prime Video, NYT Cooking ricotta recipes, Uncle Paul’s clay shop, Hook Fish Co., FedEx tracking, and a map.\" height=\"757\" loading=\"lazy\" src=\"https://media.nngroup.com/media/editor/2025/06/30/tabs-on-mobile-1.PNG\" width=\"350\"/\u003e\n\u003cfigcaption\u003e\u003cem\u003eMultiple tabs have been left open on Google Chrome. When users return after time has passed, these pages reload instead of saving the scroll position. This reset helps users regain context, especially if the content has changed or if they forgot their original intent.\u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003ch2 id=\"toc-when-user-intent-may-vary-choose-the-least-disruptive-default-4\"\u003eWhen User Intent May Vary, Choose the Least Disruptive Default\u003c/h2\u003e\n\u003cp\u003eSometimes, users want to pick up exactly where they left off on a page. Other times, they need the page to refresh so they can view the most recent content right away. It’s important to understand user intent when designing interactions, since what works well in one scenario can cause annoyance in another. In cases when user intent varies, choose the lowest-friction default. Typically, that means \u003cstrong\u003esaving the scroll position and offering an easy way to reset the position if users prefer so. \u003c/strong\u003eTake ChatGPT: A user might scan up through their current conversation and, as they’re doing so, switch conversations to confirm a fact or look something up, then return to the chat to continue their train of thought. In that case, saving the scroll position would reduce friction.\u003c/p\u003e\n\u003cp\u003eOr, the user may come back and want to ask a new question, in which case, seeing the latest bot-message and the chat box might be more helpful.  \u003c/p\u003e\n\u003cp\u003eIt’s hard to say which of the two designs would be best for a particular context. In such situations, the solution is to choose the least disruptive design. In the case of ChatGPT, this design would preserve the last scroll position and would offer users a persistent chat box or a \u003cem\u003eJump\u003c/em\u003e to\u003cem\u003e Latest Message\u003c/em\u003e button that would allow them to quickly navigate to the end of the conversation. (This, unfortunately, is not the current design used by ChatGPT. The scroll position is not saved when the user returns to a conversation, even though the chat box is persistent.)\u003c/p\u003e\n\u003cfigure\u003e\n\u003cvideo controls=\"controls\" poster=\"https://media.nngroup.com/media/editor/2025/06/30/chatgpt_scroll_thumbnail.png\" src=\"https://media.nngroup.com/media/editor/2025/06/30/chatgpt_scroll.mp4\" title=\"\" width=\"692\"\u003e \u003c/video\u003e\n\u003cfigcaption\u003e\u003cem\u003eChatGPT reset the scroll position to the end of the conversation when the user switched between chats. This design is more disruptive than saving the user’s last scroll position within the conversation and enabling them to quickly access the newest message by clicking on the persistent chatbox or on a \u003c/em\u003eJump to Latest Message \u003cem\u003ebutton.  \u003c/em\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003ch2 id=\"toc-conclusion-5\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eScroll position is a small UX detail that shapes the experience. You might not notice it when it works, but you definitely notice it when it doesn’t.\u003c/p\u003e\n\u003cp\u003eLike all UX decisions, scroll behavior should be guided by context. A thoughtful approach to scroll behavior can make the difference between a frustrating experience and an efficient one.\u003c/p\u003e\n            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-07-11T17:00:00Z",
  "modifiedTime": null
}
