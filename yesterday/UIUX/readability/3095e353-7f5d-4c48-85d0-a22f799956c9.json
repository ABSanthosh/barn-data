{
  "id": "3095e353-7f5d-4c48-85d0-a22f799956c9",
  "title": "Smashing Animations Part 4: Optimising SVGs",
  "link": "https://smashingmagazine.com/2025/06/smashing-animations-part-4-optimising-svgs/",
  "description": "What’s the best way to make your SVGs faster, simpler, and more manageable? In this article, pioneering author and web designer Andy Clarke explains the process he relies on *to* prepare, optimise, and structure SVGs for animation and beyond.",
  "author": "Andy Clarke",
  "published": "Wed, 04 Jun 2025 08:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 12675,
  "excerpt": "What’s the best way to make your SVGs faster, simpler, and more manageable? In this article, pioneering author and web designer Andy Clarke explains the process he relies on *to* prepare, optimise, and structure SVGs for animation and beyond.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "10 min readSVG, Animation, Design, CSSWhat’s the best way to make your SVGs faster, simpler, and more manageable? In this article, pioneering author and web designer Andy Clarke explains the process he relies on to prepare, optimise, and structure SVGs for animation and beyond.SVG animations take me back to the Hanna-Barbera cartoons I watched as a kid. Shows like Wacky Races, The Perils of Penelope Pitstop, and, of course, Yogi Bear. They inspired me to lovingly recreate some classic Toon Titles using CSS, SVG, and SMIL animations.But getting animations to load quickly and work smoothly needs more than nostalgia. It takes clean design, lean code, and a process that makes complex SVGs easier to animate. Here’s how I do it.There’s now a website where you can see all my Toon Titles. (Large preview)Smashing Animations Part 1: How Classic Cartoons Inspire Modern CSSSmashing Animations Part 2: How CSS Masking Can Add An Extra DimensionSmashing Animations Part 3: SMIL’s Not Dead Baby, SMIL’s Not DeadWhether for personal projects or commercial work, preparing SVGs well ensures they’re accessible. Optimising them ensures they load quickly, especially on mobile, and thinking carefully about how they’re structured makes maintaining them easier. I’ve developed a process that balances visuals with accessibility and performance and makes complex SVGs easier to work with.So, to explain my process, I’ve chosen an episode of The Yogi Bear Show called “Bewitched Bear,” first broadcast in January 1960. In this story, Yogi steals a witch’s broom to help him grab “pic-a-nic” baskets.“Hey, hey, hey!”The Yogi Bear Show © Warner Bros. Entertainment Inc. (Large preview)Start Clean And Design With Optimisation In MindKeeping things simple is key to making SVGs that are optimised and ready to animate. Tools like Adobe Illustrator convert bitmap images to vectors, but the output often contains too many extraneous groups, layers, and masks. Instead, I start cleaning in Sketch, work from a reference image, and use the Pen tool to create paths.Tip: Affinity Designer (UK) and Sketch (Netherlands) are alternatives to Adobe Illustrator and Figma. Both are independent and based in Europe. Sketch has been my default design app since Adobe killed Fireworks.Beginning With OutlinesFor these Toon Titles illustrations, I first use the Pen tool to draw black outlines with as few anchor points as possible. The more points a shape has, the bigger a file becomes, so simplifying paths and reducing the number of points makes an SVG much smaller, often with no discernible visual difference.Left: 160 anchor points. Right: 80 points. (Large preview)Bearing in mind that parts of this Yogi illustration will ultimately be animated, I keep outlines for this Bewitched Bear’s body, head, collar, and tie separate so that I can move them independently. The head might nod, the tie could flap, and, like in those classic cartoons, Yogi’s collar will hide the joins between them.Separate outlines for body, head, collar and tie, and broom. (Large preview)Drawing Simple Background ShapesWith the outlines in place, I use the Pen tool again to draw new shapes, which fill the areas with colour. These colours sit behind the outlines, so they don’t need to match them exactly. The fewer anchor points, the smaller the file size.Left: Original vector artwork, 8 Kb. Right: Simplified using Adobe Illustrator, 2 Kb. (Large preview)Sadly, neither Affinity Designer nor Sketch has tools that can simplify paths, but if you have it, using Adobe Illustrator can shave a few extra kilobytes off these background shapes.Adobe Illustrator: Object → Path → Simplify. (Large preview)Optimising The CodeIt’s not just metadata that makes SVG bulkier. The way you export from your design app also affects file size.Vector artwork ready for optimisation. (Large preview)Exporting just those simple background shapes from Adobe Illustrator includes unnecessary groups, masks, and bloated path data by default. Sketch’s code is barely any better, and there’s plenty of room for improvement, even in its SVGO Compressor code. I rely on Jake Archibald’s SVGOMG, which uses SVGO v3 and consistently delivers the best optimised SVGs.Jake Archibald’s SVGOMG online optimisation tool. (Large preview)Layering SVG ElementsMy process for preparing SVGs for animation goes well beyond drawing vectors and optimising paths — it also includes how I structure the code itself. When every visual element is crammed into a single SVG file, even optimised code can be a nightmare to navigate. Locating a specific path or group often feels like searching for a needle in a haystack.Yogi Bear title card design by Lawrence Goble (1958). Toon Titles recreation. (Large preview)That’s why I develop my SVGs in layers, exporting and optimising one set of elements at a time — always in the order they’ll appear in the final file. This lets me build the master SVG gradually by pasting it in each cleaned-up section. For example, I start with backgrounds like this gradient and title graphic.Gradient background and title graphic. (Large preview)Instead of facing a wall of SVG code, I can now easily identify the background gradient’s path and its associated linearGradient, and see the group containing the title graphic. I take this opportunity to add a comment to the code, which will make editing and adding animations to it easier in the future:\u003csvg ...\u003e \u003cdefs\u003e \u003c!-- ... --\u003e \u003c/defs\u003e \u003cpath fill=\"url(#grad)\" d=\"…\"/\u003e \u003c!-- TITLE GRAPHIC --\u003e \u003cg\u003e \u003cpath … /\u003e \u003c!-- ... --\u003e \u003c/g\u003e \u003c/svg\u003e Trail with Gaussian Blur. (Large preview)Next, I add the blurred trail from Yogi’s airborne broom. This includes defining a Gaussian Blur filter and placing its path between the background and title layers:\u003csvg ...\u003e \u003cdefs\u003e \u003clinearGradient id=\"grad\" …\u003e…\u003c/linearGradient\u003e \u003cfilter id=\"trail\" …\u003e…\u003c/filter\u003e \u003c/defs\u003e \u003c!-- GRADIENT --\u003e \u003c!-- TRAIL --\u003e \u003cpath filter=\"url(#trail)\" …/\u003e \u003c!-- TITLE GRAPHIC --\u003e \u003c/svg\u003e Yogi Bear’s magical stars. (Large preview)Then come the magical stars, added in the same sequential fashion:\u003csvg ...\u003e \u003c!-- GRADIENT --\u003e \u003c!-- TRAIL --\u003e \u003c!-- STARS --\u003e \u003c!-- TITLE GRAPHIC --\u003e \u003c/svg\u003e To keep everything organised and animation-ready, I create an empty group that will hold all the parts of Yogi:\u003cg id=\"yogi\"\u003e...\u003c/g\u003e Sequentially adding Yogi Bear’s component parts. (Large preview)Then I build Yogi from the ground up — starting with background props, like his broom:\u003cg id=\"broom\"\u003e...\u003c/g\u003e Followed by grouped elements for his body, head, collar, and tie:\u003cg id=\"yogi\"\u003e \u003cg id=\"broom\"\u003e…\u003c/g\u003e \u003cg id=\"body\"\u003e…\u003c/g\u003e \u003cg id=\"head\"\u003e…\u003c/g\u003e \u003cg id=\"collar\"\u003e…\u003c/g\u003e \u003cg id=\"tie\"\u003e…\u003c/g\u003e \u003c/g\u003e Yogi Bear title card design by Lawrence Goble (1958). Toon Titles recreation. (Large preview)Since I export each layer from the same-sized artboard, I don’t need to worry about alignment or positioning issues later on — they’ll all slot into place automatically. I keep my code clean, readable, and ordered logically by layering elements this way. It also makes animating smoother, as each component is easier to identify.Reusing Elements With \u003cuse\u003eWhen duplicate shapes get reused repeatedly, SVG files can get bulky fast. My recreation of the “Bewitched Bear” title card contains 80 stars in three sizes. Combining all those shapes into one optimised path would bring the file size down to 3KB. But I want to animate individual stars, which would almost double that to 5KB:\u003cg id=\"stars\"\u003e \u003cpath class=\"star-small\" fill=\"#eae3da\" d=\"...\"/\u003e \u003cpath class=\"star-medium\" fill=\"#eae3da\" d=\"...\"/\u003e \u003cpath class=\"star-large\" fill=\"#eae3da\" d=\"...\"/\u003e \u003c!-- ... --\u003e \u003c/g\u003e Moving the stars’ fill attribute values to their parent group reduces the overall weight a little:\u003cg id=\"stars\" fill=\"#eae3da\"\u003e \u003cpath class=\"star-small\" d=\"…\"/\u003e \u003cpath class=\"star-medium\" d=\"…\"/\u003e \u003cpath class=\"star-large\" d=\"…\"/\u003e \u003c!-- ... --\u003e \u003c/g\u003e Yogi Bear’s sparkling stars. (Large preview)But a more efficient and manageable option is to define each star size as a reusable template:\u003cdefs\u003e \u003cpath id=\"star-large\" fill=\"#eae3da\" fill-rule=\"evenodd\" d=\"…\"/\u003e \u003cpath id=\"star-medium\" fill=\"#eae3da\" fill-rule=\"evenodd\" d=\"…\"/\u003e \u003cpath id=\"star-small\" fill=\"#eae3da\" fill-rule=\"evenodd\" d=\"…\"/\u003e \u003c/defs\u003e With this setup, changing a star’s design only means updating its template once, and every instance updates automatically. Then, I reference each one using \u003cuse\u003e and position them with x and y attributes:\u003cg id=\"stars\"\u003e \u003c!-- Large stars --\u003e \u003cuse href=\"#star-large\" x=\"1575\" y=\"495\"/\u003e \u003c!-- ... --\u003e \u003c!-- Medium stars --\u003e \u003cuse href=\"#star-medium\" x=\"1453\" y=\"696\"/\u003e \u003c!-- ... --\u003e \u003c!-- Small stars --\u003e \u003cuse href=\"#star-small\" x=\"1287\" y=\"741\"/\u003e \u003c!-- ... --\u003e \u003c/g\u003e This approach makes the SVG easier to manage, lighter to load, and faster to iterate on, especially when working with dozens of repeating elements. Best of all, it keeps the markup clean without compromising on flexibility or performance.Adding AnimationsThe stars trailing behind Yogi’s stolen broom bring so much personality to the animation. I wanted them to sparkle in a seemingly random pattern against the dark blue background, so I started by defining a keyframe animation that cycles through different opacity levels:@keyframes sparkle { 0%, 100% { opacity: .1; } 50% { opacity: 1; } } Next, I applied this looping animation to every use element inside my stars group:#stars use { animation: sparkle 10s ease-in-out infinite; } The secret to creating a convincing twinkle lies in variation. I staggered animation delays and durations across the stars using nth-child selectors, starting with the quickest and most frequent sparkle effects:/* Fast, frequent */ #stars use:nth-child(n + 1):nth-child(-n + 10) { animation-delay: .1s; animation-duration: 2s; } From there, I layered in additional timings to mix things up. Some stars sparkle slowly and dramatically, others more randomly, with a variety of rhythms and pauses:/* Medium */ #stars use:nth-child(n + 11):nth-child(-n + 20) { ... } /* Slow, dramatic */ #stars use:nth-child(n + 21):nth-child(-n + 30) { ... } /* Random */ #stars use:nth-child(3n + 2) { ... } /* Alternating */ #stars use:nth-child(4n + 1) { ... } /* Scattered */ #stars use:nth-child(n + 31) { ... } By thoughtfully structuring the SVG and reusing elements, I can build complex-looking animations without bloated code, making even a simple effect like changing opacity sparkle.Subtle movements bring Yogi Bear to life. (Large preview)Then, for added realism, I make Yogi’s head wobble:@keyframes headWobble { 0% { transform: rotate(-0.8deg) translateY(-0.5px); } 100% { transform: rotate(0.9deg) translateY(0.3px); } } #head { animation: headWobble 0.8s cubic-bezier(0.5, 0.15, 0.5, 0.85) infinite alternate; } His tie waves:@keyframes tieWave { 0%, 100% { transform: rotateZ(-4deg) rotateY(15deg) scaleX(0.96); } 33% { transform: rotateZ(5deg) rotateY(-10deg) scaleX(1.05); } 66% { transform: rotateZ(-2deg) rotateY(5deg) scaleX(0.98); } } #tie { transform-style: preserve-3d; animation: tieWave 10s cubic-bezier(0.68, -0.55, 0.27, 1.55) infinite; } His broom swings:@keyframes broomSwing { 0%, 20% { transform: rotate(-5deg); } 30% { transform: rotate(-4deg); } 50%, 70% { transform: rotate(5deg); } 80% { transform: rotate(4deg); } 100% { transform: rotate(-5deg); } } #broom { animation: broomSwing 4s cubic-bezier(0.5, 0.05, 0.5, 0.95) infinite; } And, finally, Yogi himself gently rotates as he flies on his magical broom:@keyframes yogiWobble { 0% { transform: rotate(-2.8deg) translateY(-0.8px) scale(0.998); } 30% { transform: rotate(1.5deg) translateY(0.3px); } 100% { transform: rotate(3.2deg) translateY(1.2px) scale(1.002); } } #yogi { animation: yogiWobble 3.5s cubic-bezier(.37, .14, .3, .86) infinite alternate; } All these subtle movements bring Yogi to life. By developing structured SVGs, I can create animations that feel full of character without writing a single line of JavaScript.Try this yourself:See the Pen [Bewitched Bear CSS/SVG animation [forked]](https://codepen.io/smashingmag/pen/bNdwJBN) by Andy Clarke.See the Pen Bewitched Bear CSS/SVG animation [forked] by Andy Clarke.ConclusionWhether you’re recreating a classic title card or animating icons for an interface, the principles are the same:Start clean,Optimise early, andStructure everything with animation in mind.SVGs offer incredible creative freedom, but only if kept lean and manageable. When you plan your process like a production cell — layer by layer, element by element — you’ll spend less time untangling code and more time bringing your work to life. (gg, yk)",
  "image": "https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/smashing-animations-part-4-optimising-svgs.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e10 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/svg\"\u003eSVG\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/animation\"\u003eAnimation\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/design\"\u003eDesign\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/css\"\u003eCSS\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eWhat’s the best way to make your SVGs faster, simpler, and more manageable? In this article, pioneering author and web designer \u003ca href=\"https://stuffandnonsense.co.uk/\"\u003eAndy Clarke\u003c/a\u003e explains the process he relies on \u003cem\u003eto\u003c/em\u003e prepare, optimise, and structure SVGs for animation and beyond.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eSVG animations take me back to the Hanna-Barbera cartoons I watched as a kid. Shows like \u003cem\u003eWacky Races\u003c/em\u003e, \u003cem\u003eThe Perils of Penelope Pitstop\u003c/em\u003e, and, of course, \u003ca href=\"https://en.wikipedia.org/wiki/Yogi_Bear\"\u003e\u003cem\u003eYogi Bear\u003c/em\u003e\u003c/a\u003e. They inspired me to lovingly recreate some classic \u003ca href=\"https://stuffandnonsense.co.uk/toon-titles\"\u003eToon Titles\u003c/a\u003e using CSS, SVG, and SMIL animations.\u003c/p\u003e\u003cp\u003eBut getting animations to load quickly and work smoothly needs more than nostalgia. It takes clean design, lean code, and a process that makes complex SVGs easier to animate. Here’s how I do it.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://stuffandnonsense.co.uk/toon-titles\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/1-toon-titles.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/1-toon-titles.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/1-toon-titles.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/1-toon-titles.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/1-toon-titles.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/1-toon-titles.png\" sizes=\"100vw\" alt=\"An example of Toon Titles from the website\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThere’s now a website where you can see all my \u003ca href=\"https://stuffandnonsense.co.uk/toon-titles\"\u003eToon Titles\u003c/a\u003e. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/1-toon-titles.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cdiv\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://www.smashingmagazine.com/2025/05/smashing-animations-part-1-classic-cartoons-inspire-css/\"\u003eSmashing Animations Part 1: How Classic Cartoons Inspire Modern CSS\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.smashingmagazine.com/2025/05/smashing-animations-part-2-css-masking-add-extra-dimension/\"\u003eSmashing Animations Part 2: How CSS Masking Can Add An Extra Dimension\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.smashingmagazine.com/2025/05/smashing-animations-part-3-smil-not-dead/\"\u003eSmashing Animations Part 3: SMIL’s Not Dead Baby, SMIL’s Not Dead\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cp\u003eWhether for personal projects or commercial work, preparing SVGs well ensures they’re accessible. Optimising them ensures they load quickly, especially on mobile, and thinking carefully about how they’re structured makes maintaining them easier. I’ve developed a \u003cstrong\u003eprocess that balances visuals with accessibility and performance\u003c/strong\u003e and makes complex SVGs easier to work with.\u003c/p\u003e\u003cp\u003eSo, to explain my process, I’ve chosen an episode of \u003cem\u003eThe Yogi Bear Show\u003c/em\u003e called “Bewitched Bear,” first broadcast in January 1960. In this story, Yogi steals a witch’s broom to help him grab “pic-a-nic” baskets.\u003c/p\u003e\u003cp\u003e“Hey, hey, hey!”\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/2-yogi-bear-bewitched-bear.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"540\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/2-yogi-bear-bewitched-bear.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/2-yogi-bear-bewitched-bear.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/2-yogi-bear-bewitched-bear.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/2-yogi-bear-bewitched-bear.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/2-yogi-bear-bewitched-bear.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/2-yogi-bear-bewitched-bear.png\" sizes=\"100vw\" alt=\"An illustration from the “Bewitched Bear” episode of The Yogi Bear Show where bear is on a witch’s broom\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eThe Yogi Bear Show © Warner Bros. Entertainment Inc. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/2-yogi-bear-bewitched-bear.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"start-clean-and-design-with-optimisation-in-mind\"\u003eStart Clean And Design With Optimisation In Mind\u003c/h2\u003e\u003cp\u003eKeeping things simple is key to making SVGs that are optimised and ready to animate. Tools like Adobe Illustrator convert bitmap images to vectors, but the output often contains too many extraneous groups, layers, and masks. Instead, I start cleaning in Sketch, work from a reference image, and use the Pen tool to create paths.\u003c/p\u003e\u003cblockquote\u003e\u003cstrong\u003eTip\u003c/strong\u003e: \u003ca href=\"https://affinity.serif.com/en-gb/designer/\"\u003eAffinity Designer\u003c/a\u003e (UK) and \u003ca href=\"https://www.sketch.com\"\u003eSketch\u003c/a\u003e (Netherlands) are alternatives to Adobe Illustrator and Figma. Both are independent and based in Europe. Sketch has been my default design app since Adobe killed Fireworks.\u003c/blockquote\u003e\u003ch2 id=\"beginning-with-outlines\"\u003eBeginning With Outlines\u003c/h2\u003e\u003cp\u003eFor these Toon Titles illustrations, I first use the Pen tool to draw black outlines with as few anchor points as possible. The more points a shape has, the bigger a file becomes, so simplifying paths and reducing the number of points makes an SVG much smaller, often with no discernible visual difference.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/3-outlines-anchor-points.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/3-outlines-anchor-points.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/3-outlines-anchor-points.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/3-outlines-anchor-points.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/3-outlines-anchor-points.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/3-outlines-anchor-points.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/3-outlines-anchor-points.png\" sizes=\"100vw\" alt=\"Two outlines with different anchor points\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003cstrong\u003eLeft\u003c/strong\u003e: 160 anchor points. \u003cstrong\u003eRight\u003c/strong\u003e: 80 points. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/3-outlines-anchor-points.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eBearing in mind that parts of this Yogi illustration will ultimately be animated, I keep outlines for this Bewitched Bear’s body, head, collar, and tie separate so that I can move them independently. The head might nod, the tie could flap, and, like in those classic cartoons, Yogi’s collar will hide the joins between them.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/4-separate-outlines.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/4-separate-outlines.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/4-separate-outlines.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/4-separate-outlines.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/4-separate-outlines.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/4-separate-outlines.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/4-separate-outlines.png\" sizes=\"100vw\" alt=\"Separate outlines for body, head, collar and tie, and broom.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eSeparate outlines for body, head, collar and tie, and broom. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/4-separate-outlines.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"drawing-simple-background-shapes\"\u003eDrawing Simple Background Shapes\u003c/h2\u003e\u003cp\u003eWith the outlines in place, I use the Pen tool again to draw new shapes, which fill the areas with colour. These colours sit behind the outlines, so they don’t need to match them exactly. The fewer anchor points, the smaller the file size.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/5-simple-background-shapes.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/5-simple-background-shapes.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/5-simple-background-shapes.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/5-simple-background-shapes.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/5-simple-background-shapes.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/5-simple-background-shapes.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/5-simple-background-shapes.png\" sizes=\"100vw\" alt=\"Original vector artwork and a simplified version with Adobe Illustrator\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003cstrong\u003eLeft\u003c/strong\u003e: Original vector artwork, 8 Kb. \u003cstrong\u003eRight\u003c/strong\u003e: Simplified using Adobe Illustrator, 2 Kb. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/5-simple-background-shapes.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eSadly, neither Affinity Designer nor Sketch has tools that can simplify paths, but if you have it, using Adobe Illustrator can shave a few extra kilobytes off these background shapes.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/6-adobe-illustrator-simplify-paths.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/6-adobe-illustrator-simplify-paths.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/6-adobe-illustrator-simplify-paths.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/6-adobe-illustrator-simplify-paths.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/6-adobe-illustrator-simplify-paths.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/6-adobe-illustrator-simplify-paths.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/6-adobe-illustrator-simplify-paths.png\" sizes=\"100vw\" alt=\"An illustration how to simplify paths with Adobe Illustrator\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eAdobe Illustrator: Object → Path → Simplify. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/6-adobe-illustrator-simplify-paths.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"optimising-the-code\"\u003eOptimising The Code\u003c/h2\u003e\u003cp\u003eIt’s not just metadata that makes SVG bulkier. The way you export from your design app also affects file size.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/7-vector-artwork-ready-optimisation.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/7-vector-artwork-ready-optimisation.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/7-vector-artwork-ready-optimisation.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/7-vector-artwork-ready-optimisation.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/7-vector-artwork-ready-optimisation.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/7-vector-artwork-ready-optimisation.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/7-vector-artwork-ready-optimisation.png\" sizes=\"100vw\" alt=\"Vector artwork ready for optimisation.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eVector artwork ready for optimisation. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/7-vector-artwork-ready-optimisation.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eExporting just those simple background shapes from Adobe Illustrator includes unnecessary groups, masks, and bloated path data by default. Sketch’s code is barely any better, and there’s plenty of room for improvement, even in its SVGO Compressor code. I rely on Jake Archibald’s \u003ca href=\"https://jakearchibald.github.io/svgomg/\"\u003eSVGOMG\u003c/a\u003e, which uses SVGO v3 and consistently delivers the best optimised SVGs.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/8-jake-archibald-svgomg-online-optimisation-tool.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"439\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/8-jake-archibald-svgomg-online-optimisation-tool.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/8-jake-archibald-svgomg-online-optimisation-tool.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/8-jake-archibald-svgomg-online-optimisation-tool.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/8-jake-archibald-svgomg-online-optimisation-tool.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/8-jake-archibald-svgomg-online-optimisation-tool.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/8-jake-archibald-svgomg-online-optimisation-tool.png\" sizes=\"100vw\" alt=\"Jake Archibald’s SVGOMG online optimisation tool.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eJake Archibald’s SVGOMG online optimisation tool. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/8-jake-archibald-svgomg-online-optimisation-tool.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"layering-svg-elements\"\u003eLayering SVG Elements\u003c/h2\u003e\u003cp\u003eMy process for preparing SVGs for animation goes well beyond drawing vectors and optimising paths — it also includes how I \u003cstrong\u003estructure the code\u003c/strong\u003e itself. When every visual element is crammed into a single SVG file, even optimised code can be a nightmare to navigate. Locating a specific path or group often feels like searching for a needle in a haystack.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/9-yogi-bear-title-card-toon-titles-recreation.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/9-yogi-bear-title-card-toon-titles-recreation.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/9-yogi-bear-title-card-toon-titles-recreation.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/9-yogi-bear-title-card-toon-titles-recreation.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/9-yogi-bear-title-card-toon-titles-recreation.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/9-yogi-bear-title-card-toon-titles-recreation.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/9-yogi-bear-title-card-toon-titles-recreation.png\" sizes=\"100vw\" alt=\"Toon Titles recreation of the Yogi Bear title card\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eYogi Bear title card design by Lawrence Goble (1958). Toon Titles recreation. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/9-yogi-bear-title-card-toon-titles-recreation.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThat’s why I develop my SVGs in layers, exporting and optimising one set of elements at a time — always in the order they’ll appear in the final file. This lets me build the master SVG gradually by pasting it in each cleaned-up section. For example, I start with backgrounds like this gradient and title graphic.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/10-gradient-background-title-graphic.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/10-gradient-background-title-graphic.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/10-gradient-background-title-graphic.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/10-gradient-background-title-graphic.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/10-gradient-background-title-graphic.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/10-gradient-background-title-graphic.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/10-gradient-background-title-graphic.png\" sizes=\"100vw\" alt=\"Gradient background and title graphic.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eGradient background and title graphic. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/10-gradient-background-title-graphic.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eInstead of facing a wall of SVG code, I can now easily identify the background gradient’s path and its associated \u003ccode\u003elinearGradient\u003c/code\u003e, and see the group containing the title graphic. I take this opportunity to add a comment to the code, which will make editing and adding animations to it easier in the future:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;svg ...\u0026gt;\n  \u0026lt;defs\u0026gt;\n    \u0026lt;!-- ... --\u0026gt;\n  \u0026lt;/defs\u0026gt;\n  \u0026lt;path fill=\u0026#34;url(#grad)\u0026#34; d=\u0026#34;…\u0026#34;/\u0026gt;\n  \u0026lt;!-- TITLE GRAPHIC --\u0026gt;\n  \u0026lt;g\u0026gt;\n    \u0026lt;path … /\u0026gt;\n    \u0026lt;!-- ... --\u0026gt; \n  \u0026lt;/g\u0026gt;\n\u0026lt;/svg\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/11-trail-gaussian-blur.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/11-trail-gaussian-blur.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/11-trail-gaussian-blur.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/11-trail-gaussian-blur.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/11-trail-gaussian-blur.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/11-trail-gaussian-blur.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/11-trail-gaussian-blur.png\" sizes=\"100vw\" alt=\"Trail with Gaussian Blur.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eTrail with Gaussian Blur. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/11-trail-gaussian-blur.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eNext, I add the blurred trail from Yogi’s airborne broom. This includes defining a Gaussian Blur filter and placing its path between the background and title layers:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;svg ...\u0026gt;\n  \u0026lt;defs\u0026gt;\n    \u0026lt;linearGradient id=\u0026#34;grad\u0026#34; …\u0026gt;…\u0026lt;/linearGradient\u0026gt;\n    \u0026lt;filter id=\u0026#34;trail\u0026#34; …\u0026gt;…\u0026lt;/filter\u0026gt;\n  \u0026lt;/defs\u0026gt;\n  \u0026lt;!-- GRADIENT --\u0026gt;\n  \u0026lt;!-- TRAIL --\u0026gt;\n  \u0026lt;path filter=\u0026#34;url(#trail)\u0026#34; …/\u0026gt;\n  \u0026lt;!-- TITLE GRAPHIC --\u0026gt;\n\u0026lt;/svg\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/12-yogi-bear-magical-stars.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/12-yogi-bear-magical-stars.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/12-yogi-bear-magical-stars.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/12-yogi-bear-magical-stars.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/12-yogi-bear-magical-stars.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/12-yogi-bear-magical-stars.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/12-yogi-bear-magical-stars.png\" sizes=\"100vw\" alt=\"Yogi Bear’s magical stars.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eYogi Bear’s magical stars. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/12-yogi-bear-magical-stars.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThen come the magical stars, added in the same sequential fashion:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;svg ...\u0026gt;\n  \u0026lt;!-- GRADIENT --\u0026gt;\n  \u0026lt;!-- TRAIL --\u0026gt;\n  \u0026lt;!-- STARS --\u0026gt;\n  \u0026lt;!-- TITLE GRAPHIC --\u0026gt;\n\u0026lt;/svg\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo keep everything organised and animation-ready, I create an empty group that will hold all the parts of Yogi:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;g id=\u0026#34;yogi\u0026#34;\u0026gt;...\u0026lt;/g\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/13-yogi-bear-component-parts.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/13-yogi-bear-component-parts.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/13-yogi-bear-component-parts.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/13-yogi-bear-component-parts.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/13-yogi-bear-component-parts.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/13-yogi-bear-component-parts.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/13-yogi-bear-component-parts.png\" sizes=\"100vw\" alt=\"Added Yogi Bear’s component parts\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eSequentially adding Yogi Bear’s component parts. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/13-yogi-bear-component-parts.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThen I build Yogi from the ground up — starting with background props, like his broom:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;g id=\u0026#34;broom\u0026#34;\u0026gt;...\u0026lt;/g\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFollowed by grouped elements for his body, head, collar, and tie:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;g id=\u0026#34;yogi\u0026#34;\u0026gt;\n  \u0026lt;g id=\u0026#34;broom\u0026#34;\u0026gt;…\u0026lt;/g\u0026gt;\n  \u0026lt;g id=\u0026#34;body\u0026#34;\u0026gt;…\u0026lt;/g\u0026gt;\n  \u0026lt;g id=\u0026#34;head\u0026#34;\u0026gt;…\u0026lt;/g\u0026gt;\n  \u0026lt;g id=\u0026#34;collar\u0026#34;\u0026gt;…\u0026lt;/g\u0026gt;\n  \u0026lt;g id=\u0026#34;tie\u0026#34;\u0026gt;…\u0026lt;/g\u0026gt;\n\u0026lt;/g\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/14-yogi-bear-title-card-toon-titles-recreation.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/14-yogi-bear-title-card-toon-titles-recreation.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/14-yogi-bear-title-card-toon-titles-recreation.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/14-yogi-bear-title-card-toon-titles-recreation.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/14-yogi-bear-title-card-toon-titles-recreation.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/14-yogi-bear-title-card-toon-titles-recreation.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/14-yogi-bear-title-card-toon-titles-recreation.png\" sizes=\"100vw\" alt=\"Toon Titles recreation of the Yogi Bear title card\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eYogi Bear title card design by Lawrence Goble (1958). Toon Titles recreation. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/14-yogi-bear-title-card-toon-titles-recreation.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eSince I export each layer from the same-sized artboard, I don’t need to worry about alignment or positioning issues later on — they’ll all slot into place automatically. I keep my code \u003cstrong\u003eclean\u003c/strong\u003e, \u003cstrong\u003ereadable\u003c/strong\u003e, and \u003cstrong\u003eordered logically\u003c/strong\u003e by layering elements this way. It also makes animating smoother, as each component is easier to identify.\u003c/p\u003e\u003ch2 id=\"reusing-elements-with-use\"\u003eReusing Elements With \u003ccode\u003e\u0026lt;use\u0026gt;\u003c/code\u003e\u003c/h2\u003e\u003cp\u003eWhen duplicate shapes get reused repeatedly, SVG files can get bulky fast. My recreation of the “Bewitched Bear” title card contains 80 stars in three sizes. Combining all those shapes into one optimised path would bring the file size down to 3KB. But I want to animate individual stars, which would almost double that to 5KB:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;g id=\u0026#34;stars\u0026#34;\u0026gt;\n \u0026lt;path class=\u0026#34;star-small\u0026#34; fill=\u0026#34;#eae3da\u0026#34; d=\u0026#34;...\u0026#34;/\u0026gt;\n \u0026lt;path class=\u0026#34;star-medium\u0026#34; fill=\u0026#34;#eae3da\u0026#34; d=\u0026#34;...\u0026#34;/\u0026gt;\n \u0026lt;path class=\u0026#34;star-large\u0026#34; fill=\u0026#34;#eae3da\u0026#34; d=\u0026#34;...\u0026#34;/\u0026gt;\n \u0026lt;!-- ... --\u0026gt;\n\u0026lt;/g\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eMoving the stars’ \u003ccode\u003efill\u003c/code\u003e attribute values to their parent group reduces the overall weight a little:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;g id=\u0026#34;stars\u0026#34; fill=\u0026#34;#eae3da\u0026#34;\u0026gt;\n \u0026lt;path class=\u0026#34;star-small\u0026#34; d=\u0026#34;…\u0026#34;/\u0026gt;\n \u0026lt;path class=\u0026#34;star-medium\u0026#34; d=\u0026#34;…\u0026#34;/\u0026gt;\n \u0026lt;path class=\u0026#34;star-large\u0026#34; d=\u0026#34;…\u0026#34;/\u0026gt;\n \u0026lt;!-- ... --\u0026gt;\n\u0026lt;/g\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/15-yogi-bear-sparkling-stars.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/15-yogi-bear-sparkling-stars.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/15-yogi-bear-sparkling-stars.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/15-yogi-bear-sparkling-stars.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/15-yogi-bear-sparkling-stars.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/15-yogi-bear-sparkling-stars.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/15-yogi-bear-sparkling-stars.png\" sizes=\"100vw\" alt=\"Yogi Bear’s sparkling stars.\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eYogi Bear’s sparkling stars. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/15-yogi-bear-sparkling-stars.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eBut a more efficient and manageable option is to define each star size as a reusable template:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;defs\u0026gt;\n  \u0026lt;path id=\u0026#34;star-large\u0026#34; fill=\u0026#34;#eae3da\u0026#34; fill-rule=\u0026#34;evenodd\u0026#34; d=\u0026#34;…\u0026#34;/\u0026gt;\n  \u0026lt;path id=\u0026#34;star-medium\u0026#34; fill=\u0026#34;#eae3da\u0026#34; fill-rule=\u0026#34;evenodd\u0026#34; d=\u0026#34;…\u0026#34;/\u0026gt;\n  \u0026lt;path id=\u0026#34;star-small\u0026#34; fill=\u0026#34;#eae3da\u0026#34; fill-rule=\u0026#34;evenodd\u0026#34; d=\u0026#34;…\u0026#34;/\u0026gt;\n\u0026lt;/defs\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWith this setup, changing a star’s design only means updating its template once, and every instance updates automatically. Then, I reference each one using \u003ccode\u003e\u0026lt;use\u0026gt;\u003c/code\u003e and position them with \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e attributes:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;g id=\u0026#34;stars\u0026#34;\u0026gt;\n  \u0026lt;!-- Large stars --\u0026gt;\n  \u0026lt;use href=\u0026#34;#star-large\u0026#34; x=\u0026#34;1575\u0026#34; y=\u0026#34;495\u0026#34;/\u0026gt;\n  \u0026lt;!-- ... --\u0026gt;\n  \u0026lt;!-- Medium stars --\u0026gt;\n  \u0026lt;use href=\u0026#34;#star-medium\u0026#34; x=\u0026#34;1453\u0026#34; y=\u0026#34;696\u0026#34;/\u0026gt;\n  \u0026lt;!-- ... --\u0026gt;\n  \u0026lt;!-- Small stars --\u0026gt;\n  \u0026lt;use href=\u0026#34;#star-small\u0026#34; x=\u0026#34;1287\u0026#34; y=\u0026#34;741\u0026#34;/\u0026gt;\n  \u0026lt;!-- ... --\u0026gt;\n\u0026lt;/g\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis approach makes the SVG easier to manage, lighter to load, and faster to iterate on, especially when working with dozens of repeating elements. Best of all, it keeps the markup clean \u003cstrong\u003ewithout compromising on flexibility or performance\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"adding-animations\"\u003eAdding Animations\u003c/h2\u003e\u003cp\u003eThe stars trailing behind Yogi’s stolen broom bring so much personality to the animation. I wanted them to sparkle in a seemingly random pattern against the dark blue background, so I started by defining a keyframe animation that cycles through different \u003ccode\u003eopacity\u003c/code\u003e levels:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e@keyframes sparkle {\n  0%, 100% { opacity: .1; }\n  50% { opacity: 1; }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, I applied this looping animation to every \u003ccode\u003euse\u003c/code\u003e element inside my stars group:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e#stars use {\n  animation: sparkle 10s ease-in-out infinite;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe secret to creating a convincing twinkle lies in \u003cstrong\u003evariation\u003c/strong\u003e. I staggered animation delays and durations across the stars using \u003ccode\u003enth-child\u003c/code\u003e selectors, starting with the quickest and most frequent sparkle effects:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e/* Fast, frequent */\n#stars use:nth-child(n + 1):nth-child(-n + 10) {\n  animation-delay: .1s;\n  animation-duration: 2s;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFrom there, I layered in additional timings to mix things up. Some stars sparkle slowly and dramatically, others more randomly, with a variety of rhythms and pauses:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e/* Medium */\n#stars use:nth-child(n + 11):nth-child(-n + 20) { ... }\n\n/* Slow, dramatic */\n#stars use:nth-child(n + 21):nth-child(-n + 30) { ... }\n\n/* Random */\n#stars use:nth-child(3n + 2) { ... }\n\n/* Alternating */\n#stars use:nth-child(4n + 1) { ... }\n\n/* Scattered */\n#stars use:nth-child(n + 31) { ... }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBy thoughtfully structuring the SVG and reusing elements, I can build complex-looking animations without bloated code, making even a simple effect like changing \u003ccode\u003eopacity\u003c/code\u003e sparkle.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/16-subtle-movements-yogi-bear.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"450\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/16-subtle-movements-yogi-bear.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/16-subtle-movements-yogi-bear.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/16-subtle-movements-yogi-bear.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/16-subtle-movements-yogi-bear.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/16-subtle-movements-yogi-bear.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/16-subtle-movements-yogi-bear.png\" sizes=\"100vw\" alt=\"Yogi Bear\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eSubtle movements bring Yogi Bear to life. (\u003ca href=\"https://files.smashing.media/articles/smashing-animations-part-4-optimising-svgs/16-subtle-movements-yogi-bear.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThen, for added realism, I make Yogi’s head wobble:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e@keyframes headWobble {\n  0% { transform: rotate(-0.8deg) translateY(-0.5px); }\n  100% { transform: rotate(0.9deg) translateY(0.3px); }\n}\n\n#head {\n  animation: headWobble 0.8s cubic-bezier(0.5, 0.15, 0.5, 0.85) infinite alternate;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHis tie waves:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e@keyframes tieWave {\n  0%, 100% { transform: rotateZ(-4deg) rotateY(15deg) scaleX(0.96); }\n  33% { transform: rotateZ(5deg) rotateY(-10deg) scaleX(1.05); }\n  66% { transform: rotateZ(-2deg) rotateY(5deg) scaleX(0.98); }\n}\n\n#tie {\n  transform-style: preserve-3d;\n  animation: tieWave 10s cubic-bezier(0.68, -0.55, 0.27, 1.55) infinite;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHis broom swings:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e@keyframes broomSwing {\n  0%, 20% { transform: rotate(-5deg); }\n  30% { transform: rotate(-4deg); }\n  50%, 70% { transform: rotate(5deg); }\n  80% { transform: rotate(4deg); }\n  100% { transform: rotate(-5deg); }\n}\n\n#broom {\n  animation: broomSwing 4s cubic-bezier(0.5, 0.05, 0.5, 0.95) infinite;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd, finally, Yogi himself gently rotates as he flies on his magical broom:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e@keyframes yogiWobble {\n  0% { transform: rotate(-2.8deg) translateY(-0.8px) scale(0.998); }\n  30% { transform: rotate(1.5deg) translateY(0.3px); }\n  100% { transform: rotate(3.2deg) translateY(1.2px) scale(1.002); }\n}\n\n#yogi {\n  animation: yogiWobble 3.5s cubic-bezier(.37, .14, .3, .86) infinite alternate;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAll these subtle movements bring Yogi to life. By developing structured SVGs, I can create animations that feel full of character without writing a single line of JavaScript.\u003c/p\u003e\u003cp\u003eTry this yourself:\u003c/p\u003e\u003cfigure\u003e\u003cp data-height=\"480\" data-theme-id=\"light\" data-slug-hash=\"bNdwJBN\" data-user=\"smashingmag\" data-default-tab=\"result\"\u003eSee the Pen [Bewitched Bear CSS/SVG animation [forked]](https://codepen.io/smashingmag/pen/bNdwJBN) by \u003ca href=\"https://codepen.io/malarkey\"\u003eAndy Clarke\u003c/a\u003e.\u003c/p\u003e\u003cfigcaption\u003eSee the Pen \u003ca href=\"https://codepen.io/smashingmag/pen/bNdwJBN\"\u003eBewitched Bear CSS/SVG animation [forked]\u003c/a\u003e by \u003ca href=\"https://codepen.io/malarkey\"\u003eAndy Clarke\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eWhether you’re recreating a classic title card or animating icons for an interface, the principles are the same:\u003c/p\u003e\u003col\u003e\u003cli\u003eStart clean,\u003c/li\u003e\u003cli\u003eOptimise early, and\u003c/li\u003e\u003cli\u003eStructure everything with animation in mind.\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eSVGs offer incredible creative freedom, but only if kept \u003cstrong\u003elean\u003c/strong\u003e and \u003cstrong\u003emanageable\u003c/strong\u003e. When you plan your process like a production cell — layer by layer, element by element — you’ll spend less time untangling code and more time bringing your work to life.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(gg, yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2025-06-04T08:00:00Z",
  "modifiedTime": "2025-06-04T08:00:00Z"
}
