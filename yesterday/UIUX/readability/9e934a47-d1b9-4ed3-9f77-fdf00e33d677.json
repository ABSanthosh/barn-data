{
  "id": "9e934a47-d1b9-4ed3-9f77-fdf00e33d677",
  "title": "Integrating Design And Code With Native Design Tokens In Penpot",
  "link": "https://smashingmagazine.com/2025/05/integrating-design-code-native-design-tokens-penpot/",
  "description": "The Penpot team is not slowing down on its mission to build a free design tool that not only offers powerful design features but is also well-integrated with code and modern development practices. In its latest release, Penpot, as the first design tool ever, introduces support for native design tokens. Let’s take a closer look at this concept and how you can employ it in your process.",
  "author": "Mikołaj Dobrucki",
  "published": "Thu, 08 May 2025 10:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 14222,
  "excerpt": "The Penpot team is not slowing down on its mission to build a free design tool that not only offers powerful design features but is also well-integrated with code and modern development practices. In its latest release, Penpot, as the first design tool ever, introduces support for native design tokens. Let’s take a closer look at this concept and how you can employ it in your process.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "11 min readDesign Systems, Design, UIThe Penpot team is not slowing down on its mission to build a free design tool that not only offers powerful design features but is also well-integrated with code and modern development practices. In its latest release, Penpot, as the first design tool ever, introduces support for native design tokens. Let’s take a closer look at this concept and how you can employ it in your process.It’s already the fifth time I’m writing to you about Penpot — and what a journey it continues to be! During this time, Penpot’s presence in the design tools scene has grown strong. In a market that recently felt more turbulent than ever, I’ve always appreciated Penpot for their clear mission and values. They’ve built a design tool that not only delivers great features but is also open-source and developed in active dialogue with the community. Rather than relying on closed formats and gated solutions, Penpot embraces open web standards and commonly used technologies — ensuring it works seamlessly across platforms and integrates naturally with code.Their latest release is another great example of that approach. It’s also one of the most impactful. Let me introduce you to design tokens in Penpot.Design tokens are an essential building block of modern user interface design and engineering. But so far, designers and engineers have been stuck with third-party plugins and cumbersome APIs to collaborate effectively on design tokens and keep them in sync. It’s high time we had tools and processes that handle this better, and Penpot just made it happen.About Design TokensDesign tokens can be understood as a framework to document and organize your design decisions. They act as a single source of truth for both designers and engineers and include all the design variables, such as colors, typography, spacing, fills, borders, and shadows.The concept of design tokens has grown in popularity alongside the rise of design systems and the increasing demand for broader standards and guidelines in user interface design. Design tokens emerged as a solution for managing increasingly complex systems while keeping them structured, scalable, and extensible.The goal of using design tokens is not only to make design decisions more intentional and maintainable but also to make it easier to keep them in sync with code. In the case of larger systems, it is often a one-to-many relationship. Design tokens allow you to keep the values agnostic of their application and scale them across various products and environments.Design tokens create a semantic layer between the values, the tools used to define them, and the software that implements them.(Large preview)On top of maintainability benefits, a common reason to use design tokens is theming. Keeping your design decisions decoupled means that you can easily swap the values across multiple sets. This allows you to change the appearance of the entire interface with applications ranging from simple light and dark mode implementations to more advanced use cases, such as handling multiple brands or creating fully customizable and adjustable UIs.Implementation ChallengesUntil recently, there was no standardized format for maintaining design tokens — it remained a largely theoretical concept, implemented differently across teams and tools. Every design tool or frontend framework has its own approach. Syncing code with design tools was also a major pain point, often requiring third-party plugins and unreliable synchronization solutions.However, in recent years, W3C, the international organization responsible for developing open standards and protocols for the web, brought to life a dedicated Design Tokens Community Group with the goal of creating an open standard for products and design tools to handle design tokens. Once this standard gets more widely adopted, it will give us hope for a more predictable and standardized approach to design tokens across the industry.To make that happen, work has to be done on two ends, both design and development. Penpot is the very first design tool to implement design tokens in adherence to the standard that the W3C is working on. It also solves the problem of third-party dependencies by offering a native API with all the values served in the official, standardized format.Design Tokens In PracticeTo better understand design tokens and how to use them in practice, let’s take a look at an example together. Let’s consider the following user interface of a login screen:(Large preview)Imagine we want this design to work in light and dark mode, but also to be themable with several accent colors. It could be that we’re using the same authentication system for websites of several associated brands or several products. We could also want to allow the user to customize the interface to their needs.If we want to build a design that works for three accent colors, each with light and dark themes, it gives us six variants in total:Six variants of a login screen design with three accent colors and light and dark mode options. (Large preview)Designing all of them by hand would not only be tedious but also difficult to maintain. Every change you make would have to be repeated in six places. In the case of six variants, that’s not ideal, but it’s still doable. But what if you also want to support multiple layout options or more brands? It could easily scale into hundreds of combinations, at which point designing them manually would easily get out of hand.This is where design tokens come to the rescue. They allow you to effectively maintain all the variants and test all the possible combinations, even hundreds of them, while still building a single design without repetitive work.You can start by creating a design in one of the variants before starting to think about the tokens. Having a design already in place might make it easier to plan your tokens’ hierarchy and structure accordingly.(Large preview)In this case, I created three components: 2 types of buttons and input, and combined them with text layers into several Flex layouts to build out this screen. If you’d like to first learn more about building components and layouts in Penpot, I would recommend you revisit some of my previous articles:Build Design Systems With Penpot ComponentsPenpot’s CSS Grid Layout: Designing With SuperpowersPenpot’s Flex Layout: Building CSS Layouts In A Design ToolNow that we have the design ready, we can start creating tokens. You can create your first token by heading to the tokens tab of the left sidebar and clicking the plus button in one of the token categories. Let’s start by creating a color.Creating your first design token in PenpotTo use design tokens effectively, it’s critical to plan their naming and structure well. You might have noticed that when I created a token, Penpot automatically created for me a new set, called Global. All design tokens have to be organized within sets.I called my first set “primitives,” so I can store literal values such as “blue,” “purple,” or “grey.” To support multiple shades of color, I used numbers, so the final token names I used are, for example, “slate.1” or “slate.10”.At this point, we can start thinking about handling multiple colors for various themes. To make it easy to switch between tokens, all you have to do is create multiple sets with tokens of the same names. To do that, I split the primitives into two sets, “light” and “dark.” You can nest your token sets by adding slashes into their names.Creating design token sets in PenpotIn the video above, you can see that I have two sets, light and dark, each with tokens of the same names but different values. At this point, you could already reference your primitive tokens to switch between light and dark values. However, in the future, you might use the same shade of grey for multiple purposes, like border, background, or text. It would be a more maintainable approach to keep these definitions independent.To achieve that, we need to introduce a second abstraction layer. In this case, I created a new tokens set called “globals” that references the primitives set. All values in “globals” reference other already existing tokens, such as “primitives.”For globals, I used semantic naming such as “text.muted” or “background.primary” to stress that the token names are agnostic from their literal values. In other words, the “text.muted” name works well for both light and dark modes, the same as “background.primary” works as a token name no matter what brand color is currently in use. For comparison, “text.dark” or “background.blue” would not make sense if we wanted to make them dynamic and be able to switch between different modes and brand colors.(Large preview)In Penpot, you can reference other tokens in token values by wrapping them in curly brackets. So, if you select “slate.1” as your text color, it will reference the “slate.1” value from any other set that is currently active. With the light set active, the text will be black. And with the dark set active, the text will be white.Creating alias tokens in PenpotYou can apply your global tokens to any layer you want. To do that, select a layer and then right-click a token of your choice. In the context menu, you can select among the values that are compatible with a token. In the case of a color, it will be either fill or stroke.Applying design tokens to layers in PenpotNow, if you switch on and off the sets, you can see the design responding to the change. With the light set active, the text appears black, and with the dark set active, the text appears white.Changing token sets in PenpotAs you probably noticed, more than one set can be active at the same time, even if they contain values of the same names, like light and dark sets. In such a case, a set lowest on the list will override the already defined values. You can think of it as defining variables in any programming language or properties in CSS. The last value of equal specificity is the one that counts.However, you don’t need to switch the sets on and off manually to test your design’s appearance. To make that easier, Penpot also offers another concept called Themes. Themes are the best way to manage your sets and combine them into functional design choices.In the case of light and dark mode, I created two themes: “light” and “dark,” under a group called “Mode.” This makes it much clearer how the sets should be used and makes it easier to switch between the predefined options.Creating themes in PenpotFor each theme, I selected two sets. One that defines the values (“light” or “dark”) and one that is actually used to style the designs (“globals”). Now, you can use the Themes dropdown to quickly switch themes.At this point, we have two layers of abstraction: primitives (such as basic color shades) and a semantic layer (background, text, and so on). Sometimes, you might need more than that. With this setup, you can easily switch between light and dark mode, but what if you also want to switch between the several brand colors I showed earlier, while still being able to change the mode? For that, we need another theme (let’s call it “Brand”) and another couple of sets under a parent set that would also be called “Brand.” For the latter, I made three options: “Slate,” “Indigo,” and “Purple.” In real-life scenarios, these could be names of brands, products, and so on.To bring it all together, the brand sets need to reference primitives, while the “globals” set needs to reference “brand” sets. This way, we are creating three different brands, each with its own separate values for light and dark mode.(Large preview)This allows us to switch between brands and modes and test all the possible combinations.Switching between themes in PenpotWhat’s Next?I hope you enjoyed following this example. If you’d like to check out the file presented above before creating your own, you can duplicate it here.Colors are only one of many types of tokens available in Penpot. You can also use design tokens to maintain values such as spacing, sizing, layout, and so on. The Penpot team is working on gradually expanding the choice of tokens you can use. All are in accordance with the upcoming design tokens standard.The benefits of the native approach to design tokens implemented by Penpot go beyond ease of use and standardization. It also makes the tokens more powerful. For example, they already support math operations using the calc() function you might recognize from CSS. It means you can use math to add, multiply, subtract, etc., token values.Once you have the design token in Penpot ready, the next step is to bring it over to your code. Already today, you can export the tokens in JSON format, and soon, an API will be available that connects and imports the tokens directly into your codebase. You can follow Penpot on LinkedIn, BlueSky, and other social media to be the first to hear about the next updates. The team behind Penpot is also planning to make its design tokens implementation even more powerful in the near future with support for gradients, composite tokens (tokens that store multiple values), and more.To learn more about design tokens and how to use them, check out the following links:Design Token Overview, Penpot websiteWhat are design tokens? A complete guide, Penpot BlogDesign Tokens, Penpot DocsDesign tokens format module, W3C Community Group Draft ReportConclusionBy adding support for native design tokens, Penpot is making real progress on connecting design and code in meaningful ways. Having all your design variables well documented and organized is one thing. Doing that in a scalable and maintainable way that is based on open standards and is easy to connect with code \u0026mdahs; that’s yet another level.The practical benefits are huge: better maintainability, less friction, and easier communication across the whole team. If you’re looking to bring more structure to your design system while keeping designers and engineers in sync, Penpot’s design tokens implementation is definitely worth exploring.Tried it already? Share your thoughts! The Penpot team is active on social media, or just share your feedback in the comments section below. (yk)",
  "image": "https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/integrating-design-code-native-design-tokens-penpot.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e11 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/design-systems\"\u003eDesign Systems\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/design\"\u003eDesign\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/ui\"\u003eUI\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eThe Penpot team is not slowing down on its mission to build a free design tool that not only offers powerful design features but is also well-integrated with code and modern development practices. In its latest release, Penpot, as the first design tool ever, introduces support for \u003ca href=\"https://www.google.com/url?q=https://penpot.app/collaboration/design-tokens?utm_source%3DSmashingMag%26utm_medium%3DArticle%26utm_campaign%3DDesignTokens\u0026amp;sa=D\u0026amp;source=docs\u0026amp;ust=1746545302543254\u0026amp;usg=AOvVaw2Smr3CZPnW7nRDz_6YMwJJ\"\u003enative design tokens\u003c/a\u003e. Let’s take a closer look at this concept and how you can employ it in your process.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eIt’s already the fifth time I’m writing to you about Penpot — and what a journey it continues to be! During this time, Penpot’s presence in the design tools scene has grown strong. In a market that recently felt more turbulent than ever, I’ve always appreciated Penpot for their clear mission and values. They’ve built a design tool that not only delivers great features but is also \u003cstrong\u003eopen-source\u003c/strong\u003e and developed in active dialogue with the community. Rather than relying on closed formats and gated solutions, Penpot embraces \u003cstrong\u003eopen web standards\u003c/strong\u003e and commonly used technologies — ensuring it works seamlessly across platforms and integrates naturally with code.\u003c/p\u003e\u003cp\u003eTheir latest release is another great example of that approach. It’s also one of the most impactful. Let me introduce you to \u003ca href=\"https://www.google.com/url?q=https://penpot.app/collaboration/design-tokens?utm_source%3DSmashingMag%26utm_medium%3DArticle%26utm_campaign%3DDesignTokens\u0026amp;sa=D\u0026amp;source=docs\u0026amp;ust=1746545302545630\u0026amp;usg=AOvVaw3RHC5kveiwwmzlV6aYzNof\"\u003edesign tokens in Penpot\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eDesign tokens are an essential building block of modern user interface design and engineering. But so far, designers and engineers have been stuck with third-party plugins and cumbersome APIs to collaborate effectively on design tokens and keep them in sync. It’s high time we had tools and processes that handle this better, and Penpot just made it happen.\u003c/p\u003e\u003ch2 id=\"about-design-tokens\"\u003eAbout Design Tokens\u003c/h2\u003e\u003cp\u003eDesign tokens can be understood as a \u003cstrong\u003eframework to document and organize your design decisions\u003c/strong\u003e. They act as a single source of truth for both designers and engineers and include all the design variables, such as colors, typography, spacing, fills, borders, and shadows.\u003c/p\u003e\u003cp\u003eThe concept of design tokens has grown in popularity alongside the rise of design systems and the increasing demand for broader standards and guidelines in user interface design. Design tokens emerged as a solution for managing increasingly complex systems while keeping them structured, scalable, and extensible.\u003c/p\u003e\u003cp\u003eThe goal of using design tokens is not only to make design decisions more intentional and maintainable but also to make it easier to keep them in sync with code. In the case of larger systems, it is often a one-to-many relationship. Design tokens allow you to keep the values agnostic of their application and scale them across various products and environments.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003ca aria-label=\"Share on Twitter\" href=\"https://twitter.com/share?text=%0aDesign%20tokens%20create%20a%20semantic%20layer%20between%20the%20values,%20the%20tools%20used%20to%20define%20them,%20and%20the%20software%20that%20implements%20them.%0a\u0026amp;url=https://smashingmagazine.com%2f2025%2f05%2fintegrating-design-code-native-design-tokens-penpot%2f\"\u003eDesign tokens create a semantic layer between the values, the tools used to define them, and the software that implements them.\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/1-schema-design-system.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"600\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/1-schema-design-system.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/1-schema-design-system.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/1-schema-design-system.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/1-schema-design-system.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/1-schema-design-system.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/1-schema-design-system.png\" sizes=\"100vw\" alt=\"Schema of the design system\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/1-schema-design-system.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eOn top of maintainability benefits, a common reason to use design tokens is \u003cstrong\u003etheming\u003c/strong\u003e. Keeping your design decisions decoupled means that you can easily swap the values across multiple sets. This allows you to change the appearance of the entire interface with applications ranging from simple light and dark mode implementations to more advanced use cases, such as handling multiple brands or creating fully customizable and adjustable UIs.\u003c/p\u003e\u003ch2 id=\"implementation-challenges\"\u003eImplementation Challenges\u003c/h2\u003e\u003cp\u003eUntil recently, there was no standardized format for maintaining design tokens — it remained a largely theoretical concept, implemented differently across teams and tools. Every design tool or frontend framework has its own approach. Syncing code with design tools was also a major pain point, often requiring third-party plugins and unreliable synchronization solutions.\u003c/p\u003e\u003cp\u003eHowever, in recent years, W3C, the international organization responsible for developing open standards and protocols for the web, brought to life a dedicated Design Tokens Community Group with the goal of creating an \u003cstrong\u003eopen standard for products and design tools to handle design tokens\u003c/strong\u003e. Once this standard gets more widely adopted, it will give us hope for a more predictable and standardized approach to design tokens across the industry.\u003c/p\u003e\u003cp\u003eTo make that happen, work has to be done on two ends, both design and development. Penpot is the very first design tool to implement design tokens in adherence to the standard that the W3C is working on. It also solves the problem of third-party dependencies by offering a native API with all the values served in the official, standardized format.\u003c/p\u003e\u003ch2 id=\"design-tokens-in-practice\"\u003eDesign Tokens In Practice\u003c/h2\u003e\u003cp\u003eTo better understand design tokens and how to use them in practice, let’s take a look at an example together. Let’s consider the following user interface of a login screen:\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/2-login-screen-acme.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"639\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/2-login-screen-acme.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/2-login-screen-acme.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/2-login-screen-acme.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/2-login-screen-acme.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/2-login-screen-acme.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/2-login-screen-acme.png\" sizes=\"100vw\" alt=\"Acme login screen\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/2-login-screen-acme.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eImagine we want this design to work in light and dark mode, but also to be themable with several accent colors. It could be that we’re using the same authentication system for websites of several associated brands or several products. We could also want to allow the user to customize the interface to their needs.\u003c/p\u003e\u003cp\u003eIf we want to build a design that works for three accent colors, each with light and dark themes, it gives us six variants in total:\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/3-login-screen-design-grid.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"700\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/3-login-screen-design-grid.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/3-login-screen-design-grid.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/3-login-screen-design-grid.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/3-login-screen-design-grid.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/3-login-screen-design-grid.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/3-login-screen-design-grid.png\" sizes=\"100vw\" alt=\"Six variants of a login screen design with three accent colors and light and dark mode options\"/\u003e\u003c/a\u003e\u003cfigcaption\u003eSix variants of a login screen design with three accent colors and light and dark mode options. (\u003ca href=\"https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/3-login-screen-design-grid.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eDesigning all of them by hand would not only be tedious but also difficult to maintain. Every change you make would have to be repeated in six places. In the case of six variants, that’s not ideal, but it’s still doable. But what if you also want to support multiple layout options or more brands? It could easily scale into hundreds of combinations, at which point designing them manually would easily get out of hand.\u003c/p\u003e\u003cp\u003eThis is where design tokens come to the rescue. They allow you to effectively \u003cstrong\u003emaintain all the variants\u003c/strong\u003e and \u003cstrong\u003etest all the possible combinations\u003c/strong\u003e, even hundreds of them, while still building a single design without repetitive work.\u003c/p\u003e\u003cp\u003eYou can start by creating a design in one of the variants before starting to think about the tokens. Having a design already in place might make it easier to plan your tokens’ hierarchy and structure accordingly.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/4-layers-penpot.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"601\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/4-layers-penpot.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/4-layers-penpot.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/4-layers-penpot.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/4-layers-penpot.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/4-layers-penpot.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/4-layers-penpot.png\" sizes=\"100vw\" alt=\"Different layers of the design\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/4-layers-penpot.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eIn this case, I created three components: 2 types of buttons and input, and combined them with text layers into several Flex layouts to build out this screen. If you’d like to first learn more about building components and layouts in Penpot, I would recommend you revisit some of my previous articles:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://www.smashingmagazine.com/2024/07/build-design-systems-penpot-components/\"\u003eBuild Design Systems With Penpot Components\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.smashingmagazine.com/2024/04/penpot-css-grid-layout-designing-superpowers/\"\u003ePenpot’s CSS Grid Layout: Designing With Superpowers\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://www.smashingmagazine.com/2023/06/penpot-flex-layout-building-css-layouts-design-tool/\"\u003ePenpot’s Flex Layout: Building CSS Layouts In A Design Tool\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eNow that we have the design ready, we can start creating tokens. You can create your first token by heading to the tokens tab of the left sidebar and clicking the plus button in one of the token categories. Let’s start by creating a color.\u003c/p\u003e\u003cfigure\u003e\u003cp\u003e\u003ciframe src=\"https://player.vimeo.com/video/1081870431\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\u003cfigcaption\u003eCreating your first design token in Penpot\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eTo use design tokens effectively, it’s critical to \u003cstrong\u003eplan their naming and structure well\u003c/strong\u003e. You might have noticed that when I created a token, Penpot automatically created for me a new set, called Global. All design tokens have to be organized within sets.\u003c/p\u003e\u003cp\u003eI called my first set “primitives,” so I can store literal values such as “blue,” “purple,” or “grey.” To support multiple shades of color, I used numbers, so the final token names I used are, for example, “slate.1” or “slate.10”.\u003c/p\u003e\u003cp\u003eAt this point, we can start thinking about handling multiple colors for various themes. To make it easy to switch between tokens, all you have to do is create multiple sets with tokens of the same names. To do that, I split the primitives into two sets, “light” and “dark.” You can nest your token sets by adding slashes into their names.\u003c/p\u003e\u003cfigure\u003e\u003cp\u003e\u003ciframe src=\"https://player.vimeo.com/video/1081871225\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\u003cfigcaption\u003eCreating design token sets in Penpot\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eIn the video above, you can see that I have two sets, light and dark, each with tokens of the same names but different values. At this point, you could already reference your primitive tokens to switch between light and dark values. However, in the future, you might use the same shade of grey for multiple purposes, like border, background, or text. It would be a more maintainable approach to keep these definitions independent.\u003c/p\u003e\u003cp\u003eTo achieve that, we need to introduce a second abstraction layer. In this case, I created a new tokens set called “globals” that references the primitives set. All values in “globals” reference other already existing tokens, such as “primitives.”\u003c/p\u003e\u003cp\u003eFor globals, I used semantic naming such as “text.muted” or “background.primary” to stress that the token names are agnostic from their literal values. In other words, the “text.muted” name works well for both light and dark modes, the same as “background.primary” works as a token name no matter what brand color is currently in use. For comparison, “text.dark” or “background.blue” would not make sense if we wanted to make them dynamic and be able to switch between different modes and brand colors.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/5-tokens-structure.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"600\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/5-tokens-structure.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/5-tokens-structure.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/5-tokens-structure.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/5-tokens-structure.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/5-tokens-structure.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/5-tokens-structure.png\" sizes=\"100vw\" alt=\"Tokens structure\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/5-tokens-structure.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eIn Penpot, you can reference other tokens in token values by wrapping them in curly brackets. So, if you select “slate.1” as your text color, it will reference the “slate.1” value from any other set that is currently active. With the light set active, the text will be black. And with the dark set active, the text will be white.\u003c/p\u003e\u003cfigure\u003e\u003cp\u003e\u003ciframe src=\"https://player.vimeo.com/video/1081872931\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\u003cfigcaption\u003eCreating alias tokens in Penpot\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eYou can apply your global tokens to any layer you want. To do that, select a layer and then right-click a token of your choice. In the context menu, you can select among the values that are compatible with a token. In the case of a color, it will be either fill or stroke.\u003c/p\u003e\u003cfigure\u003e\u003cp\u003e\u003ciframe src=\"https://player.vimeo.com/video/1081873524\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\u003cfigcaption\u003eApplying design tokens to layers in Penpot\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eNow, if you switch on and off the sets, you can see the design responding to the change. With the light set active, the text appears black, and with the dark set active, the text appears white.\u003c/p\u003e\u003cfigure\u003e\u003cp\u003e\u003ciframe src=\"https://player.vimeo.com/video/1081874135\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\u003cfigcaption\u003eChanging token sets in Penpot\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAs you probably noticed, more than one set can be active at the same time, even if they contain values of the same names, like light and dark sets. In such a case, a set lowest on the list will override the already defined values. You can think of it as defining variables in any programming language or properties in CSS. The last value of equal specificity is the one that counts.\u003c/p\u003e\u003cp\u003eHowever, you don’t need to switch the sets on and off manually to test your design’s appearance. To make that easier, Penpot also offers another concept called \u003cstrong\u003eThemes\u003c/strong\u003e. Themes are the best way to manage your sets and combine them into functional design choices.\u003c/p\u003e\u003cp\u003eIn the case of light and dark mode, I created two themes: “light” and “dark,” under a group called “Mode.” This makes it much clearer how the sets should be used and makes it easier to switch between the predefined options.\u003c/p\u003e\u003cfigure\u003e\u003cp\u003e\u003ciframe src=\"https://player.vimeo.com/video/1081874673\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\u003cfigcaption\u003eCreating themes in Penpot\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eFor each theme, I selected two sets. One that defines the values (“light” or “dark”) and one that is actually used to style the designs (“globals”). Now, you can use the Themes dropdown to quickly switch themes.\u003c/p\u003e\u003cp\u003eAt this point, we have two layers of abstraction: primitives (such as basic color shades) and a semantic layer (background, text, and so on). Sometimes, you might need more than that. With this setup, you can easily switch between light and dark mode, but what if you also want to switch between the several brand colors I showed earlier, \u003cem\u003ewhile\u003c/em\u003e still being able to change the mode? For that, we need another theme (let’s call it “Brand”) and another couple of sets under a parent set that would also be called “Brand.” For the latter, I made three options: “Slate,” “Indigo,” and “Purple.” In real-life scenarios, these could be names of brands, products, and so on.\u003c/p\u003e\u003cp\u003eTo bring it all together, the brand sets need to reference primitives, while the “globals” set needs to reference “brand” sets. This way, we are creating three different brands, each with its own separate values for light and dark mode.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/6-tokens-structure.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"600\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/6-tokens-structure.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/6-tokens-structure.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/6-tokens-structure.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/6-tokens-structure.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/6-tokens-structure.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/6-tokens-structure.png\" sizes=\"100vw\" alt=\"Tokens structure with primitives and brand sets\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/integrating-design-code-native-design-tokens-penpot/6-tokens-structure.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThis allows us to switch between brands and modes and test all the possible combinations.\u003c/p\u003e\u003cfigure\u003e\u003cp\u003e\u003ciframe src=\"https://player.vimeo.com/video/1081876394\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\u003cfigcaption\u003eSwitching between themes in Penpot\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"what-s-next\"\u003eWhat’s Next?\u003c/h2\u003e\u003cp\u003eI hope you enjoyed following this example. If you’d like to check out the file presented above before creating your own, you can \u003ca href=\"https://github.com/mikolajdobrucki/penpot-files/raw/refs/heads/main/Design%20Tokens%20%E2%80%93%20Smashing%20Magazine%20Article.penpot\"\u003eduplicate it here\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eColors are only one of many types of tokens available in Penpot. You can also use design tokens to maintain values such as spacing, sizing, layout, and so on. The Penpot team is working on gradually expanding the choice of tokens you can use. All are in accordance with the upcoming design tokens standard.\u003c/p\u003e\u003cp\u003eThe benefits of the \u003cstrong\u003enative approach to design tokens\u003c/strong\u003e implemented by Penpot go beyond ease of use and standardization. It also \u003cstrong\u003emakes the tokens more powerful\u003c/strong\u003e. For example, they already support math operations using the \u003ccode\u003ecalc()\u003c/code\u003e function you might recognize from CSS. It means you can use math to add, multiply, subtract, etc., token values.\u003c/p\u003e\u003cp\u003eOnce you have the design token in Penpot ready, the next step is to bring it over to your code. Already today, you can export the tokens in JSON format, and soon, an API will be available that connects and imports the tokens directly into your codebase. You can follow Penpot on \u003ca href=\"https://www.linkedin.com/company/penpotdesign/posts/?feedView=all\"\u003eLinkedIn\u003c/a\u003e, \u003ca href=\"https://bsky.app/profile/penpot.app\"\u003eBlueSky\u003c/a\u003e, and \u003ca href=\"https://penpot.app/\"\u003eother social media\u003c/a\u003e to be the first to hear about the next updates. The team behind Penpot is also planning to make its design tokens implementation even more powerful in the near future with support for \u003cstrong\u003egradients\u003c/strong\u003e, \u003cstrong\u003ecomposite tokens\u003c/strong\u003e (tokens that store multiple values), and more.\u003c/p\u003e\u003cp\u003eTo learn more about design tokens and how to use them, check out the following links:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://penpot.app/collaboration/design-tokens?utm_source=SmashingMag\u0026amp;utm_medium=Article\u0026amp;utm_campaign=DesignTokens\"\u003eDesign Token Overview\u003c/a\u003e, Penpot website\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://penpot.app/blog/what-are-design-tokens-a-complete-guide/\"\u003eWhat are design tokens? A complete guide\u003c/a\u003e, Penpot Blog\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://help.penpot.app/user-guide/design-tokens/\"\u003eDesign Tokens\u003c/a\u003e, Penpot Docs\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://tr.designtokens.org/format/\"\u003eDesign tokens format module\u003c/a\u003e, W3C Community Group Draft Report\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\u003cp\u003eBy adding support for native design tokens, Penpot is making real progress on connecting design and code in meaningful ways. Having all your design variables well documented and organized is one thing. Doing that in a scalable and maintainable way that is based on open standards and is easy to connect with code \u0026amp;mdahs; that’s yet another level.\u003c/p\u003e\u003cp\u003eThe practical benefits are huge: better maintainability, less friction, and easier communication across the whole team. If you’re looking to bring more structure to your design system while keeping designers and engineers in sync, Penpot’s design tokens implementation is definitely worth exploring.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTried it already? Share your thoughts!\u003c/strong\u003e The Penpot team is active on social media, or just share your feedback in the comments section below.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2025-05-08T10:00:00Z",
  "modifiedTime": "2025-05-08T10:00:00Z"
}
