{
  "id": "6d71837e-0721-4846-9c97-58232435afd0",
  "title": "A guide to designing errors in automation workflows",
  "link": "https://uxdesign.cc/a-guide-to-designing-errors-in-automation-workflows-f7a8a28c676d?source=rss----138adf9c44c---4",
  "description": "",
  "author": "Rucha Abhyankar",
  "published": "Tue, 05 Nov 2024 19:26:49 GMT",
  "source": "https://uxdesign.cc/feed",
  "categories": [
    "design",
    "saas",
    "error-handling",
    "ux",
    "product-design"
  ],
  "byline": "Rucha Abhyankar",
  "length": 11533,
  "excerpt": "You’re staring at a screen full of error logs, trying to figure out where your workflow failed. There’s so much information, but nothing points to the exact cause. You need to sift through mountains…",
  "siteName": "UX Collective",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*dn6MbbIIlwobt0jnUcrt_Q.png",
  "text": "Ensuring good visual representation, easy-to-understand copy, thoughtful error placement, intuitive troubleshooting techniques, and accessible error resolution.Source: Grafana technical docsPicture this: you’re in the middle of troubleshooting a critical issue, and time is running out.You’re staring at a screen full of error logs, trying to figure out where your workflow failed. There’s so much information, but nothing points to the exact cause.You need to sift through mountains of data to get the right insights to get to the solution. It’s like trying to find a needle in a haystack, with every second counting.Somehow, you are able to pull off solving the critical issue in time — and thank God for that, otherwise it would’ve cost the organisation you work for, a huge customer.As a UX designer working on B2B SaaS products, I found myself solving for a similar problem faced by our company’s internal users. My goal was simple: To help internal users identify errors or issues in workflow automation platforms, and to troubleshoot them.Let me first break down the jargons in the above statement:“To help internal users identify errors or issues”This means giving people working in my company the tools or guidance to find mistakes or problems in their automated tasks.“in workflow automation platforms”These are the tools or software used to set up these automated processes, such as Zapier, Microsoft Power Automate, or Integromat. They let users connect different apps to automatically carry out tasks without needing someone to do them manually.“and to troubleshoot them”Troubleshooting is the process of figuring out what went wrong and fixing it. I wanted to help people understand and solve problems they find in these automated tasks.Here is another example of how workflow automation tools work: Automated Birthday Reminder Workflow:Trigger: Runs monthly using an HR management app (like BambooHR or Gusto) to check for upcoming birthdays.Reminder Email: Sends an email through an email marketing tool (like Mailchimp or Outlook) to the team about birthdays next month.Card Collection: Uses a collaboration app (like Slack or Microsoft Teams) to notify team members to contribute to a group card or gift.Event Creation: Adds a birthday celebration to a shared calendar (like Google Calendar or Outlook Calendar).Follow-Up Reminder: Sends a reminder a week before using a task management tool (like Trello or Asana) to finalize details.But the design problem I was trying to solve was far from simple. I was trying to help internal users identify errors or issues in the workflow automation platform used by them, and to troubleshoot those errors.It was very nuanced, technical and complicated. I was trying to look into the following 2 aspects:How can I design the actual error message so that it helps users to troubleshoot errors in the automation workflow?How can the errors be shown effectively to 4 different type of users, solve different error types in varied contexts?To simplify things, this is how one of the typical journeys would look like for the users:Open a failed workflow → See how many errors occurred and where → Identify error type, location and reason → Either solve it, or escalate to another teamSource: Image generated by authorOne of the tough challenges for me was making sure that the error message was designed perfectly so that different users with their own goals can easily understand what to do next.The other challenge was to make sure that the end-to-end process of debugging and resolving errors was intuitive. But that is not something we will be diving into today.Here is how I would de-construct the anatomy of an error message:Anatomy of an error message | Source: Image generated by authorTip: Instead of blindly using the above anatomy, a better approach would be noting down all possible details the user might need to see on the error message, prioritising them and shortlist ONLY the must-have details on the card.The best error designs will come from a mix of good product research, stakeholder collaboration, and user feedback.These are some of the iterations of error message cards I worked on, with varied colour usage, iconography, hierarchy and information:Source: Image generated by authorThese are my 7 key takeaways from the exercise of helping users troubleshoot errors:1. Use colours and icons wiselyEveryone knows that in the world of signs and semiotics, red = danger.But there are many variations of catching the user’s attention to something that has gone wrong. A quick google search for “error icons” shows 2 different colours and 4 different type of icons being used to denote the same.But which one works best?Source: Google search results screenshot for “error icons”This is where context comes into play, along with considerations for your own design system, if you have one.If I were to break down how Workato (a workflow automation tool) has done this:Source: www.workato.comThe topmost error message, which acts as a summary, grabs the initial attention with the translucent red box, a distinct left border and a clear heading stating what has happened.2. The next order of business is debugging errors at each step. Upon clicking one action of the flow, the user can see the main things they can do to fix the errors in the step.3. One error icon has been used on the step node, and the same icon has been used in the right panel where the tool suggests how the user can fix the step4. And the fourth observation is a typical input field level error message “Please complete this required field”.Looking at the complexity of the product, it is very important to ensure consistency of colour and iconography to reduce the cognitive load of someone who is already doing a complex job.2. Where should the error message be placed?The location of the error message depends entirely on how much importance you want to give it and how critical the action is.Figure this out first:How important is the error message?What happens if the user somehow misses the error message, skims past it, or ignores it?Make.com, an automation tool, shows errors using icons and colours onlyIn Make.com, the user has to click on the app to view more detailsError messages should be positioned close to where the error occurred.This proximity helps users quickly identify the problem area without having to search for it. It would also be useful to have inline validation for errors where the user can immediately interact with the elements and see the real-time feedback.Monday.com gives the user a way to solve the error inline — right where it occurredMaintain consistency in error message placement throughout your application. This helps users develop a mental model of where to expect error feedback.In complex interfaces, consider placing error messages in a dedicated area that’s always visible, such as a persistent sidebar or status bar. This can be particularly useful for ongoing processes or multi-step workflows.The image below shows how Workato places the error summary at the top:Source: www.workato.com3. Possible next actionsDesign interfaces that minimise the work required to fix errors. Auto-correct minor issues when possible. Auto-fixing or using smart defaults might work for errors in simple forms, but for complex use cases, might not be that “smart” of a choice.Offer contextual help documentation linked directly from error messages, like Zapier, Workato, or Hubspot do.Hubspot offers external links to help the user either solve the error on their own, or contact Hubspot supportGiving corrective measures or suggestions might make it easier for the users to solve the errors faster than going through the help docs — though having help docs is better than figuring out how to solve the issue on their own.Workato lists all errors that have occurred at each step in the workflow, and directs the user to the specific configuration in the panel where the error has occurred:Source: www.workato.comZapier follows a brilliant approach of not only giving the technical details of the error, but also using human understandable language to help non-techies resolve their issue. They also give a link to the help docs.Source: zapier.comTray.io only shows errors in the form of the input and output, which may not be understood by laymen like you and I, but it might make perfect sense to their target audience — people with knowledge of building integrations and workflows.Tray.io showing error logs for the workflow4. Making sure the experience scales for different users, for different error types, and in different contextsThis issue was very specific to the problem I was trying to solve.Imagine this scenario.User Type 1 opens Application 1, sees an error, and realises that it is out of their scope to solve it.So they reach out to User Type 2, a person with more technical knowledge, and ask them to look into it.User Type 2 realises that the root cause of the error is in some configuration in Application 2, not Application 1. So they open Application 2 and test the automation workflow to see what is causing the error there.In this scenario, it was crucial for me to make sure that the error resolution experience was uniform for Applications 1 and 2, but also that the user is able to differentiate quickly as to whether they are in Application 1 or 2.To reduce the cognitive load on the user when they are trying to figure out which app they are in, I used iconography and UX copy to make sure that the difference was known. But these are more subtle ways of showing the difference.A more direct way could be having one visual differentiator between both applications to make sure the user does not have to spend a lot of conscious effort in identifying where they are.Differentiating Application 1 with a header like Google Meet screen sharing. It also lets the user know what kind of actions they can do here.Differentiating Application 2 without a view mode5. Ensure that the experience is accessibleWhen I was designing for this experience, I was not educated enough about how to design for accessibility. But if I could go back and rework on this, here are some of the things I would consider:Screen Reader CompatibilityTest your interface with popular screen readers to ensure content is properly announced and navigable.Verify that all interactive elements have appropriate ARIA labels and roles.Check that dynamic content updates are announced to screen reader users.Keyboard NavigationEnsure all functionality is accessible via keyboard alone, without requiring a mouse.Verify logical tab order through the interface.Test that focus indicators are visible and follow a logical path.Don’t rely on colour alone to convey information — use additional visual cues. This was something I ensured to follow in the designs, as mentioned above, with the use of colours, UX copy, as well as icons.To sum up…Use colours and icons wiselyIdentify where the error message should be placed, and whySuggest the next possible actions to the user to help them solve the errorsMaking sure the experience scales for different users, for different error types, and in different contextsEnsure that the experience is accessibleReferences:UX Design Practices for Error Screens and MessagesError-Message Guidelines — Nielsen Norman GroupError Messages Designing and UX 101 — Usersnap BlogDesigning Better Error Messages UX — Smashing Magazine7 Mistakes to Avoid When Designing the User Experience for Your …How to Design User-Friendly Error Messages?",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*hts2GkUuEvAlB8sqjl8njA.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"84cc\"\u003e\u003cem\u003eEnsuring good visual representation, easy-to-understand copy, thoughtful error placement, intuitive troubleshooting techniques, and accessible error resolution.\u003c/em\u003e\u003c/h2\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@ruchaabhyankar?source=post_page---byline--f7a8a28c676d--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Rucha Abhyankar\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*hN-80VlYONyGX9eQ-G2Alg.png\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://uxdesign.cc/?source=post_page---byline--f7a8a28c676d--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"UX Collective\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*mDhF9X4VO0rCrJvWFatyxg.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003eSource: \u003ca href=\"https://grafana.com/docs/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGrafana technical docs\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"59ec\"\u003ePicture this: you’re in the middle of troubleshooting a critical issue, and time is running out.\u003c/p\u003e\u003cp id=\"8883\"\u003eYou’re staring at a screen full of error logs, trying to figure out where your workflow failed. There’s so much information, but nothing points to the exact cause.\u003c/p\u003e\u003cp id=\"4394\"\u003eYou need to sift through mountains of data to get the right insights to get to the solution. It’s like trying to find a needle in a haystack, with every second counting.\u003c/p\u003e\u003cp id=\"4fdc\"\u003eSomehow, you are able to pull off solving the critical issue in time — and thank God for that, otherwise it would’ve cost the organisation you work for, a huge customer.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"c629\"\u003eAs a UX designer working on B2B SaaS products, I found myself solving for a similar problem faced by our company’s internal users. My goal was simple: To help internal users identify errors or issues in workflow automation platforms, and to troubleshoot them.\u003c/p\u003e\u003cp id=\"c619\"\u003eLet me first break down the jargons in the above statement:\u003c/p\u003e\u003cp id=\"323f\"\u003e“To help internal users identify errors or issues”\u003c/p\u003e\u003cul\u003e\u003cli id=\"3816\"\u003eThis means giving people working in my company the tools or guidance to find mistakes or problems in their automated tasks.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"dfdc\"\u003e“in workflow automation platforms”\u003c/p\u003e\u003cul\u003e\u003cli id=\"51ac\"\u003eThese are the tools or software used to set up these automated processes, such as Zapier, Microsoft Power Automate, or Integromat. They let users connect different apps to automatically carry out tasks without needing someone to do them manually.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"5b16\"\u003e“and to troubleshoot them”\u003c/p\u003e\u003cul\u003e\u003cli id=\"41dd\"\u003eTroubleshooting is the process of figuring out what went wrong and fixing it. I wanted to help people understand and solve problems they find in these automated tasks.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"9609\"\u003eHere is another example of how workflow automation tools work: Automated Birthday Reminder Workflow:\u003c/p\u003e\u003cul\u003e\u003cli id=\"88b3\"\u003eTrigger: Runs monthly using an HR management app (like BambooHR or Gusto) to check for upcoming birthdays.\u003c/li\u003e\u003cli id=\"6e11\"\u003eReminder Email: Sends an email through an email marketing tool (like Mailchimp or Outlook) to the team about birthdays next month.\u003c/li\u003e\u003cli id=\"471d\"\u003eCard Collection: Uses a collaboration app (like Slack or Microsoft Teams) to notify team members to contribute to a group card or gift.\u003c/li\u003e\u003cli id=\"7cda\"\u003eEvent Creation: Adds a birthday celebration to a shared calendar (like Google Calendar or Outlook Calendar).\u003c/li\u003e\u003cli id=\"2a7f\"\u003eFollow-Up Reminder: Sends a reminder a week before using a task management tool (like Trello or Asana) to finalize details.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp id=\"7aaf\"\u003eBut the design problem I was trying to solve was far from simple. I was trying to help internal users identify errors or issues in the workflow automation platform used by them, and to troubleshoot those errors.\u003c/p\u003e\u003cp id=\"3deb\"\u003eIt was very nuanced, technical and complicated. I was trying to look into the following 2 aspects:\u003c/p\u003e\u003col\u003e\u003cli id=\"d7fd\"\u003e\u003cstrong\u003eHow can I design the actual error message\u003c/strong\u003e so that it helps users to troubleshoot errors in the automation workflow?\u003c/li\u003e\u003cli id=\"ce0b\"\u003e\u003cstrong\u003eHow can the errors be shown effectively to 4 different type of users\u003c/strong\u003e, solve different error types in varied contexts?\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"eb55\"\u003eTo simplify things, this is how one of the typical journeys would look like for the users:\u003c/p\u003e\u003cp id=\"031e\"\u003e\u003cem\u003eOpen a failed workflow → See how many errors occurred and where → Identify error type, location and reason → Either solve it, or escalate to another team\u003c/em\u003e\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eSource: Image generated by author\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"92c2\"\u003eOne of the tough challenges for me was making sure that the error message was designed perfectly so that different users with their own goals can easily understand what to do next.\u003c/p\u003e\u003cp id=\"b8ce\"\u003eThe other challenge was to make sure that the end-to-end process of debugging and resolving errors was intuitive. But that is not something we will be diving into today.\u003c/p\u003e\u003cp id=\"8cd7\"\u003eHere is how I would de-construct the anatomy of an error message:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eAnatomy of an error message | Source: Image generated by author\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"e0a6\"\u003e\u003cstrong\u003eTip\u003c/strong\u003e: Instead of blindly using the above anatomy, a better approach would be noting down all possible details the user might need to see on the error message, prioritising them and shortlist ONLY the must-have details on the card.\u003c/p\u003e\u003cp id=\"30eb\"\u003eThe best error designs will come from a mix of good product research, stakeholder collaboration, and user feedback.\u003c/p\u003e\u003cp id=\"964b\"\u003eThese are some of the iterations of error message cards I worked on, with varied colour usage, iconography, hierarchy and information:\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cfigcaption\u003eSource: Image generated by author\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"c0dc\"\u003eThese are my 7 key takeaways from the exercise of helping users troubleshoot errors:\u003c/p\u003e\u003ch2 id=\"7a5e\"\u003e1. Use colours and icons wisely\u003c/h2\u003e\u003cp id=\"0640\"\u003eEveryone knows that in the world of signs and semiotics, red = danger.\u003c/p\u003e\u003cp id=\"d4ba\"\u003eBut there are many variations of catching the user’s attention to something that has gone wrong. A quick google search for “error icons” shows 2 different colours and 4 different type of icons being used to denote the same.\u003c/p\u003e\u003cp id=\"2e11\"\u003eBut which one works best?\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cfigcaption\u003eSource: Google search results screenshot for “error icons”\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"eff8\"\u003eThis is where context comes into play, along with considerations for your own design system, if you have one.\u003c/p\u003e\u003cp id=\"4fc1\"\u003eIf I were to break down how Workato (a workflow automation tool) has done this:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eSource: \u003ca href=\"https://www.workato.com\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ewww.workato.com\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003col\u003e\u003cli id=\"23d4\"\u003eThe \u003cstrong\u003etopmost error message\u003c/strong\u003e, which acts as a \u003ca href=\"https://www.smashingmagazine.com/2022/08/error-messages-ux-design/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003esummary\u003c/a\u003e, grabs the initial attention with the translucent red box, a distinct left border and a clear heading stating what has happened.\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"11c2\"\u003e2. The next order of business is \u003cstrong\u003edebugging errors at each step\u003c/strong\u003e. Upon clicking one action of the flow, the user can see the main things they can do to fix the errors in the step.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"972a\"\u003e\u003cstrong\u003e3.\u003c/strong\u003e\u003ca href=\"https://www.smashingmagazine.com/2022/08/error-messages-ux-design/#never-rely-on-red-color-alone\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003e One error icon\u003c/strong\u003e\u003c/a\u003e has been used on the step node, and the same icon has been used in the \u003cstrong\u003eright panel\u003c/strong\u003e where the tool suggests how the user can fix the step\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"7126\"\u003e4. And the fourth observation is a \u003ca href=\"https://www.smashingmagazine.com/2022/08/error-messages-ux-design/#in-forms-display-error-messages-above-input\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003etypical input field level error message\u003c/strong\u003e \u003c/a\u003e“Please complete this required field”.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"1da4\"\u003eLooking at the complexity of the product, it is very important to ensure consistency of colour and iconography to \u003ca href=\"https://design4users.com/ux-design-error-screens-and-messages/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ereduce the cognitive load\u003c/a\u003e of someone who is already doing a complex job.\u003c/p\u003e\u003ch2 id=\"af76\"\u003e2. Where should the error message be placed?\u003c/h2\u003e\u003cp id=\"54d5\"\u003eThe location of the error message depends entirely on \u003ca href=\"https://www.nngroup.com/articles/error-message-guidelines/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehow much importance\u003c/a\u003e you want to give it and how critical the action is.\u003c/p\u003e\u003cp id=\"d2f7\"\u003eFigure this out first:\u003c/p\u003e\u003col\u003e\u003cli id=\"a9eb\"\u003eHow important is the error message?\u003c/li\u003e\u003cli id=\"2654\"\u003eWhat happens if the user somehow misses the error message, skims past it, or ignores it?\u003c/li\u003e\u003c/ol\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"http://make.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMake.com\u003c/a\u003e, an automation tool, shows errors using icons and colours only\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eIn \u003ca href=\"http://make.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMake.com\u003c/a\u003e, the user has to click on the app to view more details\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"62c2\"\u003e\u003cem\u003eError messages should be positioned \u003c/em\u003e\u003ca href=\"https://www.nngroup.com/articles/error-message-guidelines/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003eclose to where the error occurred\u003c/em\u003e\u003c/a\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"4040\"\u003eThis proximity helps users quickly identify the problem area without having to search for it. It would also be useful to have \u003ca href=\"https://usersnap.com/blog/error-messages-best-practices/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003einline validation\u003c/a\u003e for errors where the user can immediately interact with the elements and see the real-time feedback.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"http://monday.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMonday.com\u003c/a\u003e gives the user a way to solve the error inline — right where it occurred\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"0090\"\u003eMaintain consistency in error message placement throughout your application. This helps users develop a mental model of \u003ca href=\"https://design4users.com/ux-design-error-screens-and-messages/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ewhere to expect error feedback\u003c/a\u003e.\u003c/p\u003e\u003cp id=\"cefa\"\u003eIn complex interfaces, consider placing error messages in a dedicated area that’s always visible, such as a persistent sidebar or status bar. This can be particularly useful for ongoing processes or multi-step workflows.\u003c/p\u003e\u003cp id=\"0e85\"\u003eThe image below shows how Workato places the error summary at the top:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eSource: \u003ca href=\"https://www.workato.com\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ewww.workato.com\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"b548\"\u003e3. Possible next actions\u003c/h2\u003e\u003cp id=\"bb94\"\u003eDesign interfaces that \u003ca href=\"https://design4users.com/ux-design-error-screens-and-messages/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eminimise the work required to fix errors\u003c/a\u003e. Auto-correct minor issues when possible. \u003ca href=\"https://www.nngroup.com/articles/error-message-guidelines/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAuto-fixing\u003c/a\u003e or using \u003ca href=\"https://www.smashingmagazine.com/2022/08/error-messages-ux-design/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003esmart defaults\u003c/a\u003e might work for errors in simple forms, but for complex use cases, might not be that “smart” of a choice.\u003c/p\u003e\u003cp id=\"b386\"\u003eOffer contextual help documentation linked directly from error messages, like Zapier, Workato, or Hubspot do.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eHubspot offers external links to help the user either solve the error on their own, or contact Hubspot support\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"e7ed\"\u003e\u003ca href=\"https://www.wowmakers.com/blog/user-friendly-error-messages/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGiving corrective measures\u003c/a\u003e or suggestions might make it easier for the users to solve the errors faster than going through the help docs — though having help docs is better than figuring out how to solve the issue on their own.\u003c/p\u003e\u003cp id=\"4143\"\u003eWorkato lists all errors that have occurred at each step in the workflow, and directs the user to the specific configuration in the panel where the error has occurred:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eSource: \u003ca href=\"https://www.workato.com\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ewww.workato.com\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"65ed\"\u003eZapier follows a brilliant approach of not only giving the technical details of the error, but also using human understandable language to help non-techies resolve their issue. They also give a link to the help docs.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eSource: \u003ca href=\"https://zapier.com\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ezapier.com\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"f919\"\u003e\u003ca href=\"http://tray.io/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eTray.io\u003c/a\u003e only shows errors in the form of the input and output, which may not be understood by laymen like you and I, but it might make perfect sense to their target audience — people with knowledge of building integrations and workflows.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"http://tray.io/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eTray.io\u003c/a\u003e showing error logs for the workflow\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"15ff\"\u003e4. Making sure the experience scales for different users, for different error types, and in different contexts\u003c/h2\u003e\u003cp id=\"d412\"\u003eThis issue was very specific to the problem I was trying to solve.\u003c/p\u003e\u003cp id=\"c9e4\"\u003eImagine this scenario.\u003c/p\u003e\u003col\u003e\u003cli id=\"f314\"\u003eUser Type 1 opens Application 1, sees an error, and realises that it is out of their scope to solve it.\u003c/li\u003e\u003cli id=\"338a\"\u003eSo they reach out to User Type 2, a person with more technical knowledge, and ask them to look into it.\u003c/li\u003e\u003cli id=\"54dd\"\u003eUser Type 2 realises that the root cause of the error is in some configuration in Application 2, not Application 1. So they open Application 2 and test the automation workflow to see what is causing the error there.\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"8e1a\"\u003eIn this scenario, it was crucial for me to make sure that the error resolution experience was uniform for Applications 1 and 2, but also that the user is able to differentiate quickly as to whether they are in Application 1 or 2.\u003c/p\u003e\u003cp id=\"8ab1\"\u003eTo reduce the cognitive load on the user when they are trying to figure out which app they are in, I used iconography and UX copy to make sure that the difference was known. But these are more subtle ways of showing the difference.\u003c/p\u003e\u003cp id=\"eae6\"\u003eA more direct way could be having one visual differentiator between both applications to make sure the user does not have to spend a lot of conscious effort in identifying where they are.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eDifferentiating Application 1 with a header like Google Meet screen sharing. It also lets the user know what kind of actions they can do here.\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eDifferentiating Application 2 without a view mode\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"43bc\"\u003e5. Ensure that the experience is accessible\u003c/h2\u003e\u003cp id=\"f12e\"\u003eWhen I was designing for this experience, I was not educated enough about how to design for accessibility. But if I could go back and rework on this, here are some of the things I would consider:\u003c/p\u003e\u003cp id=\"1a69\"\u003e\u003cstrong\u003eScreen Reader Compatibility\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"3f52\"\u003eTest your interface with popular \u003ca href=\"https://www.smashingmagazine.com/2022/08/error-messages-ux-design/#don-t-rely-on-toast-error-messages\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003escreen readers\u003c/a\u003e to ensure content is properly announced and navigable.\u003c/li\u003e\u003cli id=\"805e\"\u003eVerify that all interactive elements have \u003ca href=\"https://medium.com/@psnavya90/screen-reader-compatibility-in-accessibility-testing-a39f22df2958\" rel=\"noopener\"\u003eappropriate ARIA labels\u003c/a\u003e and roles.\u003c/li\u003e\u003cli id=\"ace4\"\u003eCheck that dynamic content updates are announced to screen reader users.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"6ef5\"\u003e\u003cstrong\u003eKeyboard Navigation\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"c1cc\"\u003eEnsure all functionality is \u003ca href=\"https://www.saasframe.io/blog/unlocking-the-power-of-accessibility-in-saas-design\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eaccessible via keyboard\u003c/a\u003e alone, without requiring a mouse.\u003c/li\u003e\u003cli id=\"435b\"\u003eVerify \u003ca href=\"https://www.saasframe.io/blog/unlocking-the-power-of-accessibility-in-saas-design\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003elogical tab order\u003c/a\u003e through the interface.\u003c/li\u003e\u003cli id=\"5c45\"\u003e\u003ca href=\"https://www.nngroup.com/articles/error-message-guidelines/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eTest that focus indicators are visible\u003c/a\u003e and follow a logical path.\u003c/li\u003e\u003c/ul\u003e\u003cblockquote\u003e\u003cp id=\"4e04\"\u003e\u003cstrong\u003e\u003cem\u003eDon’t rely on colour alone\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e to convey information — use additional visual cues. This was something I ensured to follow in the designs, as mentioned above, with the use of colours, UX copy, as well as icons.\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"a63a\"\u003eTo sum up…\u003c/h2\u003e\u003col\u003e\u003cli id=\"1bbe\"\u003eUse colours and icons wisely\u003c/li\u003e\u003cli id=\"dda8\"\u003eIdentify where the error message should be placed, and why\u003c/li\u003e\u003cli id=\"eedc\"\u003eSuggest the next possible actions to the user to help them solve the errors\u003c/li\u003e\u003cli id=\"fc44\"\u003eMaking sure the experience scales for different users, for different error types, and in different contexts\u003c/li\u003e\u003cli id=\"a976\"\u003eEnsure that the experience is accessible\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"2e31\"\u003e\u003cstrong\u003eReferences:\u003c/strong\u003e\u003c/p\u003e\u003col\u003e\u003cli id=\"4843\"\u003e\u003ca href=\"https://design4users.com/ux-design-error-screens-and-messages/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eUX Design Practices for Error Screens and Messages\u003c/a\u003e\u003c/li\u003e\u003cli id=\"c217\"\u003e\u003ca href=\"https://www.nngroup.com/articles/error-message-guidelines/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eError-Message Guidelines — Nielsen Norman Group\u003c/a\u003e\u003c/li\u003e\u003cli id=\"b58f\"\u003e\u003ca href=\"https://usersnap.com/blog/error-messages-best-practices/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eError Messages Designing and UX 101 — Usersnap Blog\u003c/a\u003e\u003c/li\u003e\u003cli id=\"a415\"\u003e\u003ca href=\"https://www.smashingmagazine.com/2022/08/error-messages-ux-design/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDesigning Better Error Messages UX — Smashing Magazine\u003c/a\u003e\u003c/li\u003e\u003cli id=\"4fd4\"\u003e\u003ca href=\"https://www.useparagon.com/blog/7-user-experience-mistakes-to-avoid\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e7 Mistakes to Avoid When Designing the User Experience for Your …\u003c/a\u003e\u003c/li\u003e\u003cli id=\"048f\"\u003e\u003ca href=\"https://www.wowmakers.com/blog/user-friendly-error-messages/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eHow to Design User-Friendly Error Messages?\u003c/a\u003e\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2024-11-05T19:26:49.285Z",
  "modifiedTime": null
}
