{
  "id": "748d4be2-a361-4bd5-9f18-c6d0b96f297c",
  "title": "Why text formatting experiences can be a trap",
  "link": "https://uxdesign.cc/why-text-formatting-experiences-can-be-a-trap-13273872ec8f?source=rss----138adf9c44c---4",
  "description": "",
  "author": "Nik Jeleniauskas",
  "published": "Mon, 11 Nov 2024 19:48:15 GMT",
  "source": "https://uxdesign.cc/feed",
  "categories": [
    "usability",
    "accessibility",
    "ux",
    "design",
    "product-design"
  ],
  "byline": "Nik Jeleniauskas",
  "length": 6910,
  "excerpt": "One of the more foundational experiences in a digital product is the ability to format text: creating paragraphs, adding lists, or providing emphasis for certain words or phrases. All of this adds…",
  "siteName": "UX Collective",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*dn6MbbIIlwobt0jnUcrt_Q.png",
  "text": "There are several ways products can improve a keyboard user’s experience with indentation. Let’s talk about them.One of the more foundational experiences in a digital product is the ability to format text: creating paragraphs, adding lists, or providing emphasis for certain words or phrases. All of this adds texture to the reader’s experience and helps them better understand content. And for the author, there are several established ways in which they can navigate, select, and format this text.But what happens to the author experience when an important part of text formatting includes indentation?This is an important situation for designers to understand because for keyboard users, indentation is always controlled by the Tab key. But this key has a far more important function for accessibility: it’s the primary way these users navigate digital products. And as a result, when indentation is enabled in a text formatting experience it raises an important question:has the user’s ability to navigate the product been broken?This is so important in fact that “not being trapped” while using a keyboard is a fundamental requirement by the Web Content Accessibility Guidelines (WCAG). But this also raises a few practical questions. If no keyboard traps are required, then…How are these traps typically handled for these experiences? And how do users discover existing exit methods?And this is where things get a little complicated.Existing methods and opaque standardsAs the industry has matured over the last couple of decades, many products have chosen to solve this challenge differently. And one important result from this is that there’s no industry-wide consensus about what the right solution should be.One existing method is to use the F6 key as an alternate form of navigation. But unfortunately, it’s inconsistently used across applications and operating systems. For example, some browsers use this key to navigate between major landmarks (Firefox, Chrome, Edge) while others (Safari, Arc) do not. At the same time the F6 key may also execute other functions, such as cycling through non-landmark elements or repeating the last user action. And an important side-effect of this inconsistency is that discovering exit methods by a user is impaired. But there’s something else that makes matters a little more challenging.When looking at Success Criterion (2.1.2) more closely, there’s no clear definition for what a “standard exit method” is. And as a result of this, it’s also not clear when or how a user “must be advised” of an non-standard method.I do think the guideline hints at its overall intent, that exit methods should be both available and easily discoverable. But to better illustrate how this affects users, let’s look at a common situation with Google Docs.Trapped in a Google DocWhen a user opens a Google Doc, focus is immediately (and smartly) moved to the main text area for editing. If the user then wishes to move to another part of the application — say the toolbar — they can either use the F6 key or custom shortcuts to exit this text area. Except, there’s a small problem with both of these methods.Because the F6 key’s functionality is not consistent it cannot be used to meet the Success Criterion, leaving the user to rely on custom shortcuts. Unfortunately, these shortcuts are also not directly communicated to users and the only way to escape this text area with a keyboard is random trial and error.From the user’s perspective this outcome is obviously frustrating. However, because of the language of the Success Criterion it could be argued that Google is adhering to the guideline as the application does technically “advise the user” — just not directly.With this in mind then, what could we do to fix this problem?Situations with different needsWhen it comes to text formatting experiences that include indentation, there are two situations that users will encounter.The most common situation is when indentation is only allowed for specific formatting options. And thankfully this situation is much more forgiving as the user always has at least one option to step away from this “trap” and return to navigation.An example of this is Slack’s primary message component. When a user adds list formatting to their text and either (1) the caret is also at the start of a list item or (2) any part of the list item’s text is selected, the Tab key is rewritten to control indentation. And it’s easy enough to escape these situations to re-enable normal navigation behaviors.In contrast, the more challenging situation is when indentation is always enabled as there is no position within the text that will re-enable the default function of the Tab key. And it’s this situation that needs help the most.Creating a better, more consistent solutionIndent-enabled text formatting experiences affect how users both interact with and navigate products. And I’d like to suggest a few adjustments that would both clarify how this problem can be solved, and provide a more consistent user experience.The F6 key and WCAGThe first change would be to enshrine F6 as a landmark navigation key in WCAG and require it to be used for this function, and this function alone. And this not only would provide a guaranteed exit method for keyboard users, but it would also improve landmark navigation in products as well (a great side-benefit).Improving the Success CriterionAnother improvement would be to clearly define in Success Criterion (2.1.2) what exactly constitutes a “standard exit method”, what “advising the user” means, and if better discoverability is the underlying intent of the guideline.Consistent local interaction behaviorsFinally, adjusting the interaction model of these experiences would be the most practical and consistent way of helping users. And only small changes are actually needed here.The most meaningful change would be to extend the functionality of the Escape key so that it can toggle between an active or inactive editor state. This would provide a consistent way to exit this component. And a few additional behaviors — like progressively clearing conditional functionalities or remembering the caret’s last position — would also improve the overall user experience.There’s also a larger benefit to this solution as well. Because it provides a consistent model at the component level, it could also be used across any product that includes this kind of formatting experience. And this would greatly improve it’s chances to be discovered — whether that’s Google Docs or Obsidian, coding tools like VSCode, or many other text editing tools that exist.And whether it’s a person using a keyboard due to a mobility impairment or someone who just wants a more consistent way to navigate their environment, these changes would positively impact their experience with these indentation-enabled text formatting situations (that’s really a mouthful).",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*z95qvd4lSTN8m5eYASwwiQ.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"62dc\"\u003eThere are several ways products can improve a keyboard user’s experience with indentation. Let’s talk about them.\u003c/h2\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@nikolas.jeleniauskas?source=post_page---byline--13273872ec8f--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Nik Jeleniauskas\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*B9FkBmYQiBfqU8BkLBi8dg.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://uxdesign.cc/?source=post_page---byline--13273872ec8f--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"UX Collective\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*mDhF9X4VO0rCrJvWFatyxg.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"2a09\"\u003eOne of the more foundational experiences in a digital product is the ability to format text: creating paragraphs, adding lists, or providing emphasis for certain words or phrases. All of this adds texture to the reader’s experience and helps them better understand content. And for the author, there are several established ways in which they can navigate, select, and format this text.\u003c/p\u003e\u003cp id=\"96c6\"\u003eBut what happens to the author experience when an important part of text formatting includes indentation?\u003c/p\u003e\u003cp id=\"933e\"\u003eThis is an important situation for designers to understand because for keyboard users, indentation is always controlled by the \u003cstrong\u003e\u003cem\u003eTab\u003c/em\u003e\u003c/strong\u003e key. But this key has a far more important function for accessibility: it’s the \u003cstrong\u003eprimary way these users navigate\u003c/strong\u003e digital products. And as a result, when indentation is enabled in a text formatting experience it raises an important question:\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"7cc1\"\u003ehas the user’s ability to navigate the product been broken?\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"dba0\"\u003eThis is so important in fact that “not being trapped” while using a keyboard is a \u003ca href=\"https://www.w3.org/TR/WCAG22/#no-keyboard-trap\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003efundamental requirement\u003c/a\u003e by the Web Content Accessibility Guidelines (WCAG). But this also raises a few practical questions. If no keyboard traps are required, then…\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"6601\"\u003eHow are these traps typically handled for these experiences? And how do users discover existing exit methods?\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"71d5\"\u003eAnd this is where things get a little complicated.\u003c/p\u003e\u003ch2 id=\"b958\"\u003eExisting methods and opaque standards\u003c/h2\u003e\u003cp id=\"20d3\"\u003eAs the industry has matured over the last couple of decades, many products have chosen to solve this challenge differently. And one important result from this is that there’s no industry-wide consensus about what the right solution should be.\u003c/p\u003e\u003cp id=\"5265\"\u003eOne existing method is to use the \u003cstrong\u003e\u003cem\u003eF6\u003c/em\u003e\u003c/strong\u003e key as an alternate form of navigation. But unfortunately, it’s inconsistently used across applications and operating systems. For example, some browsers use this key to navigate between major landmarks (Firefox, Chrome, Edge) while others (Safari, Arc) do not. At the same time the \u003cstrong\u003e\u003cem\u003eF6\u003c/em\u003e\u003c/strong\u003e key may also execute other functions, such as cycling through non-landmark elements or repeating the last user action. And an important side-effect of this inconsistency is that discovering exit methods by a user is impaired. But there’s something else that makes matters a little more challenging.\u003c/p\u003e\u003cp id=\"cc64\"\u003eWhen looking at \u003ca href=\"https://www.w3.org/TR/WCAG22/#no-keyboard-trap\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSuccess Criterion (2.1.2)\u003c/a\u003e more closely, there’s no clear definition for what a \u003cstrong\u003e“standard exit method”\u003c/strong\u003e is. And as a result of this, it’s also not clear when or how a user \u003cstrong\u003e“must be advised”\u003c/strong\u003e of an non-standard method.\u003c/p\u003e\u003cp id=\"3641\"\u003eI do think the guideline hints at its overall intent, that exit methods should be both \u003cstrong\u003eavailable\u003c/strong\u003e and \u003cstrong\u003eeasily discoverable\u003c/strong\u003e. But to better illustrate how this affects users, let’s look at a common situation with Google Docs.\u003c/p\u003e\u003cp id=\"94a5\"\u003e\u003cstrong\u003eTrapped in a Google Doc\u003c/strong\u003e\u003cbr/\u003eWhen a user opens a Google Doc, focus is immediately (and smartly) moved to the main text area for editing. If the user then wishes to move to another part of the application — say the toolbar — they can either use the \u003cstrong\u003e\u003cem\u003eF6\u003c/em\u003e\u003c/strong\u003e key or custom shortcuts to exit this text area. Except, there’s a small problem with both of these methods.\u003c/p\u003e\u003cp id=\"6fca\"\u003eBecause the \u003cstrong\u003e\u003cem\u003eF6\u003c/em\u003e\u003c/strong\u003e key’s functionality is not consistent it cannot be used to meet the Success Criterion, leaving the user to rely on custom shortcuts. Unfortunately, these shortcuts are also not directly communicated to users and the only way to escape this text area with a keyboard is random trial and error.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"68c1\"\u003eFrom the user’s perspective this outcome is obviously frustrating. However, because of the language of the Success Criterion it could be argued that Google is adhering to the guideline as the application does technically “advise the user” — just not directly.\u003c/p\u003e\u003cp id=\"0070\"\u003eWith this in mind then, what could we do to fix this problem?\u003c/p\u003e\u003ch2 id=\"1e32\"\u003eSituations with different needs\u003c/h2\u003e\u003cp id=\"d412\"\u003eWhen it comes to text formatting experiences that include indentation, there are two situations that users will encounter.\u003c/p\u003e\u003cp id=\"3161\"\u003eThe most common situation is when indentation is only allowed for specific formatting options. And thankfully this situation is much more forgiving as the user always has at least one option to step away from this “trap” and return to navigation.\u003c/p\u003e\u003cp id=\"ce40\"\u003eAn example of this is Slack’s primary message component. When a user adds list formatting to their text \u003cstrong\u003e\u003cem\u003eand\u003c/em\u003e\u003c/strong\u003e either (1) the caret is also at the start of a list item or (2) any part of the list item’s text is selected, the \u003cstrong\u003e\u003cem\u003eTab\u003c/em\u003e\u003c/strong\u003e key is rewritten to control indentation. And it’s easy enough to escape these situations to re-enable normal navigation behaviors.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"aacc\"\u003eIn contrast, the more challenging situation is when indentation is \u003cstrong\u003ealways\u003c/strong\u003e enabled as there is no position within the text that will re-enable the default function of the \u003cstrong\u003e\u003cem\u003eTab\u003c/em\u003e\u003c/strong\u003e key. And it’s this situation that needs help the most.\u003c/p\u003e\u003ch2 id=\"b27f\"\u003eCreating a better, more consistent solution\u003c/h2\u003e\u003cp id=\"1f41\"\u003eIndent-enabled text formatting experiences affect how users both interact with and navigate products. And I’d like to suggest a few adjustments that would both clarify how this problem can be solved, and provide a more consistent user experience.\u003c/p\u003e\u003cp id=\"f774\"\u003e\u003cstrong\u003eThe F6 key and WCAG\u003c/strong\u003e\u003cbr/\u003eThe first change would be to enshrine \u003cstrong\u003e\u003cem\u003eF6\u003c/em\u003e\u003c/strong\u003e as a landmark navigation key in WCAG and require it to be used for this function, and this function alone. And this not only would provide a guaranteed exit method for keyboard users, but it would also improve landmark navigation in products as well (a great side-benefit).\u003c/p\u003e\u003cp id=\"bd74\"\u003e\u003cstrong\u003eImproving the Success Criterion\u003c/strong\u003e\u003cbr/\u003eAnother improvement would be to clearly define in \u003ca href=\"https://www.w3.org/TR/WCAG22/#no-keyboard-trap\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSuccess Criterion (2.1.2)\u003c/a\u003e what exactly constitutes a \u003cstrong\u003e“standard exit method”\u003c/strong\u003e, what \u003cstrong\u003e“advising the user”\u003c/strong\u003e means, and if better discoverability is the underlying intent of the guideline.\u003c/p\u003e\u003cp id=\"1ac4\"\u003e\u003cstrong\u003eConsistent local interaction behaviors\u003c/strong\u003e\u003cbr/\u003eFinally, adjusting the interaction model of these experiences would be the most practical and consistent way of helping users. And only small changes are actually needed here.\u003c/p\u003e\u003cp id=\"09c0\"\u003eThe most meaningful change would be to extend the functionality of the \u003cstrong\u003e\u003cem\u003eEscape\u003c/em\u003e\u003c/strong\u003e key so that it can toggle between an \u003cstrong\u003eactive\u003c/strong\u003e or \u003cstrong\u003einactive\u003c/strong\u003e editor state. This would provide a consistent way to exit this component. And a few additional behaviors — like progressively clearing conditional functionalities or remembering the caret’s last position — would also improve the overall user experience.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"e906\"\u003eThere’s also a larger benefit to this solution as well. Because it provides a consistent model at the component level, it could also be used across \u003cstrong\u003eany product\u003c/strong\u003e that includes this kind of formatting experience. And this would greatly improve it’s chances to be discovered — whether that’s Google Docs or Obsidian, coding tools like VSCode, or many other text editing tools that exist.\u003c/p\u003e\u003cp id=\"5244\"\u003eAnd whether it’s a person using a keyboard due to a mobility impairment or someone who just wants a more consistent way to navigate their environment, these changes would positively impact their experience with these indentation-enabled text formatting situations (that’s really a mouthful).\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2024-11-11T19:48:15.768Z",
  "modifiedTime": null
}
