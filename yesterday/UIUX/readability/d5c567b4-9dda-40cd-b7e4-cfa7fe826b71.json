{
  "id": "d5c567b4-9dda-40cd-b7e4-cfa7fe826b71",
  "title": "Features shouldn’t feel like features",
  "link": "https://uxdesign.cc/features-shouldnt-feel-like-features-fba44644f961?source=rss----138adf9c44c---4",
  "description": "",
  "author": "Avi Siegel",
  "published": "Thu, 19 Dec 2024 08:33:35 GMT",
  "source": "https://uxdesign.cc/feed",
  "categories": [
    "startup",
    "product-design",
    "user-experience",
    "product-management",
    "ux"
  ],
  "byline": "Avi Siegel",
  "length": 16978,
  "excerpt": "Ever use a product where everything just clicked? Where functionality felt so intuitive it was almost invisible? Where every interaction felt natural, as if the product were reading your mind? It’s a…",
  "siteName": "UX Collective",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*dn6MbbIIlwobt0jnUcrt_Q.png",
  "text": "Why (and how) to craft product experiences that feel inevitablePhoto by Dev Asangbam on UnsplashEver use a product where everything just clicked? Where functionality felt so intuitive it was almost invisible? Where every interaction felt natural, as if the product were reading your mind?It’s a magical feeling, isn’t it? Like the product was designed specifically for you, anticipating your every need. No hunting through menus, no awkward workarounds, no puzzling over how to accomplish whatever it is that you’re trying to accomplish — everything just flows.Now think about the last time you had to learn a new tool. Recall that overwhelming feeling of staring at the endless navigation, the seemingly infinite buttons on every page, the dashboard that seems like it’s trying to tell you an answer, if only you knew how to speak its language.The difference between these experiences isn’t about having more or fewer capabilities. It’s about how naturally those capabilities fit into the way you work.That’s the power of experience-driven design, and it hinges on a simple but profound concept:Features shouldn’t feel like features.This isn’t just wordplay. This is a fundamental shift in how you should think about building products — one that separates truly great products from the endless parade of feature-rich but painful-to-use tools that dominate most markets.Think about it this way: When you build features, you’re asking users to learn your product. When you craft experiences, you’re adapting your product to how users already work. The best products don’t feel like collections of features to be learned — they feel like natural extensions of each user’s workflow. By shifting from feature-centric to experience-driven design, you stop adding complexity to your product and start removing friction from your users’ lives.Features that aren’tWe often think of features as distinct, self-contained units of functionality. They’re the bullet points on a product roadmap, the items in a changelog, the callouts in a monthly newsletter.And they are indeed all those things.Experiences can also be all those things, of course. But what makes them different is the way we think about them.When you just list out the things you’re building (in those aforementioned roadmaps, changelogs, and newsletters), it’s easy for it all to become a jumbled mess disconnected from the most important part of the product-building equation: the user.But when you start from the perspective of the user, it’s not about the lists of things you’re doing anymore. It becomes not just about the problems being solved, but how the pain points are being addressed and the feeling of how it all comes together into a cohesive product.A feature is something users use.An experience is something users seamlessly engage with as they accomplish their goals.Both solve the problem. But one does it on the user’s terms.An exampleLet me illustrate by way of example. (I’m sure you’ve seen the below competing concepts in various tools you’ve used — you tell me which is better.)Imagine you’re writing a comment in your task management tool, and you want to add an image for context. You drag from your desktop into the description area, and it’s added in-line.Let’s go to the other end of spectrum. You try to drag \u0026 drop, but you get a little “you can’t drop that here” icon. You realize there’s an “upload media” button, which you click, and a select-your-file modal pops open. You navigate through your computer’s file hierarchy, double click, and your image is loaded as an attachment to the task, available at the bottom of the description with no context whatsoever as to what it relates to or why it’s there.Both of these are features, of course — a product manager prioritized solving a pain point, a designer conceptualized the idea, an engineer built the functionality into the tool.And both solve the need (to add images to a task).But one is a feature that very much feels like a feature.Whereas the other? The other is a feature you barely feel because it’s an experience. It just feels right… like a natural extension of the context you’re already in… exactly what you’d expect to happen if you performed that action.That difference is features vs. experiences in a nutshell.Feature factories — badGo pull up your product roadmap. I imagine it has a pretty specific list of things you plan on building, something like this:Calendar integrationCustom database fieldsAlerts systemExport toolDashboardDark modeEtc.Each item is a feature that someone asked for, or that a competitor already has, or that seemed like a good idea during that one meeting where everyone was hopped up on caffeine and enthusiasm.The problem isn’t that these are bad ideas — I’m sure they’re great! The problem is that you’re thinking about them as features to be shipped rather than experiences to be crafted.Go back to that list — does any of that really tell you what’s needed?What does the calendar integration need to do?Do you need a custom fields features, or do you just need to add a few common fields that were left out of the initial scope?What are those alerts going to alert about? Will users actually see them in your tool, or should they end up in Slack (or wherever else your users are)?Do people need to export their data, or just get it into their BI tool?What questions are going to be answered by the dashboard? Is a dashboard the right place to answer those questions?Are your users the highly technical kind that expect dark mode in all their tools, or is it just that your CEO wants dark mode because they heard it’s all the rage?You’re creating a product that feels like it was assembled from a box of random parts rather than designed as a cohesive whole.And as such, you keep ending up with…Feature bloat: Every piece of functionality that a single person ever wanted (and yet somehow, paradoxically, nobody can do what they need to do)Inconsistency: Each feature feels different than the last, because each one was built to function in a way perfectly ideal for itself on its own, without consideration for how it fits into the bigger pictureDecreased usability \u0026 horrible UX: A cluttered interface with too many options, and nobody can find the functionality they needIf you think about features in terms of raw functionality — just adding more buttons, pages, capabilities — you end up with a feature factory. This is where products become bloated, complex, unusable messes.Experience-driven design — goodThe best features are the ones which users don’t even realize they’re using as they use them. They’re the ones that feel so natural, so obvious, that users would be surprised to learn they weren’t always there.Think about your smartphone’s keyboard. Remember when it didn’t have swipe-to-text or speech-to-text? When it didn’t autosuggest the perfect emoji? When it didn’t automatically correct your typos? Ducking right you do!Those aren’t feature anymore — they’re just how keyboards work.Emoji keyboard — feature. Emoji autosuggest — experience.Old school autocorrect (replace specific sets of characters with specific other sets of characters) — feature. Current autocorrect (just do it) — experience.Individually press every single individual letter like a plebeian — feature. Swipe- or speech-to-text — experience.Technically possible — feature.Just works — experience.That’s what you need to aim for. Not features that users have to seek out and learn to use, but experiences that just work the way users expect them to work.Some more examples for you:Documents that save automatically, instead of requiring a save button (remember when you’d lose your 20-page essay if you forgot to hit ctrl-s? Pepperidge Farm remembers)Search results that update as you type, instead of requiring you to hit enter (minimize those clicks)Copying on your phone and pasting on your laptop (i.e., universal clipboard), instead of texting yourself or sending yourself an emailForms that remember what you entered even if you accidentally navigate away, instead of losing your work and having to start over (or just give up and never submit)Code editors that format your code as you type, instead of wasting time debating the entire engineering team on the virtues of tabs vs. spacesDashboards that adjust their time range to automatically include today, instead of having to press “in the last month” every single damn time you open the dashboardAgile task management tooling that reminds you about upcoming holidays during Sprint Planning, instead of starting the sprint and realizing immediately after that you’re destined to fail to hit your goals (sigh)Notice the pattern? None of these feel like features because they’re not adding new things for users to do — they’re removing friction from things users are already doing.If you think about features in terms of experiences, you focus on providing value in the most natural and intuitive way possible. You find the best way to help users help themselves, as opposed to just adding yet another button amidst a sea of buttons.How to make features disappearOkay, so features bad / experiences good. How do you turn a feature factory into an experience studio?1. Understand the story behind the needStop asking “what features do our customers want?” — that’s like asking what tools to buy before you know what you’re building.Instead, dig deeper:What is the user actually trying to accomplish? Not just the immediate task, but the broader goal.Why is this particular need so important to the user? This goes beyond the “what do they say they want” and into the “but seriously, why do they actually want it”.What is it about the user that makes them… them? What is their role? How does that impact what they need or what they know or how they think?How does this need fit into the user’s broader workflow? What are they trying to do right before and after this particular task? This can easily influence the understanding of the “why” and the solution that becomes the “how”.[If you’re astute, you may have noticed really this all comes down to understanding the job story.]The best product experiences come from understanding the complete context of user needs, not just the specific request.2. Look for friction pointsThis is your treasure map — X marks the bad-user-experience-that-could-be-better. While users might not be great at telling you what’s wrong, their behavior leaves clues everywhere. Your job is to be a product detective, hunting down these moments of frustration before users have to complain about them.Flow disruptions: Every time a user has to stop what they’re doing and think about a next step that needs taking (especially seemingly unnecessary ones), you’ve found a friction point. Why should they have to remember to save? Why should they need to manually sync?Cognitive overhead: What are users forced to remember or track? Those task ids they keep copying and pasting everywhere? The three difference places they need to update every time something changes?Repetitive actions: If users are doing the same thing over, and over, and over again — that’s a red flag. These are ripe opportunities for behavior that could at least be simplified, if not fully automated.“I wish it just…” moments: These are pure gold. This is users telling you exactly where your product is falling short, where potentially even a slight tweak or tiny improvement could turn the unnatural into magic. (Though, be sure to pay attention to not just what they’re wishing for, but also why they wish for it.)Every point of friction is an opportunity to transform a clunky feature into an invisible experience.3. Remove before you addThis may be counterintuitive for most product teams, but it’s absolutely crucial. Before you add anything, think:Can we eliminate (or hide) a feature without causing any heartache? Are there features which are used by effectively 0% of your user base (or low enough that you’re not worried about it)? Other features will automatically be easier to discover/locate and use simply by getting rid of features that are in the way.Can we automate what users are doing manually? Look for patterns in behavior that could theoretically be handled by the system, automatically. If users always the same three actions in sequence, maybe that should be one automated flow — whether requiring one button press somewhere, or even…Can we make this happen in the background? Features that require user intervention feel like features. Things that just happen feel like magic.Can we combine multiple features into one seamless experience? Instead of having a whole feature for each related item, can we create one intuitive flow that handles everything? (In its simplest form, this can come down to solutions like putting like functionality into a single overflow menu.)The most elegant solutions often involve removing complexity rather than adding features.4. Make it feel naturalThis is where we get more into art than science. You want your product to feel it couldn’t possibly work any other way.Think in terms of magic: If you had a magic wand, how would a given feature work? That idea you have in your head is probably closer to what users actually want than whatever specific feature they may be requesting. And then, the toughest part: how can you close the gap between magic and reality?Maintain context: Features that pull users out of their flow feel like features. Can the-thing-they’re-trying-to-do happen right where they already are?Embrace progressive disclosure: Not everything needs to be visible all the time. Yes, creating a single page with a button for every possible user need means that every possible user need is only a single click away — but that doesn’t sound like a good experience, now does it?Design as if documentation doesn’t exist: Users shouldn’t need a manual to figure out how to use your product. The right action should feel obvious at the right time.Natural experiences feel like they were designed specifically for each user’s unique needs.5. Test the invisibilityHere’s how to know if you’ve succeeded, or if you still have more work to do (but note… you always have more work to do):Watch new users: If they have to ask how to do something, it probably still feels too much like a feature.Listen for silence: The best features often generate the least feedback because they just work.Track feature discovery: How are users finding particular functionality? Through documentation (bad), or through exploration (good)?Look for natural adoption: Are existing users organically discovering and using the feature without prompting? (I.e., get rid of those “look over here, new feature alert” banners and callouts and modals.)Monitor feature mentions: In user interviews, do they talk about a capability as a feature, or just as part of how they work? This comes down to the specific wording they use — “…and then I check our progress on the home screen” is indicative of an experience, whereas “…and then I open up the dashboard, change the time range to include today, and click on the revenue metric icon” sounds like a feature.The truest sign of success is when users can’t imagine how they worked without a feature, yet also can’t remember specifically when they started using it.Break freeYour product doesn’t need more features. It needs more moments where users, instead of asking “how do I do that?”, say “of course it works that way” (or ideally, never say anything at all).The next time you’re running through your roadmap of features, try this exercise: Take each item, and ask “how can we make the need for this disappear?” Not by ignoring it, of course, but by so seamlessly integrating it into the user experience that nobody even notices it’s there.This is going to require a mindset shift, but you’ll be able to get there if you try.Dig into why your users “need” certain functionality in the first place (it’s often not what they’re explicitly asking for)Figure out where they’re struggling or frustrated (even if they don’t tell you with their words)Get out of their way by removing stuff they don’t need (you don’t have to solve every problem for every user)Make everything that remains feel natural (aka magic)Prove to yourself that the changes are working (and then go back to step 1)All this might mean shipping slower. It might mean saying “no” more often. It might mean completely rethinking parts of your product.But the payoff? A product that users love without knowing why. Tools that feel like they were built just for them. Experiences so natural that users can’t imagine any other solution.Because the best features aren’t features at all — they’re just the way things should work.Speaking of seamless experiences (and the opposite)… Are you tired of fighting with Jira’s UI? I get it. That’s why we’re building Momentum — it’s Jira on the backend, but with a UX that actually helps you do agile. No migration necessary. Curious? Join the waitlist.",
  "image": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*WbHEnrbsAwHOa1Ef",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"125d\"\u003eWhy (and how) to craft product experiences that feel inevitable\u003c/h2\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://avi-siegel.medium.com/?source=post_page---byline--fba44644f961--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Avi Siegel\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*vDHUEc5y6ImpVjS6yHudDQ.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://uxdesign.cc/?source=post_page---byline--fba44644f961--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"UX Collective\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*mDhF9X4VO0rCrJvWFatyxg.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@devasangbam?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDev Asangbam\u003c/a\u003e on \u003ca href=\"https://unsplash.com/?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"3278\"\u003eEver use a product where everything just \u003cem\u003eclicked\u003c/em\u003e? Where functionality felt so intuitive it was almost invisible? Where every interaction felt natural, as if the product were reading your mind?\u003c/p\u003e\u003cp id=\"540e\"\u003eIt’s a magical feeling, isn’t it? Like the product was designed specifically for you, anticipating your every need. No hunting through menus, no awkward workarounds, no puzzling over how to accomplish whatever it is that you’re trying to accomplish — everything just flows.\u003c/p\u003e\u003cp id=\"e461\"\u003eNow think about the last time you had to learn a new tool. Recall that overwhelming feeling of staring at the endless navigation, the seemingly infinite buttons on every page, the dashboard that seems like it’s trying to tell you an answer, if only you knew how to speak its language.\u003c/p\u003e\u003cp id=\"b40a\"\u003eThe difference between these experiences isn’t about having more or fewer capabilities. It’s about how naturally those capabilities fit into the way you work.\u003c/p\u003e\u003cp id=\"f9ff\"\u003eThat’s the power of experience-driven design, and it hinges on a simple but profound concept:\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"1b0f\"\u003eFeatures shouldn’t feel like features.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"d02a\"\u003eThis isn’t just wordplay. This is a fundamental shift in how you should think about building products — one that separates truly great products from the endless parade of feature-rich but painful-to-use tools that dominate most markets.\u003c/p\u003e\u003cp id=\"7e69\"\u003eThink about it this way: When you build features, you’re asking users to learn your product. When you craft experiences, you’re adapting your product to how users already work. The best products don’t feel like collections of features to be learned — they feel like natural extensions of each user’s workflow. By shifting from feature-centric to experience-driven design, you stop adding complexity to your product and start removing friction from your users’ lives.\u003c/p\u003e\u003ch2 id=\"f486\"\u003eFeatures that aren’t\u003c/h2\u003e\u003cp id=\"1c3d\"\u003eWe often think of features as distinct, self-contained units of functionality. They’re the bullet points on a \u003ca href=\"https://gainmomentum.ai/learn/product-roadmap\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eproduct roadmap\u003c/a\u003e, the items in a \u003ca href=\"https://producthq.io/what-is-a-changelog/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003echangelog\u003c/a\u003e, the callouts in a monthly newsletter.\u003c/p\u003e\u003cp id=\"5db4\"\u003eAnd they are indeed all those things.\u003c/p\u003e\u003cp id=\"dd58\"\u003eExperiences can \u003cem\u003ealso\u003c/em\u003e be all those things, of course. But what makes them different is the way we think about them.\u003c/p\u003e\u003cp id=\"b0dc\"\u003eWhen you just list out the things you’re building (in those aforementioned roadmaps, changelogs, and newsletters), it’s easy for it all to become a jumbled mess disconnected from the most important part of the product-building equation: the user.\u003c/p\u003e\u003cp id=\"9b1f\"\u003eBut when you start from the perspective of the user, it’s not about the lists of things you’re doing anymore. It becomes not just about the problems being solved, but \u003cem\u003ehow\u003c/em\u003e the pain points are being addressed and the \u003cem\u003efeeling\u003c/em\u003e of how it all comes together into a cohesive product.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"32ab\"\u003eA feature is something users use.\u003c/p\u003e\u003cp id=\"d866\"\u003eAn experience is something users seamlessly engage with as they accomplish their goals.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"ce2f\"\u003eBoth solve the problem. But one does it on the user’s terms.\u003c/p\u003e\u003ch2 id=\"4aa4\"\u003eAn example\u003c/h2\u003e\u003cp id=\"4634\"\u003eLet me illustrate by way of example. (I’m sure you’ve seen the below competing concepts in various tools you’ve used — you tell me which is better.)\u003c/p\u003e\u003cp id=\"8991\"\u003eImagine you’re writing a comment in your \u003ca href=\"https://gainmomentum.ai/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003etask management tool\u003c/a\u003e, and you want to add an image for context. You drag from your desktop into the description area, and it’s added in-line.\u003c/p\u003e\u003cp id=\"8c8b\"\u003eLet’s go to the other end of spectrum. You \u003cem\u003etry\u003c/em\u003e to drag \u0026amp; drop, but you get a little “you can’t drop that here” icon. You realize there’s an “upload media” button, which you click, and a select-your-file modal pops open. You navigate through your computer’s file hierarchy, double click, and your image is loaded as an attachment to the task, available at the bottom of the description with no context whatsoever as to what it relates to or why it’s there.\u003c/p\u003e\u003cp id=\"cacd\"\u003eBoth of these are features, of course — a product manager prioritized solving a \u003ca href=\"https://www.launchnotes.com/glossary/pain-points-in-product-management-and-operations\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003epain point\u003c/a\u003e, a designer conceptualized the idea, an engineer built the functionality into the tool.\u003c/p\u003e\u003cp id=\"dd16\"\u003eAnd both solve the need (to add images to a task).\u003c/p\u003e\u003cp id=\"6e01\"\u003eBut one is a feature that very much feels like a feature.\u003c/p\u003e\u003cp id=\"fe4d\"\u003eWhereas the other? The other is a feature you barely feel because it’s an \u003cem\u003eexperience\u003c/em\u003e. It just feels right… like a natural extension of the context you’re already in… exactly what you’d expect to happen if you performed that action.\u003c/p\u003e\u003cp id=\"a1cc\"\u003eThat difference is features vs. experiences in a nutshell.\u003c/p\u003e\u003ch2 id=\"48ba\"\u003eFeature factories — bad\u003c/h2\u003e\u003cp id=\"4fc4\"\u003eGo pull up your product roadmap. I imagine it has a pretty specific list of things you plan on building, something like this:\u003c/p\u003e\u003cul\u003e\u003cli id=\"b57e\"\u003eCalendar integration\u003c/li\u003e\u003cli id=\"177d\"\u003eCustom database fields\u003c/li\u003e\u003cli id=\"bb65\"\u003eAlerts system\u003c/li\u003e\u003cli id=\"9567\"\u003eExport tool\u003c/li\u003e\u003cli id=\"6fb3\"\u003eDashboard\u003c/li\u003e\u003cli id=\"7e7b\"\u003e\u003ca href=\"https://www.nngroup.com/articles/dark-mode-users-issues/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDark mode\u003c/a\u003e\u003c/li\u003e\u003cli id=\"fde5\"\u003eEtc.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"26bd\"\u003eEach item is a feature that someone asked for, or that a \u003ca href=\"https://www.forbes.com/sites/chipbell/2022/12/13/stop-focusing-on-beating-your-competition/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ecompetitor\u003c/a\u003e already has, or that seemed like a good idea during that one meeting where everyone was hopped up on caffeine and enthusiasm.\u003c/p\u003e\u003cp id=\"2886\"\u003eThe problem isn’t that these are bad ideas — I’m sure they’re great! The problem is that you’re thinking about them as features to be shipped rather than experiences to be crafted.\u003c/p\u003e\u003cp id=\"8c21\"\u003eGo back to that list — does any of that really tell you what’s needed?\u003c/p\u003e\u003cul\u003e\u003cli id=\"9efc\"\u003eWhat does the calendar integration need to \u003cem\u003edo\u003c/em\u003e?\u003c/li\u003e\u003cli id=\"a76d\"\u003eDo you need a custom fields features, or do you just need to add a few common fields that were left out of the initial scope?\u003c/li\u003e\u003cli id=\"cbb7\"\u003eWhat are those alerts going to alert about? Will users actually see them in \u003cem\u003eyour\u003c/em\u003e tool, or should they end up in Slack (or wherever else your users are)?\u003c/li\u003e\u003cli id=\"1b95\"\u003eDo people need to \u003cem\u003eexport\u003c/em\u003e their data, or just get it into their BI tool?\u003c/li\u003e\u003cli id=\"036c\"\u003eWhat questions are going to be answered by the dashboard? Is a dashboard the right place to answer those questions?\u003c/li\u003e\u003cli id=\"1a31\"\u003eAre your users the highly technical kind that expect dark mode in all their tools, or is it just that your CEO wants dark mode because they heard it’s all the rage?\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"796c\"\u003eYou’re creating a product that feels like it was assembled from a box of random parts rather than designed as a cohesive whole.\u003c/p\u003e\u003cp id=\"e04a\"\u003eAnd as such, you keep ending up with…\u003c/p\u003e\u003cul\u003e\u003cli id=\"3342\"\u003e\u003ca href=\"https://userpilot.com/blog/feature-bloat/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eFeature bloat\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e:\u003c/strong\u003e Every piece of functionality that a single person ever wanted (and yet somehow, paradoxically, nobody can do what they need to do)\u003c/li\u003e\u003cli id=\"b75d\"\u003e\u003ca href=\"https://www.nngroup.com/articles/consistency-and-standards/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eInconsistency\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e:\u003c/strong\u003e Each feature feels different than the last, because each one was built to function in a way perfectly ideal for itself on its own, without consideration for how it fits into the bigger picture\u003c/li\u003e\u003cli id=\"c17a\"\u003e\u003cstrong\u003eDecreased usability \u0026amp; horrible UX:\u003c/strong\u003e A cluttered interface with too many options, and nobody can find the functionality they need\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"c95e\"\u003e\u003cstrong\u003eIf you think about features in terms of raw functionality — just adding more buttons, pages, capabilities — you end up with a \u003c/strong\u003e\u003ca href=\"https://uxplanet.org/microwaves-are-proof-that-feature-factories-are-terrible-2fa0ff46e6ce\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003efeature factory\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e. This is where products become bloated, complex, unusable messes.\u003c/strong\u003e\u003c/p\u003e\u003ch2 id=\"ee03\"\u003eExperience-driven design — good\u003c/h2\u003e\u003cp id=\"26c9\"\u003eThe best features are the ones which users don’t even realize they’re using as they use them. They’re the ones that feel so natural, so obvious, that users would be surprised to learn they weren’t always there.\u003c/p\u003e\u003cp id=\"1462\"\u003eThink about your smartphone’s keyboard. Remember when it didn’t have swipe-to-text or speech-to-text? When it didn’t autosuggest the perfect emoji? When it didn’t automatically correct your typos? Ducking right you do!\u003c/p\u003e\u003cp id=\"dd07\"\u003eThose aren’t feature anymore — they’re just how keyboards work.\u003c/p\u003e\u003cul\u003e\u003cli id=\"72d2\"\u003eEmoji keyboard — feature. Emoji autosuggest — experience.\u003c/li\u003e\u003cli id=\"58c3\"\u003e\u003ca href=\"https://techcommunity.microsoft.com/discussions/word/when-did-spellcheck-become-automatic/1405448\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eOld school autocorrect\u003c/a\u003e (replace specific sets of characters with specific other sets of characters) — feature. Current autocorrect (\u003ca href=\"https://www.creativereview.co.uk/just-do-it-slogan/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ejust do it\u003c/a\u003e) — experience.\u003c/li\u003e\u003cli id=\"1a79\"\u003eIndividually press every single individual letter like a plebeian — feature. Swipe- or speech-to-text — experience.\u003c/li\u003e\u003c/ul\u003e\u003cblockquote\u003e\u003cp id=\"113a\"\u003eTechnically possible — feature.\u003c/p\u003e\u003cp id=\"5acb\"\u003eJust works — experience.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"16c5\"\u003eThat’s what you need to aim for. Not features that users have to seek out and learn to use, but experiences that just work the way users expect them to work.\u003c/p\u003e\u003cp id=\"4477\"\u003eSome more examples for you:\u003c/p\u003e\u003cul\u003e\u003cli id=\"faeb\"\u003eDocuments that save automatically, instead of requiring a save button (remember when you’d lose your 20-page essay if you forgot to hit ctrl-s? \u003ca href=\"https://knowyourmeme.com/memes/pepperidge-farm-remembers\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePepperidge Farm remembers\u003c/a\u003e)\u003c/li\u003e\u003cli id=\"ed6b\"\u003eSearch results that update as you type, instead of requiring you to hit enter (\u003ca rel=\"noopener\" target=\"_blank\" href=\"https://uxdesign.cc/good-ux-is-not-just-about-minimizing-clicks-5504fa2ff430\"\u003eminimize those clicks\u003c/a\u003e)\u003c/li\u003e\u003cli id=\"8346\"\u003eCopying on your phone and pasting on your laptop (i.e., \u003ca href=\"https://support.apple.com/guide/mac-help/copy-and-paste-between-devices-mchl70368996/mac\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003euniversal clipboard\u003c/a\u003e), instead of texting yourself or sending yourself an email\u003c/li\u003e\u003cli id=\"fed9\"\u003eForms that remember what you entered even if you accidentally navigate away, instead of losing your work and having to start over (or just give up and never submit)\u003c/li\u003e\u003cli id=\"70b8\"\u003eCode editors that format your code as you type, instead of wasting time debating the entire engineering team on the virtues of \u003ca href=\"https://www.businessinsider.com/tabs-vs-spaces-from-silicon-valley-2016-5\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003etabs vs. spaces\u003c/a\u003e\u003c/li\u003e\u003cli id=\"80f3\"\u003eDashboards that adjust their time range to automatically include today, instead of having to press “in the last month” \u003cem\u003eevery single damn time you open the dashboard\u003c/em\u003e\u003c/li\u003e\u003cli id=\"72de\"\u003e\u003ca href=\"https://gainmomentum.ai/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAgile task management tooling\u003c/a\u003e that reminds you about upcoming holidays \u003cem\u003eduring\u003c/em\u003e \u003ca href=\"https://gainmomentum.ai/learn/sprint-planning\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSprint Planning\u003c/a\u003e, instead of starting the \u003ca href=\"https://gainmomentum.ai/learn/sprint\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003esprint\u003c/a\u003e and realizing immediately after that you’re destined to fail to hit your goals (sigh)\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"645b\"\u003eNotice the pattern? None of these feel like features because they’re not adding new things for users to do — they’re \u003cem\u003eremoving\u003c/em\u003e friction from things users are already doing.\u003c/p\u003e\u003cp id=\"8624\"\u003e\u003cstrong\u003eIf you think about features in terms of experiences, you focus on providing value in the most natural and intuitive way possible. You find the best way to help users help themselves, as opposed to just adding yet another button amidst a sea of buttons.\u003c/strong\u003e\u003c/p\u003e\u003ch2 id=\"c569\"\u003eHow to make features disappear\u003c/h2\u003e\u003cp id=\"c3b4\"\u003eOkay, so features bad / experiences good. How do you turn a feature factory into an experience studio?\u003c/p\u003e\u003ch2 id=\"4569\"\u003e1. Understand the story behind the need\u003c/h2\u003e\u003cp id=\"d256\"\u003eStop asking “\u003ca href=\"https://ehandbook.com/the-customer-is-always-wrong-bac818844d92\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ewhat features do our customers want?\u003c/a\u003e” — that’s like asking what tools to buy before you know what you’re building.\u003c/p\u003e\u003cp id=\"f097\"\u003eInstead, dig deeper:\u003c/p\u003e\u003cul\u003e\u003cli id=\"20a1\"\u003e\u003cstrong\u003eWhat is the user actually trying to accomplish?\u003c/strong\u003e Not just the immediate task, but the broader goal.\u003c/li\u003e\u003cli id=\"a7d3\"\u003e\u003cstrong\u003eWhy is this particular need so important to the user?\u003c/strong\u003e This goes beyond the “what do they say they want” and into the “but seriously, why do they actually want it”.\u003c/li\u003e\u003cli id=\"dd93\"\u003e\u003cstrong\u003eWhat is it about the user that makes them… them?\u003c/strong\u003e What is their role? How does that impact what they need or what they know or how they think?\u003c/li\u003e\u003cli id=\"99f5\"\u003e\u003cstrong\u003eHow does this need fit into the user’s broader workflow?\u003c/strong\u003e What are they trying to do right before and after this particular task? This can easily influence the \u003cem\u003eunderstanding\u003c/em\u003e of the “why” and the \u003cem\u003esolution\u003c/em\u003e that becomes the “how”.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"0453\"\u003e[If you’re astute, you may have noticed really this all comes down to understanding the \u003ca href=\"https://ehandbook.com/job-stories-vs-user-stories-the-misguided-debate-90f8b96eaee6\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ejob story\u003c/a\u003e.]\u003c/p\u003e\u003cp id=\"f3cb\"\u003e\u003cstrong\u003eThe best product experiences come from understanding the complete context of user needs, not just the specific request.\u003c/strong\u003e\u003c/p\u003e\u003ch2 id=\"c5d4\"\u003e2. Look for friction points\u003c/h2\u003e\u003cp id=\"16a8\"\u003eThis is your treasure map — X marks the bad-user-experience-that-could-be-better. While users might not be great at telling you what’s wrong, their behavior leaves clues everywhere. Your job is to be a product detective, hunting down these moments of frustration before users have to complain about them.\u003c/p\u003e\u003cul\u003e\u003cli id=\"a5e8\"\u003e\u003ca href=\"https://positivepsychology.com/mihaly-csikszentmihalyi-father-of-flow/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eFlow\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e disruptions:\u003c/strong\u003e Every time a user has to stop what they’re doing and think about a next step that needs taking (especially seemingly unnecessary ones), you’ve found a friction point. Why should they have to remember to save? Why should they need to manually sync?\u003c/li\u003e\u003cli id=\"b69b\"\u003e\u003ca href=\"https://techcrunch.com/2013/04/20/cognitive-overhead/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eCognitive overhead\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e:\u003c/strong\u003e What are users forced to remember or track? Those task ids they keep copying and pasting everywhere? The three difference places they need to update every time something changes?\u003c/li\u003e\u003cli id=\"a355\"\u003e\u003cstrong\u003eRepetitive actions:\u003c/strong\u003e If users are doing the same thing over, and over, and over again — that’s a red flag. These are ripe opportunities for behavior that could at least be simplified, if not fully automated.\u003c/li\u003e\u003cli id=\"4fc3\"\u003e\u003cstrong\u003e“I wish it just…” moments:\u003c/strong\u003e These are pure gold. This is users telling you exactly where your product is falling short, where potentially even a slight tweak or tiny improvement could turn the unnatural into magic. (Though, be sure to pay attention to not just \u003cem\u003ewhat\u003c/em\u003e they’re wishing for, but also \u003cem\u003ewhy\u003c/em\u003e they wish for it.)\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"4c16\"\u003e\u003cstrong\u003eEvery point of friction is an opportunity to transform a clunky feature into an invisible experience.\u003c/strong\u003e\u003c/p\u003e\u003ch2 id=\"0bef\"\u003e3. Remove before you add\u003c/h2\u003e\u003cp id=\"1748\"\u003eThis may be counterintuitive for most product teams, but it’s absolutely crucial. Before you add anything, think:\u003c/p\u003e\u003cul\u003e\u003cli id=\"45cd\"\u003e\u003cstrong\u003eCan we \u003c/strong\u003e\u003ca href=\"https://productschool.com/blog/product-strategy/avoiding-feature-creep-tips-to-keep-your-product-focused\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eeliminate (or hide) a feature\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e without causing any heartache?\u003c/strong\u003e Are there features which are used by effectively 0% of your user base (or low enough that you’re not worried about it)? \u003cem\u003eOther\u003c/em\u003e features will automatically be easier to discover/locate and use simply by \u003ca href=\"https://medium.com/swlh/kill-features-before-they-kill-your-product-9713640f3e8a\" rel=\"noopener\"\u003egetting rid of features that are in the way\u003c/a\u003e.\u003c/li\u003e\u003cli id=\"9f1e\"\u003e\u003cstrong\u003eCan we automate what users are doing manually?\u003c/strong\u003e Look for patterns in behavior that could theoretically be handled by the system, automatically. If users always the same three actions in sequence, maybe that should be one automated flow — whether requiring \u003cem\u003eone\u003c/em\u003e button press somewhere, or even…\u003c/li\u003e\u003cli id=\"edd3\"\u003e\u003cstrong\u003eCan we make this happen in the background?\u003c/strong\u003e Features that require user intervention \u003cem\u003efeel\u003c/em\u003e like features. Things that \u003cem\u003ejust happen\u003c/em\u003e feel like \u003cem\u003emagic\u003c/em\u003e.\u003c/li\u003e\u003cli id=\"8637\"\u003e\u003cstrong\u003eCan we combine multiple features into one seamless experience?\u003c/strong\u003e Instead of having a whole feature for each related item, can we create one intuitive flow that handles everything? (In its simplest form, this can come down to solutions like \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://uxdesign.cc/good-ux-is-not-just-about-minimizing-clicks-5504fa2ff430\"\u003eputting like functionality into a single overflow menu\u003c/a\u003e.)\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"9ecf\"\u003e\u003cstrong\u003eThe most elegant solutions often involve removing complexity rather than adding features.\u003c/strong\u003e\u003c/p\u003e\u003ch2 id=\"e826\"\u003e4. Make it feel natural\u003c/h2\u003e\u003cp id=\"7ff6\"\u003eThis is where we get more into art than science. You want your product to feel it couldn’t possibly work any other way.\u003c/p\u003e\u003cul\u003e\u003cli id=\"e0f2\"\u003e\u003cstrong\u003eThink in terms of magic:\u003c/strong\u003e If you had a magic wand, how would a given feature work? That idea you have in your head is probably closer to what users actually want than whatever specific feature they may be requesting. And then, the toughest part: how can you close the gap between magic and reality?\u003c/li\u003e\u003cli id=\"bc7e\"\u003e\u003cstrong\u003eMaintain context:\u003c/strong\u003e Features that pull users out of their \u003ca href=\"https://ehandbook.com/its-your-fault-your-team-isn-t-getting-more-done-fa9ed8509194\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eflow\u003c/a\u003e feel like features. Can the-thing-they’re-trying-to-do happen right where they already are?\u003c/li\u003e\u003cli id=\"6855\"\u003e\u003cstrong\u003eEmbrace progressive disclosure:\u003c/strong\u003e Not everything needs to be visible all the time. Yes, creating a single page with a button for every possible user need means that every possible user need is only a single click away — \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://uxdesign.cc/good-ux-is-not-just-about-minimizing-clicks-5504fa2ff430\"\u003ebut that doesn’t sound like a good experience\u003c/a\u003e, now does it?\u003c/li\u003e\u003cli id=\"d77d\"\u003e\u003cstrong\u003eDesign as if documentation doesn’t exist:\u003c/strong\u003e \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://uxdesign.cc/zero-documentation-your-users-deserve-better-than-a-manual-238c9e2632bd\"\u003eUsers shouldn’t need a manual\u003c/a\u003e to figure out how to use your product. The right action should feel obvious at the right time.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"810e\"\u003e\u003cstrong\u003eNatural experiences feel like they were designed specifically for each user’s unique needs.\u003c/strong\u003e\u003c/p\u003e\u003ch2 id=\"735d\"\u003e5. Test the invisibility\u003c/h2\u003e\u003cp id=\"fac1\"\u003eHere’s how to know if you’ve succeeded, or if you still have more work to do (but note… you always have more work to do):\u003c/p\u003e\u003cul\u003e\u003cli id=\"c516\"\u003e\u003ca href=\"https://www.fullstory.com/blog/session-replay/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eWatch new users\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e:\u003c/strong\u003e If they have to ask how to do something, it probably still feels too much like a feature.\u003c/li\u003e\u003cli id=\"58fe\"\u003e\u003cstrong\u003eListen for silence:\u003c/strong\u003e The best features often generate the least feedback because they \u003cem\u003ejust work\u003c/em\u003e.\u003c/li\u003e\u003cli id=\"7e84\"\u003e\u003cstrong\u003eTrack feature discovery:\u003c/strong\u003e How are users finding particular functionality? Through \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://uxdesign.cc/zero-documentation-your-users-deserve-better-than-a-manual-238c9e2632bd\"\u003edocumentation (bad)\u003c/a\u003e, or through exploration (good)?\u003c/li\u003e\u003cli id=\"7465\"\u003e\u003cstrong\u003eLook for natural adoption:\u003c/strong\u003e Are existing users organically discovering and using the feature without prompting? (I.e., get rid of those “look over here, new feature alert” banners and callouts and modals.)\u003c/li\u003e\u003cli id=\"5e4f\"\u003e\u003cstrong\u003eMonitor feature mentions:\u003c/strong\u003e In \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://uxdesign.cc/ask-smarter-questions-to-level-up-your-user-interviews-69e6fac0ae74\"\u003euser interviews\u003c/a\u003e, do they talk about a capability as a feature, or just as part of how they work? This comes down to the specific wording they use — “…and then I check our progress on the home screen” is indicative of an experience, whereas “…and then I open up the dashboard, change the time range to include today, and click on the revenue metric icon” sounds like a feature.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"2ebe\"\u003e\u003cstrong\u003eThe truest sign of success is when users can’t imagine how they worked without a feature, yet also can’t remember specifically when they started using it.\u003c/strong\u003e\u003c/p\u003e\u003ch2 id=\"3553\"\u003eBreak free\u003c/h2\u003e\u003cp id=\"adb1\"\u003eYour product doesn’t need more features. It needs more moments where users, instead of asking “how do I do that?”, say “of course it works that way” (or ideally, never say anything at all).\u003c/p\u003e\u003cp id=\"0d34\"\u003eThe next time you’re running through your roadmap of features, try this exercise: Take each item, and ask “how can we make the need for this disappear?” Not by ignoring it, of course, but by so seamlessly integrating it into the user experience that nobody even notices it’s there.\u003c/p\u003e\u003cp id=\"c8a9\"\u003eThis is going to require a mindset shift, but you’ll be able to get there if you try.\u003c/p\u003e\u003col\u003e\u003cli id=\"6047\"\u003e\u003cstrong\u003eDig into why your users “need” certain functionality in the first place\u003c/strong\u003e (it’s often not what they’re explicitly asking for)\u003c/li\u003e\u003cli id=\"c0ba\"\u003e\u003cstrong\u003eFigure out where they’re struggling or frustrated\u003c/strong\u003e (even if they don’t tell you with their words)\u003c/li\u003e\u003cli id=\"d1e1\"\u003e\u003cstrong\u003eGet out of their way by removing stuff they don’t need\u003c/strong\u003e (you don’t have to solve every problem for every user)\u003c/li\u003e\u003cli id=\"1241\"\u003e\u003cstrong\u003eMake everything that remains feel natural\u003c/strong\u003e (aka magic)\u003c/li\u003e\u003cli id=\"042b\"\u003e\u003cstrong\u003eProve to yourself that the changes are working\u003c/strong\u003e (and then go back to step 1)\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"873b\"\u003eAll this might mean shipping slower. It might mean \u003ca href=\"https://medium.com/design-bootcamp/12-reasons-to-ignore-your-users-feature-requests-96633520c663\" rel=\"noopener\"\u003esaying “no”\u003c/a\u003e more often. It might mean completely rethinking parts of your product.\u003c/p\u003e\u003cp id=\"2da5\"\u003eBut the payoff? A product that users love without knowing why. Tools that feel like they were built just for them. Experiences so natural that users can’t imagine any other solution.\u003c/p\u003e\u003cp id=\"5147\"\u003eBecause the best features aren’t features at all — they’re just the way things should work.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"a0e2\"\u003e\u003cem\u003eSpeaking of seamless experiences (and the opposite)… Are you tired of fighting with Jira’s UI? I get it. That’s why we’re building Momentum — it’s Jira on the backend, but with a UX that actually helps you do agile. No migration necessary. Curious? \u003c/em\u003e\u003ca href=\"https://gainmomentum.ai/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cem\u003eJoin the waitlist.\u003c/em\u003e\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "18 min read",
  "publishedTime": "2024-12-19T08:33:35.353Z",
  "modifiedTime": null
}
