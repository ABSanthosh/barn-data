{
  "id": "e3df2f8b-fa1f-43cb-a69f-89ec30818ad6",
  "title": "Using Manim For Making UI Animations",
  "link": "https://smashingmagazine.com/2025/04/using-manim-making-ui-animations/",
  "description": "Animation makes things clearer, especially for designers and front-end developers working on UI, prototypes, or interactive visuals. Manim is a tool that lets you create smooth and dynamic animations, not just for the design field but also in math, coding, and beyond, to explain complex ideas or simply make everything a little bit more interactive.",
  "author": "Joas Pambou",
  "published": "Tue, 08 Apr 2025 15:00:00 GMT",
  "source": "https://www.smashingmagazine.com/feed",
  "categories": null,
  "byline": "About The Author",
  "length": 15027,
  "excerpt": "Animation makes things clearer, especially for designers and front-end developers working on UI, prototypes, or interactive visuals. Manim is a tool that lets you create smooth and dynamic animations, not just for the design field but also in math, coding, and beyond, to explain complex ideas or simply make everything a little bit more interactive.",
  "siteName": "Smashing Magazine",
  "favicon": "https://smashingmagazine.com/images/favicon/apple-touch-icon.png",
  "text": "11 min readAnimation, Python, ToolsAnimation makes things clearer, especially for designers and front-end developers working on UI, prototypes, or interactive visuals. Manim is a tool that lets you create smooth and dynamic animations, not just for the design field but also in math, coding, and beyond, to explain complex ideas or simply make everything a little bit more interactive.Say you are learning to code for the first time, in Python, for example, which is a great starting point for getting into development. You are likely to come across some information like “a variable stores a value.” That sounds straightforward, but if you are a beginner just starting, then it can also be a bit confusing. How does a variable store or hold something? What happens when we assign a new value to it?To figure things out, you could read a bunch and watch tutorials, but sometimes, resources like these don’t help the concept fully click. That’s where animation helps. It has the power to take complex programming concepts and turn them into something visual, dynamic, and easy to grasp.Let’s break it down with an example: Say we have a box labeled X, first empty, then fill with a value 5, for this example, then update to 12, then 8, then 20, then 3.This animation shows how a variable stores values and updates over time, step by step. Source CodeEven if you are unfamiliar with Python, an animation like this makes the concept more obvious, helping you understand how variables work with visual cues. You can now visualize the variables as containers that hold and update values dynamically. It’s way easier to see that than it is to just read about variables.Well, Manim isn’t just limited to programming; it works for math, physics, UI/UX, and more. In trigonometry, you can take something like a “Sine Wave” as an example, which is a smooth, continuous curve that moves up and down in a repeating pattern, and it is found everywhere from sound waves to electrical signals to the motion of a pendulum.Sounds simple, right? Or maybe a bit confusing, especially if you’re not a math person, but let me help with this:A smooth sine wave moving across the screen, illustrating oscillation and periodic motion. Source CodeNow, with this, you can see how the wave moves. Instead of just numbers and formulas, you’re watching it happen. And that’s pretty much the idea here! In this article, we’ll explore Manim and how it makes concepts easier to understand through animation.Manim, Manim! What Is It?By now, you may have a rough idea of what Manim can do, but let’s break it down a little more. What exactly is Manim? Well, it’s two things.First, Manim is an open-source Python library for creating high-quality mathematical animations.If you’ve ever watched a 3Blue1Brown video, you’ve seen Manim in action because Grant Sanderson originally developed it for his YouTube channel.Second, Manim is a script-driven animation engine, meaning you write Python code to generate animations instead of dragging and dropping elements like in typical video editing software.This gives you precise control over every detail, including text, color, shape, transformations, timing — you name it. Whether you’re explaining math, physics, or programming concepts, Manim makes it fairly easy to create clear and dynamic visuals with just a few lines of code. Plus, it works seamlessly with LaTeX, so you can render mathematical equations beautifully without extra effort. That’s why it’s popular among educators, researchers, and content creators.Of course, Manim isn’t the only tool you can use. If it doesn’t quite fit your needs or the programming language you are most comfortable with, here are some alternatives worth checking out:ProcessingThis is a Java-based coding framework, great for generative art and interactive visuals. If you enjoy experimenting with visual design through code, in Java, to be exact, then Processing gives you a solid foundation.p5.jsThis is a JavaScript library, an alternative for web animations. If you’re a front-end developer working with HTML and CSS, p5.js makes it easy for you to create graphics directly in the browser.DesmosThis focuses on math visualization. Desmos lets you create interactive graphs and scripted animations directly in the browser. You can use it through Desmos Graphs, Desmos Calculator, or the Desmos API.Blender (with Python Scripting)This is mostly known for 3D animation, but with its Python API, you can script animations, including math and physics-based simulations.Now, let’s compare them:ToolLanguageBest ForStrengthsManimPythonMath, physics, programming animationsHigh precision, script-driven, LaTeX supportProcessingJavaGenerative art, interactive visualsGreat for creative codingp5.jsJavaScriptWeb-based animationsWorks well with HTML \u0026 CSSBlender (Python API)Python3D \u0026 math-based animationsPowerful 3D capabilities, physics simulationsDesmosJavaScriptMath visualizationsBrowser-based, great for interactive graphsHow To Get StartedThere are multiple ways to install the library. You can set it up locally, use Conda or Docker, or run it inside Jupyter Notebooks. But if you don’t want to deal with installations, Replit is a great alternative, as it’s a real-time live editor that lets you start coding animations instantly.1. Create An Account On Replit Using GitHub or Email.Once you’re in, your dashboard should look something like this:(Large preview)2. Click “Create App”You’ll see three options:“Create With Replit Agent”,“Choose a Template”,“Import from GitHub”.(Large preview)3. Select “Choose a Template”Then, search for Manim and create your app. At this point, you don’t have to do anything else because this sets up everything for you (including the main.py file, a media folder, and all of the required dependencies).(Large preview)Voilà! Now you can start coding your animations right away!Using Manim For Math, Code, And UI/UX VisualsOkay, you know Manim. Whether it’s for math, programming, physics, or even prototyping UI concepts, it’s all about making complex concepts easier to grasp through animation. But how does that work in practice? Let’s go through some ways Manim makes things clearer and more engaging.1. Math \u0026 Geometry VisualsSometimes, math can feel a bit like a puzzle with missing pieces. But with Manim, numbers, shapes, and graphs move, making patterns and relationships easier to grasp. Take graphs, for example. When you tweak a parameter, Manim instantly updates the visualization so you can watch how a function changes over time. And that’s a game-changer for understanding concepts like derivatives or transformations.(Large preview)Geometry concepts also come easier and become even more fun when you can see those shapes move, giving you a clear understanding of rotation or reflection. If you’re drawing a triangle with a compass and straightedge, for example, Manim can animate each step, making it easier to follow along and understand the idea.2. Coding \u0026 AlgorithmsAs you may already know, coding is a process that runs step by step, and Manim makes that easy to see. Whether you are working on the front end or the back end, logic flows in a way that’s not always clear from just reading or writing code. With Manim, you can, for example, watch how a sorting algorithm moves numbers around or simply how a loop runs.Source CodeThe same goes for data structures like linked lists, trees, and more. A binary tree makes more sense when you can see it grow and balance itself. Even complex algorithms like Dijkstra’s shortest path become clearer when you watch the path being calculated in real time, even if you may not have a background in math.Watch as the tree is explored node by node, showing how data is structured and accessed. Source Code3. UI/UX Concepts \u0026 Motion DesignAlthough Manim is not a UI/UX design tool, it can be useful for demonstrating designs. Static images can’t always show the full picture, but with Manim, before-and-after comparisons become more dynamic, and of course, it makes it easier to highlight why a new navigation menu, for example, is more intuitive or how a checkout flow reduces friction.Source CodeAnimated heatmaps can show click patterns over time, helping to spot trends more easily. Conversion funnels become clearer when each stage is animated, revealing exactly where users drop off.Source CodeLet’s Manim!Well, that’s a lot we covered! By now, you should have Manim installed in whatever way works best for you. But before we jump into the coding part, let’s quickly go over Manim’s core building blocks. Manim’s animations are made of three main concepts:Mobjects,Animations,Scenes.1. Mobjects (Mathematical Objects)Everything you display in Manim is a Mobject (short for “mathematical object”). There are different types:Basic shapes like Circle(), Rectangle(), and Arrow(),Text elements for adding labels, andAdvanced structures like graphs, axes, and bar charts.A mobject is more like a blueprint, and it won’t show up unless you add it to a scene. Here’s a brief example:from manim import * class MobjectExample(Scene): def construct(self): circle = Circle() # Create a circle circle.set_fill(BLUE, opacity=0.5) # Set color and transparency self.add(circle) # Add to the scene self.wait(2) A blue circle will appear for about two seconds when you run this:2. AnimationsAnimations in Manim, on the other hand, are all about changing these objects over time. Rather than just displaying a sharp edge, we can make it move, rotate, fade, or transform into something else. Really, we do have this much control through the Animation class.If we use the same circle example from earlier, we can add animations to see how it works and compare the visual differences:from manim import * class AnimationExample(Scene): def construct(self): circle = Circle() circle.set_fill(BLUE, opacity=0.5) self.play(FadeIn(circle)) self.play(circle.animate.shift(RIGHT * 2)) self.play(circle.animate.scale(1.5)) self.play(Rotate(circle, angle=PI/4)) self.wait(2) Here, we are making a move, scaling up, and rotating. The play() method is what makes animations run. For example, FadeIn(circle) makes the circle gradually appear, and circle.animate.shift(RIGHT * 2) moves it two units to the right. If you want to slow things down, you can add run_time to control the duration, like the following:self.play(circle.animate.scale(2), run_time=3), This makes the scaling take three more seconds instead of the default amount of time:3. ScenesScenes are what hold everything together. A scene defines what appears, how it animates, and in what order. Every Manim script has a class that is inherited from a Scene, and it contains a construct() method. This is where we write our animation logic. For example,class SimpleScene(Scene): def construct(self): text = Text(\"Hello, Manim!\") self.play(Write(text)) self.wait(2) This creates a simple text animation where the words appear as if being written.Bringing Manim To DesignAs we discussed earlier, Manim is a great tool for UI/UX designers and front-end developers to visualize user interactions or to explain UI concepts. Think about how users navigate through a website or an app: they click buttons, move between pages, and interact with elements. With Manim, we can animate these interactions and see them play out step by step.With this in mind, let’s create a simple flow where a user clicks a button, leading to a new page:from manim import * class UIInteraction(Scene): def construct(self): # Create a homepage screen homepage = Rectangle(width=6, height=3, color=BLUE) homepage_label = Text(\"Home Page\").scale(0.8) homepage_group = VGroup(homepage, homepage_label) # Create a button button = RoundedRectangle(width=1.5, height=0.6, color=RED).shift(DOWN * 1) button_label = Text(\"Click Me\").scale(0.5).move_to(button) button_group = VGroup(button, button_label) # Add homepage and button self.add(homepage_group, button_group) # Simulating a button click self.play(button.animate.set_fill(RED, opacity=0.5)) # Button press effect self.wait(0.5) # Pause to simulate user interaction # Create a new page (simulating navigation) new_page = Rectangle(width=6, height=3, color=GREEN) new_page_label = Text(\"New Page\").scale(0.8) new_page_group = VGroup(new_page, new_page_label) # Animate transition to new page self.play(FadeOut(homepage_group, shift=UP), # Move old page up FadeOut(button_group, shift=UP), # Move button up FadeIn(new_page_group, shift=DOWN)) # Bring new page from top self.wait(2) The code creates a simple UI animation for a homepage displaying a button. When the button is clicked, it fades slightly to simulate pressing, and then the homepage and button fade out while a new page fades in, creating a transition effect.If you think of it, scrolling is one of the most natural interactions in modern web and app design. Whether moving between sections on a landing page or smoothly revealing content, well-designed scroll animations make the experience feel fluid. Let me show you:from manim import * class ScrollEffect(Scene): def construct(self): # Create three sections to simulate a webpage section1 = Rectangle(width=6, height=3, color=BLUE).shift(UP*3) section2 = Rectangle(width=6, height=3, color=GREEN) section3 = Rectangle(width=6, height=3, color=RED).shift(DOWN*3) # Add text to each section text1 = Text(\"Welcome\", font_size=32).move_to(section1) text2 = Text(\"About Us\", font_size=32).move_to(section2) text3 = Text(\"Contact\", font_size=32).move_to(section3) self.add(section1, section2, section3, text1, text2, text3) self.wait(1) # Simulate scrolling down self.play( section1.animate.shift(DOWN*6), section2.animate.shift(DOWN*6), section3.animate.shift(DOWN*6), text1.animate.shift(DOWN*6), text2.animate.shift(DOWN*6), text3.animate.shift(DOWN*6), run_time=3 ) self.wait(1) This animation shows a scrolling effect by moving sections of a webpage upward, simulating how content shifts as a user scrolls. It is a simple way to visualize transitions that make the UI feel smooth and engaging.Wrapping UpManim makes it easier to show how users interact with a design. You can animate navigations, interactions, and user behaviors to understand better how design works in action. Is there more to explore? Definitely! You can take these simple examples and build on them by adding more complex features.But what I hope you take away from all of this is that subtle animations can help communicate and clarify concepts and that Manim is a library for making those sorts of animations. Traditionally, it’s used to help explain mathematical and scientific concepts, but you can see just how useful it can be to working in front-end development, particularly when it comes to highlighting and visualizing UI changes. (gg, yk)",
  "image": "https://files.smashing.media/articles/using-manim-making-ui-animations/using-manim-making-ui-animations.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"article__content\"\u003e\u003cul\u003e\u003cli\u003e11 min read\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://smashingmagazine.com/category/animation\"\u003eAnimation\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/python\"\u003ePython\u003c/a\u003e,\n\u003ca href=\"https://smashingmagazine.com/category/tools\"\u003eTools\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003csection aria-label=\"Quick summary\"\u003eAnimation makes things clearer, especially for designers and front-end developers working on UI, prototypes, or interactive visuals. Manim is a tool that lets you create smooth and dynamic animations, not just for the design field but also in math, coding, and beyond, to explain complex ideas or simply make everything a little bit more interactive.\u003c/section\u003e\u003c/p\u003e\u003cp\u003eSay you are learning to code for the first time, in Python, for example, which is a great starting point for getting into development. You are likely to come across some information like \u003cstrong\u003e“a variable stores a value.”\u003c/strong\u003e That sounds straightforward, but if you are a beginner just starting, then it can also be a bit confusing. \u003cem\u003eHow\u003c/em\u003e does a variable store or hold something? \u003cem\u003eWhat\u003c/em\u003e happens when we assign a new value to it?\u003c/p\u003e\u003cp\u003eTo figure things out, you could read a bunch and watch tutorials, but sometimes, resources like these don’t help the concept fully click. That’s where animation helps. It has the power to take complex programming concepts and turn them into something visual, dynamic, and easy to grasp.\u003c/p\u003e\u003cp\u003eLet’s break it down with an example: Say we have a box labeled X, first empty, then fill with a value 5, for this example, then update to 12, then 8, then 20, then 3.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eThis animation shows how a variable stores values and updates over time, step by step. \u003ca href=\"https://github.com/pontonkid/Manim-Manim/blob/main/Variable\"\u003eSource Code\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eEven if you are unfamiliar with Python, an animation like this makes the concept more obvious, helping you understand how variables work with visual cues. You can now visualize the variables as containers that hold and update values dynamically. It’s way easier to \u003cem\u003esee\u003c/em\u003e that than it is to just read about variables.\u003c/p\u003e\u003cp\u003eWell, \u003cstrong\u003eManim isn’t just limited to programming\u003c/strong\u003e; it works for math, physics, UI/UX, and more. In trigonometry, you can take something like a “Sine Wave” as an example, which is a smooth, continuous curve that moves up and down in a repeating pattern, and it is found everywhere from sound waves to electrical signals to the motion of a pendulum.\u003c/p\u003e\u003cp\u003eSounds simple, right? Or maybe a bit confusing, especially if you’re not a math person, but let me help with this:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eA smooth sine wave moving across the screen, illustrating oscillation and periodic motion. \u003ca href=\"https://github.com/pontonkid/Manim-Manim/blob/main/Sine-Wave\"\u003eSource Code\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eNow, with this, you can see how the wave moves. Instead of just numbers and formulas, you’re watching it happen. And that’s pretty much the idea here! In this article, we’ll explore Manim and \u003cem\u003ehow\u003c/em\u003e it makes concepts easier to understand through animation.\u003c/p\u003e\u003ch2 id=\"manim-manim-what-is-it\"\u003eManim, Manim! What Is It?\u003c/h2\u003e\u003cp\u003eBy now, you may have a rough idea of what Manim can do, but let’s break it down a little more. What exactly is Manim? Well, it’s two things.\u003c/p\u003e\u003cblockquote\u003eFirst, Manim is an open-source Python library for creating high-quality mathematical animations.\u003c/blockquote\u003e\u003cp\u003eIf you’ve ever watched a \u003ca href=\"https://www.3blue1brown.com/\"\u003e\u003cstrong\u003e3Blue1Brown\u003c/strong\u003e\u003c/a\u003e video, you’ve seen Manim in action because \u003cstrong\u003eGrant Sanderson\u003c/strong\u003e originally developed it for his YouTube channel.\u003c/p\u003e\u003cblockquote\u003eSecond, Manim is a script-driven animation engine, meaning you write Python code to generate animations instead of dragging and dropping elements like in typical video editing software.\u003c/blockquote\u003e\u003cp\u003eThis gives you \u003cstrong\u003eprecise control over every detail\u003c/strong\u003e, including text, color, shape, transformations, timing — you name it. Whether you’re explaining math, physics, or programming concepts, Manim makes it fairly easy to create clear and dynamic visuals with just a few lines of code. Plus, it works seamlessly with \u003ca href=\"https://www.latex-project.org/about/\"\u003eLaTeX\u003c/a\u003e, so you can render mathematical equations beautifully without extra effort. That’s why it’s popular among educators, researchers, and content creators.\u003c/p\u003e\u003cp\u003eOf course, Manim isn’t the only tool you can use. If it doesn’t quite fit your needs or the programming language you are most comfortable with, here are some alternatives worth checking out:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://processing.org/\"\u003e\u003cstrong\u003eProcessing\u003c/strong\u003e\u003c/a\u003e\u003cbr/\u003eThis is a Java-based coding framework, great for generative art and interactive visuals. If you enjoy experimenting with visual design through code, in Java, to be exact, then Processing gives you a solid foundation.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://p5js.org/\"\u003e\u003cstrong\u003ep5.js\u003c/strong\u003e\u003c/a\u003e\u003cbr/\u003eThis is a JavaScript library, an alternative for web animations. If you’re a front-end developer working with HTML and CSS, p5.js makes it easy for you to create graphics directly in the browser.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eDesmos\u003c/strong\u003e\u003cbr/\u003eThis focuses on math visualization. Desmos lets you create interactive graphs and scripted animations directly in the browser. You can use it through \u003ca href=\"https://www.desmos.com/calculator/cq6zs8fxhp\"\u003eDesmos Graphs\u003c/a\u003e, \u003ca href=\"https://www.desmos.com/scientific\"\u003eDesmos Calculator,\u003c/a\u003e or the \u003ca href=\"https://www.desmos.com/api/v1.10/docs/index.html#document-quickstart\"\u003eDesmos API\u003c/a\u003e.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://docs.blender.org/api/current/info_quickstart.html\"\u003e\u003cstrong\u003eBlender (with Python Scripting)\u003c/strong\u003e\u003c/a\u003e\u003cbr/\u003eThis is mostly known for 3D animation, but with its Python API, you can script animations, including math and physics-based simulations.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eNow, let’s compare them:\u003c/p\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth\u003eTool\u003c/th\u003e\u003cth\u003eLanguage\u003c/th\u003e\u003cth\u003eBest For\u003c/th\u003e\u003cth\u003eStrengths\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eManim\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003ePython\u003c/td\u003e\u003ctd\u003eMath, physics, programming animations\u003c/td\u003e\u003ctd\u003eHigh precision, script-driven, LaTeX support\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eProcessing\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003eJava\u003c/td\u003e\u003ctd\u003eGenerative art, interactive visuals\u003c/td\u003e\u003ctd\u003eGreat for creative coding\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003ep5.js\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003eJavaScript\u003c/td\u003e\u003ctd\u003eWeb-based animations\u003c/td\u003e\u003ctd\u003eWorks well with HTML \u0026amp; CSS\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eBlender (Python API)\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003ePython\u003c/td\u003e\u003ctd\u003e3D \u0026amp; math-based animations\u003c/td\u003e\u003ctd\u003ePowerful 3D capabilities, physics simulations\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eDesmos\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003eJavaScript\u003c/td\u003e\u003ctd\u003eMath visualizations\u003c/td\u003e\u003ctd\u003eBrowser-based, great for interactive graphs\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003ch2 id=\"how-to-get-started\"\u003eHow To Get Started\u003c/h2\u003e\u003cp\u003eThere are multiple ways to install the library. You can set it up locally, use Conda or Docker, or run it inside Jupyter Notebooks. But if you don’t want to deal with installations, Replit is a great alternative, as it’s a real-time live editor that lets you start coding animations instantly.\u003c/p\u003e\u003ch3 id=\"1-create-an-account-on-replit-using-github-or-email\"\u003e1. Create An Account On Replit Using GitHub or Email.\u003c/h3\u003e\u003cp\u003eOnce you’re in, your dashboard should look something like this:\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/using-manim-making-ui-animations/1-create-account-replit.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"381\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/using-manim-making-ui-animations/1-create-account-replit.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/using-manim-making-ui-animations/1-create-account-replit.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/using-manim-making-ui-animations/1-create-account-replit.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/using-manim-making-ui-animations/1-create-account-replit.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/using-manim-making-ui-animations/1-create-account-replit.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/using-manim-making-ui-animations/1-create-account-replit.png\" sizes=\"100vw\" alt=\"Replit dashboard\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/using-manim-making-ui-animations/1-create-account-replit.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"2-click-create-app\"\u003e2. Click “Create App”\u003c/h3\u003e\u003cp\u003eYou’ll see three options:\u003c/p\u003e\u003col\u003e\u003cli\u003e“Create With Replit Agent”,\u003c/li\u003e\u003cli\u003e“Choose a Template”,\u003c/li\u003e\u003cli\u003e“Import from GitHub”.\u003c/li\u003e\u003c/ol\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/using-manim-making-ui-animations/2-replit-create-app.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"378\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/using-manim-making-ui-animations/2-replit-create-app.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/using-manim-making-ui-animations/2-replit-create-app.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/using-manim-making-ui-animations/2-replit-create-app.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/using-manim-making-ui-animations/2-replit-create-app.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/using-manim-making-ui-animations/2-replit-create-app.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/using-manim-making-ui-animations/2-replit-create-app.png\" sizes=\"100vw\" alt=\"A screenshot showing three options how to create an new App on Replit\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/using-manim-making-ui-animations/2-replit-create-app.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"3-select-choose-a-template\"\u003e3. Select “Choose a Template”\u003c/h3\u003e\u003cp\u003eThen, search for Manim and create your app. At this point, you don’t have to do anything else because this sets up everything for you (including the \u003ccode\u003emain.py\u003c/code\u003e file, a media folder, and all of the required dependencies).\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/using-manim-making-ui-animations/3-replit-choose-template.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" fetchpriority=\"low\" width=\"800\" height=\"380\" srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/using-manim-making-ui-animations/3-replit-choose-template.png 400w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_800/https://files.smashing.media/articles/using-manim-making-ui-animations/3-replit-choose-template.png 800w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1200/https://files.smashing.media/articles/using-manim-making-ui-animations/3-replit-choose-template.png 1200w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_1600/https://files.smashing.media/articles/using-manim-making-ui-animations/3-replit-choose-template.png 1600w,\nhttps://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_2000/https://files.smashing.media/articles/using-manim-making-ui-animations/3-replit-choose-template.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://files.smashing.media/articles/using-manim-making-ui-animations/3-replit-choose-template.png\" sizes=\"100vw\" alt=\"A screenshot showing how to choose a template Manim on Replit\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/using-manim-making-ui-animations/3-replit-choose-template.png\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e\u003cem\u003eVoilà!\u003c/em\u003e Now you can start coding your animations right away!\u003c/p\u003e\u003ch2 id=\"using-manim-for-math-code-and-ui-ux-visuals\"\u003eUsing Manim For Math, Code, And UI/UX Visuals\u003c/h2\u003e\u003cp\u003eOkay, you know Manim. Whether it’s for math, programming, physics, or even prototyping UI concepts, it’s all about making complex concepts easier to grasp through animation. But how does that work in practice? Let’s go through some ways Manim makes things clearer and more engaging.\u003c/p\u003e\u003ch3 id=\"1-math-geometry-visuals\"\u003e1. Math \u0026amp; Geometry Visuals\u003c/h3\u003e\u003cp\u003eSometimes, math can feel a bit like a puzzle with missing pieces. But with Manim, numbers, shapes, and graphs move, making patterns and relationships easier to grasp. Take graphs, for example. When you tweak a parameter, Manim instantly updates the visualization so you can watch how a function changes over time. And that’s a game-changer for understanding concepts like \u003cstrong\u003ederivatives\u003c/strong\u003e or \u003cstrong\u003etransformations\u003c/strong\u003e.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/using-manim-making-ui-animations/4-manim-graphs.gif\"\u003e\u003cimg src=\"https://files.smashing.media/articles/using-manim-making-ui-animations/4-manim-graphs-800px.gif\" width=\"800\" height=\"450\" alt=\"Manim graphs\"/\u003e\u003c/a\u003e\u003cfigcaption\u003e(\u003ca href=\"https://files.smashing.media/articles/using-manim-making-ui-animations/4-manim-graphs.gif\"\u003eLarge preview\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eGeometry concepts also come easier and become even more fun when you can see those shapes move, giving you a clear understanding of rotation or reflection. If you’re drawing a triangle with a compass and straightedge, for example, Manim can animate each step, making it easier to follow along and understand the idea.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://files.smashing.media/articles/using-manim-making-ui-animations/5-manim-triangle.gif\"\u003e\u003cimg src=\"https://files.smashing.media/articles/using-manim-making-ui-animations/5-manim-triangle.gif\" width=\"640\" height=\"360\" alt=\"Manim for drawing triangles\"/\u003e\u003c/a\u003e\u003c/figure\u003e\u003ch3 id=\"2-coding-algorithms\"\u003e2. Coding \u0026amp; Algorithms\u003c/h3\u003e\u003cp\u003eAs you may already know, coding is a process that runs step by step, and Manim makes that easy to see. Whether you are working on the front end or the back end, logic flows in a way that’s not always clear from just reading or writing code. With Manim, you can, for example, watch how a sorting algorithm moves numbers around or simply how a loop runs.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://github.com/pontonkid/Manim-Manim/blob/main/Sorting-Algo\"\u003eSource Code\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThe same goes for data structures like linked lists, trees, and more. A binary tree makes more sense when you can see it grow and balance itself. Even complex algorithms like \u003ca href=\"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\"\u003eDijkstra’s shortest path\u003c/a\u003e become clearer when you watch the path being calculated in real time, even if you may not have a background in math.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eWatch as the tree is explored node by node, showing how data is structured and accessed. \u003ca href=\"https://github.com/pontonkid/Manim-Manim/blob/main/Binary_Tree.py\"\u003eSource Code\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3 id=\"3-ui-ux-concepts-motion-design\"\u003e3. UI/UX Concepts \u0026amp; Motion Design\u003c/h3\u003e\u003cp\u003eAlthough Manim is not a UI/UX design tool, it can be useful for \u003cstrong\u003edemonstrating designs\u003c/strong\u003e. Static images can’t always show the full picture, but with Manim, before-and-after comparisons become more dynamic, and of course, it makes it easier to highlight why a new navigation menu, for example, is more intuitive or how a checkout flow reduces friction.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://github.com/pontonkid/Manim-Manim/blob/main/UI_Comparison.py\"\u003eSource Code\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAnimated heatmaps can show click patterns over time, helping to spot trends more easily. Conversion funnels become clearer when each stage is animated, revealing exactly where users drop off.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ca href=\"https://github.com/pontonkid/Manim-Manim/blob/main/user_heatmap.py\"\u003eSource Code\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"let-s-manim\"\u003eLet’s Manim!\u003c/h2\u003e\u003cp\u003eWell, that’s a lot we covered! By now, you should have Manim installed in whatever way works best for you. But before we jump into the coding part, let’s quickly go over Manim’s core building blocks. Manim’s animations are made of three main concepts:\u003c/p\u003e\u003cul\u003e\u003cli\u003eMobjects,\u003c/li\u003e\u003cli\u003eAnimations,\u003c/li\u003e\u003cli\u003eScenes.\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"1-mobjects-mathematical-objects\"\u003e1. Mobjects (Mathematical Objects)\u003c/h3\u003e\u003cp\u003eEverything you display in Manim is a Mobject (short for “mathematical object”). There are different types:\u003c/p\u003e\u003cul\u003e\u003cli\u003eBasic shapes like \u003cstrong\u003e\u003ccode\u003eCircle()\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003eRectangle()\u003c/code\u003e\u003c/strong\u003e, and \u003cstrong\u003e\u003ccode\u003eArrow()\u003c/code\u003e\u003c/strong\u003e,\u003c/li\u003e\u003cli\u003eText elements for adding labels, and\u003c/li\u003e\u003cli\u003eAdvanced structures like graphs, axes, and bar charts.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eA mobject is more like a blueprint, and it won’t show up unless you add it to a scene. Here’s a brief example:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003efrom manim import *\n\nclass MobjectExample(Scene):\n  def construct(self):\n    circle = Circle()  # Create a circle\n    circle.set_fill(BLUE, opacity=0.5)  # Set color and transparency\n    self.add(circle)  # Add to the scene\n    self.wait(2)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eA blue circle will appear for about two seconds when you run this:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch3 id=\"2-animations\"\u003e2. Animations\u003c/h3\u003e\u003cp\u003eAnimations in Manim, on the other hand, are all about changing these objects over time. Rather than just displaying a sharp edge, we can make it move, rotate, fade, or transform into something else. Really, we do have this much control through the \u003cstrong\u003e\u003ccode\u003eAnimation\u003c/code\u003e\u003c/strong\u003e \u003ccode\u003eclass\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eIf we use the same circle example from earlier, we can add animations to see how it works and compare the visual differences:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003efrom manim import *\n\nclass AnimationExample(Scene):\n  def construct(self):\n    circle = Circle()\n    circle.set_fill(BLUE, opacity=0.5) \n\n    self.play(FadeIn(circle))\n    self.play(circle.animate.shift(RIGHT * 2))\n    self.play(circle.animate.scale(1.5)) \n    self.play(Rotate(circle, angle=PI/4))  \n    self.wait(2)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere, we are making a move, scaling up, and rotating. The \u003ccode\u003eplay()\u003c/code\u003e method is what makes animations run. For example, \u003ccode\u003eFadeIn(circle)\u003c/code\u003e makes the circle gradually appear, and \u003ccode\u003ecircle.animate.shift(RIGHT * 2)\u003c/code\u003e moves it two units to the right. If you want to slow things down, you can add \u003ccode\u003erun_time\u003c/code\u003e to control the duration, like the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eself.play(circle.animate.scale(2), run_time=3),\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis makes the scaling take three more seconds instead of the default amount of time:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch3 id=\"3-scenes\"\u003e3. Scenes\u003c/h3\u003e\u003cp\u003eScenes are what hold everything together. A scene defines what appears, how it animates, and in what order. Every Manim script has a class that is inherited from a \u003ccode\u003eScene\u003c/code\u003e, and it contains a \u003ccode\u003econstruct()\u003c/code\u003e method. This is where we write our animation logic. For example,\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eclass SimpleScene(Scene):\n  def construct(self):\n    text = Text(\u0026#34;Hello, Manim!\u0026#34;)\n    self.play(Write(text))\n    self.wait(2)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis creates a simple text animation where the words appear as if being written.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"bringing-manim-to-design\"\u003eBringing Manim To Design\u003c/h2\u003e\u003cp\u003eAs we discussed earlier, Manim is a great tool for UI/UX designers and front-end developers to \u003cstrong\u003evisualize user interactions\u003c/strong\u003e or to \u003cstrong\u003eexplain UI concepts\u003c/strong\u003e. Think about how users navigate through a website or an app: they click buttons, move between pages, and interact with elements. With Manim, we can animate these interactions and see them play out step by step.\u003c/p\u003e\u003cp\u003eWith this in mind, let’s create a simple flow where a user clicks a button, leading to a new page:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003efrom manim import *\n\nclass UIInteraction(Scene):\n  def construct(self):\n    # Create a homepage screen\n    homepage = Rectangle(width=6, height=3, color=BLUE)\n    homepage_label = Text(\u0026#34;Home Page\u0026#34;).scale(0.8)\n    homepage_group = VGroup(homepage, homepage_label)\n\n    # Create a button\n    button = RoundedRectangle(width=1.5, height=0.6, color=RED).shift(DOWN * 1)\n    button_label = Text(\u0026#34;Click Me\u0026#34;).scale(0.5).move_to(button)\n    button_group = VGroup(button, button_label)\n\n    # Add homepage and button\n    self.add(homepage_group, button_group)\n\n    # Simulating a button click\n    self.play(button.animate.set_fill(RED, opacity=0.5))  # Button press effect\n    self.wait(0.5)  # Pause to simulate user interaction\n\n    # Create a new page (simulating navigation)\n    new_page = Rectangle(width=6, height=3, color=GREEN)\n    new_page_label = Text(\u0026#34;New Page\u0026#34;).scale(0.8)\n    new_page_group = VGroup(new_page, new_page_label)\n\n    # Animate transition to new page\n    self.play(FadeOut(homepage_group, shift=UP),  # Move old page up\n      FadeOut(button_group, shift=UP),  # Move button up\n      FadeIn(new_page_group, shift=DOWN))  # Bring new page from top\n    self.wait(2)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe code creates a simple UI animation for a homepage displaying a button. When the button is clicked, it fades slightly to simulate pressing, and then the homepage and button fade out while a new page fades in, creating a transition effect.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp\u003eIf you think of it, scrolling is one of the most natural interactions in modern web and app design. Whether moving between sections on a landing page or smoothly revealing content, well-designed scroll animations make the experience feel fluid. Let me show you:\u003c/p\u003e\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003efrom manim import *\n\nclass ScrollEffect(Scene):\n  def construct(self):\n    # Create three sections to simulate a webpage\n    section1 = Rectangle(width=6, height=3, color=BLUE).shift(UP*3)\n    section2 = Rectangle(width=6, height=3, color=GREEN)\n    section3 = Rectangle(width=6, height=3, color=RED).shift(DOWN*3)\n\n    # Add text to each section\n    text1 = Text(\u0026#34;Welcome\u0026#34;, font_size=32).move_to(section1)\n    text2 = Text(\u0026#34;About Us\u0026#34;, font_size=32).move_to(section2)\n    text3 = Text(\u0026#34;Contact\u0026#34;, font_size=32).move_to(section3)\n\n    self.add(section1, section2, section3, text1, text2, text3)\n    self.wait(1)\n\n    # Simulate scrolling down\n    self.play(\n      section1.animate.shift(DOWN*6),\n      section2.animate.shift(DOWN*6),\n      section3.animate.shift(DOWN*6),\n      text1.animate.shift(DOWN*6),\n      text2.animate.shift(DOWN*6),\n      text3.animate.shift(DOWN*6),\n      run_time=3\n    )\n    self.wait(1)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis animation shows a scrolling effect by moving sections of a webpage upward, simulating how content shifts as a user scrolls. It is a simple way to visualize transitions that make the UI feel smooth and engaging.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"wrapping-up\"\u003eWrapping Up\u003c/h2\u003e\u003cp\u003eManim makes it easier to show how users interact with a design. You can animate navigations, interactions, and user behaviors to understand better how design works in action. Is there more to explore? Definitely! You can take these simple examples and build on them by adding more complex features.\u003c/p\u003e\u003cp\u003eBut what I hope you take away from all of this is that \u003cstrong\u003esubtle animations can help communicate and clarify concepts\u003c/strong\u003e and that Manim is a library for making those sorts of animations. Traditionally, it’s used to help explain mathematical and scientific concepts, but you can see just how useful it can be to working in front-end development, particularly when it comes to highlighting and visualizing UI changes.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003cspan\u003e(gg, yk)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "16 min read",
  "publishedTime": "2025-04-08T15:00:00Z",
  "modifiedTime": "2025-04-08T15:00:00Z"
}
