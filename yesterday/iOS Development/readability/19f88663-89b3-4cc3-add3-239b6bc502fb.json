{
  "id": "19f88663-89b3-4cc3-add3-239b6bc502fb",
  "title": "Raspberry Pi Birdhouse Software",
  "link": "https://atomicbird.com/blog/birdhouse-software/",
  "description": "In my last post I went over the components of the bird house camera I set up this year to get a better look at the local black-capped chickadees. Today I’ll talk about the software that makes it work. Initial Setup Being relatively new to Raspberry Pi, I started off with a full install of Raspbian Deskop. It’s more than I need, since I won’t have anything like a desktop setup, but with a 64GB SD card I wasn’t concerned about the space.",
  "author": "",
  "published": "Mon, 09 May 2022 00:00:00 +0000",
  "source": "https://atomicbird.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 10902,
  "excerpt": "In my last post I went over the components of the bird house camera I set up this year to get a better look at the local black-capped chickadees. Today I’ll talk about the software that makes it work. Initial Setup Being relatively new to Raspberry Pi, I started off with a full install of Raspbian Deskop. It’s more than I need, since I won’t have anything like a desktop setup, but with a 64GB SD card I wasn’t concerned about the space.",
  "siteName": "Title",
  "favicon": "https://atomicbird.com/apple-touch-icon-144-precomposed.png",
  "text": "In my last post I went over the components of the bird house camera I set up this year to get a better look at the local black-capped chickadees. Today I’ll talk about the software that makes it work. Initial Setup Being relatively new to Raspberry Pi, I started off with a full install of Raspbian Deskop. It’s more than I need, since I won’t have anything like a desktop setup, but with a 64GB SD card I wasn’t concerned about the space. At least I knew it was likely to have everything I needed, even if it had more than that as well. I could probably have used the Raspbian “lite” option and added anything not included. Since I would be running the device headless, with no display or keyboard, I made sure to set it up to connect to my wifi network and allow SSH connections automatically. There are various sites describing how to do this, for example here. I considered a few approaches to getting photos off of the Pi. Maybe I could set up Samba and connect to a shared folder of pictures? But I didn’t want the Pi to have to do any more work than necessary, since it would be runing off of a battery and solar panel. I don’t know how much power Samba and photo browsing would use, but I thought I could avoid it. Instead I decided to use rsync to periodically copy files to a remote device– in this case, my desktop Mac. Take a photo, send it somewhere, and let me deal with browsing on a different device where power was less of an issue. Also, rsync was already installed and doesn’t need a server to work. For that to be automatic I needed to be able to ssh from the Pi to my Mac without asking for a password every time. Thanks to ssh-keygen and ssh-copy-id, that’s easy. Now I had my Pi ready to connect to my network and send photos to my Mac. What about taking those photos? Look at the Birdie The most obvious option for still photos on a camera-equipped Pi is the built-in raspistill command. It works pretty well, but I knew I couldn’t use it on its own. If nothing else I needed to take a photo and then copy it to my Mac. Other requirements might come up as I went along. I decided to write a script to handle the entire process. Raspbian includes a Python library to work with the camera, which is great! Or would be if I knew Python. Fortunately there’s a lot of good documentation online about both the language and the library. Also I have past experience at getting stuff done in programming languages I don’t actually know. The plan for the script is: Take a picture and save it in a file with a unique name that indicates when the picture was taken. For example, a photo taken on May 8 2022 at 11:25 AM would be named photo-2022-05-08-11-25-02.jpg. Use rsync to copy the files to my Mac. That’s enough for now. The format of the filenames might seem a little odd. Why “year-month-date-hour-minute-second”? It’s handy because it means that in a list of photo files, sorting by name is the same as sorting by date. It’s the only sane format to keep things in order. The first version of the script looked like this: #!/usr/bin/python # Take a single still photo, save it in \"Pictures\", and then rsync it. from time import sleep from picamera import PiCamera, Color from datetime import datetime import subprocess from os import chdir chdir(\"/home/pi/Pictures\") with PiCamera() as camera: # Let camera warm up sleep(2) camera.resolution = (3280, 2464)     # Annotate photo with the current time and date camera.annotate_text = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\") camera.annotate_text_size = 50 camera.flash_mode = 'on' # This produces a monochrome image camera.color_effects = (128, 128)     # Use a filename that includes the date and time filename = datetime.now().strftime(\"photo-%Y-%m-%d-%H-%M-%S.jpg\") camera.capture(filename) print('capturing %s' % filename) subprocess.call([\"rsync\", \"-avrzul\", \"/home/pi/Pictures/\", \"neutrino.local:/Users/tph/Library/Mobile\\ Documents/com~apple~CloudDocs/zeroone\"]) If you know Python, please be kind, because I was figuring stuff out as I went along. Constructive feedback is welcome. A few of things worth mentioning here: The chdir means that all of the photos end up in a photo-specific directory, which is convenient. I made the picture monochrome because, as I described in my last post, I’m using an IR sensitive camera. Color photos work but they don’t look good for my purposes. The IR flash is always on, because I anticipated there wouldn’t me much light in the bird house The rsync at the end sends files in the Pictures directory to my Mac (neutrino.local). The target directory is in my iCloud Drive folder, which means that the photos also appear on my iPad and iPhone with no extra work by me. (And zeroone is the Pi’s hostname, so I used that as the iCloud folder name). To automate the photo process, I used good old Unix/Linix cron to run the script once every five minutes. I didn’t know when birds might be active so I guessed that I should have it run from 5AM to 7PM every day at first. So. Many. Photos. That worked pretty well, but it did mean that the pictures directory had a lot of photos pretty quickly. I added a new requirement to help deal with this: Make a daily directory of photos, to keep them organized. Photos from May 8, 2022 should be in a directory named 2022-05-08. The revised script wasn’t very different. I replaced the chdir above with this: photoDir = \"/home/pi/Pictures\" todaysDirname = photoDir + \"/\" + datetime.now().strftime(\"%Y-%m-%d\") if not path.isdir(todaysDirname): mkdir(todaysDirname) chdir(todaysDirname) It’s still a lot of photos but this has made them a lot more manageable for me. Reach Up for the Sunrise So far I had only guessed about what times of day would be best for photos. Using 5AM to 7PM was OK at first. As the solstice approaches though, days get longer and birds may be active later on. I knew I’d have to adjust the schedule, and I thought there had to be a better way than just changing the stop time from 7PM to 8PM or 9PM or whatever. Using Python came in handy, because although I stumbled some with the language, there are a ton of useful open source packages to add abilities. I found the Astral package, which provides details like sunset and sunset times for whatever latitude, longitude, and date you’re interested in. Adding it was easy. Getting time zones and UTC conversions working was harder, because that stuff always is. Eventually I added this to the top of my script: from astral import LocationInfo from astral.sun import sun from datetime import datetime, date import pytz city = LocationInfo(\"Colorado Springs\", \"USA\", \"America/Denver\", 38.833889, -104.825278) s = sun(city.observer, date=date.today()) # Use UTC now for time of day checks utc = pytz.UTC utcnow=utc.localize(datetime.utcnow()) if utcnow \u003c s[\"dawn\"] or utcnow \u003e s[\"dusk\"]:     exit(0) This looks up sun-related information for my location on the current date, then checks to see if the current time is before dawn or after dusk. If either of those is true, it stops. No photo is taken. Again, I don’t really know Python, so constructive feedback on the above is welcome. With that in place I updated the cron schedule to run the script every 5 minites at any time of day or night. The script can figure out if it should take a photo. So now, I’ll automatically get a schedule that follows longer or shorter days for as long as I keep it running. Have You Tried Turning it Off and On Again? All was well until one day when the Pi just wasn’t responding. I couldn’t tell why. Since the birds had not moved in yet, I took down the bird house and reopened it to have a look. When I disconnected the power briefly and then plugged it back in, the Pi worked normally. So uh, WTF, basically? At about the same time I was messing around with a separate camera-equipped Pi, for a different project. While testing, the terminal suddenly printed messages about a “kernel oops”, followed by a kernel panic. The Pi stopped responding until I power-cycled it. Was this what stopped the bird house’s Pi that day? I couldn’t be certain, but it fit the scanty details I had. In the hope of keeping the kernel happy when it’s running in an inhabited bird house, I edited the root crontab (sudo crontab -e) on the Pi to reboot once per day. 0 5 * * * /usr/sbin/shutdown -r now Will this help? Hell I don’t even know if a panic was the problem, much less if this is a real fix. It’s been operating normally for six weeks now though, so, maybe? Next year I’ll make sure to have an easily-accessible way to just power cycle the Pi. One more thing… Now that I was getting regular photos, I found that the bird house has a lot more light during the day than I expected. The flash isn’t necessary except for the earliest or latest photos of the day. I went back to the camera portion of the script and changed the flash setting from on to auto. That should save some power but still use a flash when it’s needed. The Latest Script After the above, the latest version of the script looks like this #!/usr/bin/python3 from time import sleep from picamera import PiCamera, Color import subprocess from os import chdir, mkdir, path from astral import LocationInfo from astral.sun import sun from datetime import datetime, date import pytz city = LocationInfo(\"Colorado Springs\", \"USA\", \"America/Denver\", 38.833889, -104.825278) s = sun(city.observer, date=date.today()) # Use UTC now for time of day checks utc = pytz.UTC utcnow=utc.localize(datetime.utcnow()) if utcnow \u003c s[\"dawn\"] or utcnow \u003e s[\"dusk\"]:     exit(0) photoDir = \"/home/pi/Pictures\" # Use local time for dir and file names now = datetime.now() todaysDirname = photoDir + \"/\" + now.strftime(\"%Y-%m-%d\") if not path.isdir(todaysDirname): mkdir(todaysDirname) chdir(todaysDirname) # Use a filename that includes the date and time filename = now.strftime(\"photo-%Y-%m-%d-%H-%M-%S.jpg\") with PiCamera() as camera: # Let camera warm up sleep(2) camera.resolution = (3280, 2464)     # Annotate photo with the current time and date camera.annotate_text = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\") camera.annotate_text_size = 50 camera.flash_mode = 'auto' # This produces a monochrome image camera.color_effects = (128, 128) camera.capture(filename) print('capturing %s' % filename) # rsync to a folder in iCloud Drive subprocess.call([\"rsync\", \"-avrzul\", \"/home/pi/Pictures/\", \"neutrino.local:/Users/tph/Library/Mobile\\ Documents/com~apple~CloudDocs/zeroone\"]) I don’t expect any more changes this year but we’ll see what happens. For My Next Trick… I have one more followup post in the works, where I’ll talk about the solar panel-based power setup for the Pi, and the ups and downs I’ve had with that. In the meantime though, another photo of how things are going so far. The chickadees moved in and have been laying eggs for the past several days. As of today they have six!",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n    \u003cp\u003eIn \u003ca href=\"https://atomicbird.com/blog/birdhouse-camera-hardware/\"\u003emy last post\u003c/a\u003e I went over the components of the bird house camera I set up this year to get a better look at the local black-capped chickadees. Today I’ll talk about the software that makes it work.\u003c/p\u003e\n\u003ch3 id=\"initial-setup\"\u003eInitial Setup\u003c/h3\u003e\n\u003cp\u003eBeing relatively new to Raspberry Pi, I started off with a full install of Raspbian Deskop. It’s more than I need, since I won’t have anything like a desktop setup, but with a 64GB SD card I wasn’t concerned about the space. At least I knew it was likely to have everything I needed, even if it had more than that as well. I could probably have used the Raspbian “lite” option and added anything not included.\u003c/p\u003e\n\u003cp\u003eSince I would be running the device headless, with no display or keyboard, I made sure to set it up to connect to my wifi network and allow SSH connections automatically. There are various sites describing how to do this, for example \u003ca href=\"https://www.tomshardware.com/reviews/raspberry-pi-headless-setup-how-to,6028.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI considered a few approaches to getting photos off of the Pi. Maybe I could set up Samba and connect to a shared folder of pictures? But I didn’t want the Pi to have to do any more work than necessary, since it would be runing off of a battery and solar panel. I don’t know how much power Samba and photo browsing would use, but I thought I could avoid it.\u003c/p\u003e\n\u003cp\u003eInstead I decided to use \u003ccode\u003ersync\u003c/code\u003e to periodically copy files to a remote device– in this case, my desktop Mac. Take a photo, send it somewhere, and let me deal with browsing on a different device where power was less of an issue. Also, \u003ccode\u003ersync\u003c/code\u003e was already installed and doesn’t need a server to work.\u003c/p\u003e\n\u003cp\u003eFor that to be automatic I needed to be able to ssh from the Pi to my Mac without asking for a password every time. Thanks to \u003ccode\u003essh-keygen\u003c/code\u003e and \u003ccode\u003essh-copy-id\u003c/code\u003e, that’s easy.\u003c/p\u003e\n\u003cp\u003eNow I had my Pi ready to connect to my network and send photos to my Mac. What about taking those photos?\u003c/p\u003e\n\u003ch3 id=\"look-at-the-birdie\"\u003eLook at the Birdie\u003c/h3\u003e\n\u003cp\u003eThe most obvious option for still photos on a camera-equipped Pi is the built-in \u003ccode\u003eraspistill\u003c/code\u003e command. It works pretty well, but I knew I couldn’t use it on its own. If nothing else I needed to take a photo and then copy it to my Mac. Other requirements might come up as I went along. I decided to write a script to handle the entire process.\u003c/p\u003e\n\u003cp\u003eRaspbian includes a Python library to work with the camera, which is great! Or would be if I knew Python. Fortunately there’s a lot of good documentation online about both the language and the library. Also I have past experience at getting stuff done in programming languages I don’t actually know.\u003c/p\u003e\n\u003cp\u003eThe plan for the script is:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eTake a picture and save it in a file with a unique name that indicates when the picture was taken. For example, a photo taken on May 8 2022 at 11:25 AM would be named \u003ccode\u003ephoto-2022-05-08-11-25-02.jpg\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003ersync\u003c/code\u003e to copy the files to my Mac.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThat’s enough for now.\u003c/p\u003e\n\u003cp\u003eThe format of the filenames might seem a little odd. Why “year-month-date-hour-minute-second”? It’s handy because it means that in a list of photo files, sorting by name is the same as sorting by date. It’s the only sane format to keep things in order.\u003c/p\u003e\n\u003cp\u003eThe first version of the script looked like this:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"python\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e#!/usr/bin/python\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Take a single still photo, save it in \u0026#34;Pictures\u0026#34;, and then rsync it.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efrom\u003c/span\u003e time \u003cspan\u003eimport\u003c/span\u003e sleep\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efrom\u003c/span\u003e picamera \u003cspan\u003eimport\u003c/span\u003e PiCamera, Color\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efrom\u003c/span\u003e datetime \u003cspan\u003eimport\u003c/span\u003e datetime\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eimport\u003c/span\u003e subprocess\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efrom\u003c/span\u003e os \u003cspan\u003eimport\u003c/span\u003e chdir\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003echdir(\u003cspan\u003e\u0026#34;/home/pi/Pictures\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003ewith\u003c/span\u003e PiCamera() \u003cspan\u003eas\u003c/span\u003e camera:\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\t\u003cspan\u003e# Let camera warm up\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tsleep(\u003cspan\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tcamera\u003cspan\u003e.\u003c/span\u003eresolution \u003cspan\u003e=\u003c/span\u003e (\u003cspan\u003e3280\u003c/span\u003e, \u003cspan\u003e2464\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e# Annotate photo with the current time and date\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tcamera\u003cspan\u003e.\u003c/span\u003eannotate_text \u003cspan\u003e=\u003c/span\u003e datetime\u003cspan\u003e.\u003c/span\u003enow()\u003cspan\u003e.\u003c/span\u003estrftime(\u003cspan\u003e\u0026#34;%Y-%m-\u003c/span\u003e\u003cspan\u003e%d\u003c/span\u003e\u003cspan\u003e %H:%M:%S\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tcamera\u003cspan\u003e.\u003c/span\u003eannotate_text_size \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e50\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tcamera\u003cspan\u003e.\u003c/span\u003eflash_mode \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;on\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\t\u003cspan\u003e# This produces a monochrome image\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tcamera\u003cspan\u003e.\u003c/span\u003ecolor_effects \u003cspan\u003e=\u003c/span\u003e (\u003cspan\u003e128\u003c/span\u003e, \u003cspan\u003e128\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e# Use a filename that includes the date and time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tfilename \u003cspan\u003e=\u003c/span\u003e datetime\u003cspan\u003e.\u003c/span\u003enow()\u003cspan\u003e.\u003c/span\u003estrftime(\u003cspan\u003e\u0026#34;photo-%Y-%m-\u003c/span\u003e\u003cspan\u003e%d\u003c/span\u003e\u003cspan\u003e-%H-%M-%S.jpg\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tcamera\u003cspan\u003e.\u003c/span\u003ecapture(filename)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tprint(\u003cspan\u003e\u0026#39;capturing \u003c/span\u003e\u003cspan\u003e%s\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e \u003cspan\u003e%\u003c/span\u003e filename)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003esubprocess\u003cspan\u003e.\u003c/span\u003ecall([\u003cspan\u003e\u0026#34;rsync\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;-avrzul\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;/home/pi/Pictures/\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;neutrino.local:/Users/tph/Library/Mobile\\ Documents/com~apple~CloudDocs/zeroone\u0026#34;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cem\u003eIf you know Python, please be kind, because I was figuring stuff out as I went along. Constructive feedback is welcome.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eA few of things worth mentioning here:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003echdir\u003c/code\u003e means that all of the photos end up in a photo-specific directory, which is convenient.\u003c/li\u003e\n\u003cli\u003eI made the picture monochrome because, as I described in my last post, I’m using an IR sensitive camera. Color photos work but they don’t look good for my purposes.\u003c/li\u003e\n\u003cli\u003eThe IR flash is always on, because I anticipated there wouldn’t me much light in the bird house\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ersync\u003c/code\u003e at the end sends files in the \u003ccode\u003ePictures\u003c/code\u003e directory to my Mac (\u003ccode\u003eneutrino.local\u003c/code\u003e). The target directory is in my iCloud Drive folder, which means that the photos also appear on my iPad and iPhone with no extra work by me. (And \u003ccode\u003ezeroone\u003c/code\u003e is the Pi’s hostname, so I used that as the iCloud folder name).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo automate the photo process, I used good old Unix/Linix \u003ccode\u003ecron\u003c/code\u003e to run the script once every five minutes. I didn’t know when birds might be active so I guessed that I should have it run from 5AM to 7PM every day at first.\u003c/p\u003e\n\u003ch3 id=\"so-many-photos\"\u003eSo. Many. Photos.\u003c/h3\u003e\n\u003cp\u003eThat worked pretty well, but it did mean that the pictures directory had \u003cstrong\u003ea lot\u003c/strong\u003e of photos pretty quickly. I added a new requirement to help deal with this:\u003c/p\u003e\n\u003col start=\"0\"\u003e\n\u003cli\u003eMake a daily directory of photos, to keep them organized. Photos from May 8, 2022 should be in a directory named \u003ccode\u003e2022-05-08\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe revised script wasn’t very different. I replaced the \u003ccode\u003echdir\u003c/code\u003e above with this:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"python\"\u003e\u003cspan\u003e\u003cspan\u003ephotoDir \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;/home/pi/Pictures\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003etodaysDirname \u003cspan\u003e=\u003c/span\u003e photoDir \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e\u0026#34;/\u0026#34;\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e datetime\u003cspan\u003e.\u003c/span\u003enow()\u003cspan\u003e.\u003c/span\u003estrftime(\u003cspan\u003e\u0026#34;%Y-%m-\u003c/span\u003e\u003cspan\u003e%d\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eif\u003c/span\u003e \u003cspan\u003enot\u003c/span\u003e path\u003cspan\u003e.\u003c/span\u003eisdir(todaysDirname):\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tmkdir(todaysDirname)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003echdir(todaysDirname)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt’s still a lot of photos but this has made them a lot more manageable for me.\u003c/p\u003e\n\u003ch3 id=\"reach-up-for-the-sunrise\"\u003eReach Up for the Sunrise\u003c/h3\u003e\n\u003cp\u003eSo far I had only guessed about what times of day would be best for photos. Using 5AM to 7PM was OK at first. As the solstice approaches though, days get longer and birds may be active later on. I knew I’d have to adjust the schedule, and I thought there had to be a better way than just changing the stop time from 7PM to 8PM or 9PM or whatever.\u003c/p\u003e\n\u003cp\u003eUsing Python came in handy, because although I stumbled some with the language, there are a ton of useful open source packages to add abilities. I found the \u003ca href=\"https://astral.readthedocs.io/en/latest/index.html\"\u003eAstral\u003c/a\u003e package, which provides details like sunset and sunset times for whatever latitude, longitude, and date you’re interested in.\u003c/p\u003e\n\u003cp\u003eAdding it was easy. Getting time zones and UTC conversions working was harder, because that stuff always is. Eventually I added this to the top of my script:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"python\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efrom\u003c/span\u003e astral \u003cspan\u003eimport\u003c/span\u003e LocationInfo\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efrom\u003c/span\u003e astral.sun \u003cspan\u003eimport\u003c/span\u003e sun\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efrom\u003c/span\u003e datetime \u003cspan\u003eimport\u003c/span\u003e datetime, date\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eimport\u003c/span\u003e pytz\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ecity \u003cspan\u003e=\u003c/span\u003e LocationInfo(\u003cspan\u003e\u0026#34;Colorado Springs\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;USA\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;America/Denver\u0026#34;\u003c/span\u003e, \u003cspan\u003e38.833889\u003c/span\u003e, \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e104.825278\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003es \u003cspan\u003e=\u003c/span\u003e sun(city\u003cspan\u003e.\u003c/span\u003eobserver, date\u003cspan\u003e=\u003c/span\u003edate\u003cspan\u003e.\u003c/span\u003etoday())\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Use UTC now for time of day checks\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eutc \u003cspan\u003e=\u003c/span\u003e pytz\u003cspan\u003e.\u003c/span\u003eUTC\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eutcnow\u003cspan\u003e=\u003c/span\u003eutc\u003cspan\u003e.\u003c/span\u003elocalize(datetime\u003cspan\u003e.\u003c/span\u003eutcnow())\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eif\u003c/span\u003e utcnow \u003cspan\u003e\u0026lt;\u003c/span\u003e s[\u003cspan\u003e\u0026#34;dawn\u0026#34;\u003c/span\u003e] \u003cspan\u003eor\u003c/span\u003e utcnow \u003cspan\u003e\u0026gt;\u003c/span\u003e s[\u003cspan\u003e\u0026#34;dusk\u0026#34;\u003c/span\u003e]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    exit(\u003cspan\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis looks up sun-related information for my location on the current date, then checks to see if the current time is before dawn or after dusk. If either of those is true, it stops. No photo is taken.\u003c/p\u003e\n\u003cp\u003eAgain, I don’t really know Python, so constructive feedback on the above is welcome.\u003c/p\u003e\n\u003cp\u003eWith that in place I updated the \u003ccode\u003ecron\u003c/code\u003e schedule to run the script every 5 minites at any time of day or night. The script can figure out if it should take a photo. So now, I’ll automatically get a schedule that follows longer or shorter days for as long as I keep it running.\u003c/p\u003e\n\u003ch3 id=\"have-you-tried-turning-it-off-and-on-again\"\u003eHave You Tried Turning it Off and On Again?\u003c/h3\u003e\n\u003cp\u003eAll was well until one day when the Pi just wasn’t responding. I couldn’t tell why. Since the birds had not moved in yet, I took down the bird house and reopened it to have a look.\u003c/p\u003e\n\u003cp\u003eWhen I disconnected the power briefly and then plugged it back in, the Pi worked normally. So uh, WTF, basically?\u003c/p\u003e\n\u003cp\u003eAt about the same time I was messing around with a separate camera-equipped Pi, for a different project. While testing, the terminal suddenly printed messages about a “kernel oops”, followed by a kernel panic. The Pi stopped responding until I power-cycled it. Was this what stopped the bird house’s Pi that day? I couldn’t be certain, but it fit the scanty details I had.\u003c/p\u003e\n\u003cp\u003eIn the hope of keeping the kernel happy when it’s running in an inhabited bird house, I edited the root crontab (\u003ccode\u003esudo crontab -e\u003c/code\u003e) on the Pi to reboot once per day.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e0 5 * * * /usr/sbin/shutdown -r now\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWill this help? Hell I don’t even know if a panic was the problem, much less if this is a real fix. It’s been operating normally for six weeks now though, so, maybe? Next year I’ll make sure to have an easily-accessible way to just power cycle the Pi.\u003c/p\u003e\n\u003ch3 id=\"one-more-thing\"\u003eOne more thing…\u003c/h3\u003e\n\u003cp\u003eNow that I was getting regular photos, I found that the bird house has a lot more light during the day than I expected. The flash isn’t necessary except for the earliest or latest photos of the day. I went back to the camera portion of the script and changed the flash setting from \u003ccode\u003eon\u003c/code\u003e to \u003ccode\u003eauto\u003c/code\u003e. That should save some power but still use a flash when it’s needed.\u003c/p\u003e\n\u003ch3 id=\"the-latest-script\"\u003eThe Latest Script\u003c/h3\u003e\n\u003cp\u003eAfter the above, the latest version of the script looks like this\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"python\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e#!/usr/bin/python3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efrom\u003c/span\u003e time \u003cspan\u003eimport\u003c/span\u003e sleep\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efrom\u003c/span\u003e picamera \u003cspan\u003eimport\u003c/span\u003e PiCamera, Color\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eimport\u003c/span\u003e subprocess\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efrom\u003c/span\u003e os \u003cspan\u003eimport\u003c/span\u003e chdir, mkdir, path\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efrom\u003c/span\u003e astral \u003cspan\u003eimport\u003c/span\u003e LocationInfo\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efrom\u003c/span\u003e astral.sun \u003cspan\u003eimport\u003c/span\u003e sun\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efrom\u003c/span\u003e datetime \u003cspan\u003eimport\u003c/span\u003e datetime, date\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eimport\u003c/span\u003e pytz\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ecity \u003cspan\u003e=\u003c/span\u003e LocationInfo(\u003cspan\u003e\u0026#34;Colorado Springs\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;USA\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;America/Denver\u0026#34;\u003c/span\u003e, \u003cspan\u003e38.833889\u003c/span\u003e, \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e104.825278\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003es \u003cspan\u003e=\u003c/span\u003e sun(city\u003cspan\u003e.\u003c/span\u003eobserver, date\u003cspan\u003e=\u003c/span\u003edate\u003cspan\u003e.\u003c/span\u003etoday())\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Use UTC now for time of day checks\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eutc \u003cspan\u003e=\u003c/span\u003e pytz\u003cspan\u003e.\u003c/span\u003eUTC\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eutcnow\u003cspan\u003e=\u003c/span\u003eutc\u003cspan\u003e.\u003c/span\u003elocalize(datetime\u003cspan\u003e.\u003c/span\u003eutcnow())\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eif\u003c/span\u003e utcnow \u003cspan\u003e\u0026lt;\u003c/span\u003e s[\u003cspan\u003e\u0026#34;dawn\u0026#34;\u003c/span\u003e] \u003cspan\u003eor\u003c/span\u003e utcnow \u003cspan\u003e\u0026gt;\u003c/span\u003e s[\u003cspan\u003e\u0026#34;dusk\u0026#34;\u003c/span\u003e]:\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    exit(\u003cspan\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ephotoDir \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;/home/pi/Pictures\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Use local time for dir and file names\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003enow \u003cspan\u003e=\u003c/span\u003e datetime\u003cspan\u003e.\u003c/span\u003enow()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003etodaysDirname \u003cspan\u003e=\u003c/span\u003e photoDir \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e\u0026#34;/\u0026#34;\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e now\u003cspan\u003e.\u003c/span\u003estrftime(\u003cspan\u003e\u0026#34;%Y-%m-\u003c/span\u003e\u003cspan\u003e%d\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eif\u003c/span\u003e \u003cspan\u003enot\u003c/span\u003e path\u003cspan\u003e.\u003c/span\u003eisdir(todaysDirname):\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tmkdir(todaysDirname)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003echdir(todaysDirname)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Use a filename that includes the date and time\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003efilename \u003cspan\u003e=\u003c/span\u003e now\u003cspan\u003e.\u003c/span\u003estrftime(\u003cspan\u003e\u0026#34;photo-%Y-%m-\u003c/span\u003e\u003cspan\u003e%d\u003c/span\u003e\u003cspan\u003e-%H-%M-%S.jpg\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003ewith\u003c/span\u003e PiCamera() \u003cspan\u003eas\u003c/span\u003e camera:\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\t\u003cspan\u003e# Let camera warm up\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tsleep(\u003cspan\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tcamera\u003cspan\u003e.\u003c/span\u003eresolution \u003cspan\u003e=\u003c/span\u003e (\u003cspan\u003e3280\u003c/span\u003e, \u003cspan\u003e2464\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e# Annotate photo with the current time and date\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tcamera\u003cspan\u003e.\u003c/span\u003eannotate_text \u003cspan\u003e=\u003c/span\u003e datetime\u003cspan\u003e.\u003c/span\u003enow()\u003cspan\u003e.\u003c/span\u003estrftime(\u003cspan\u003e\u0026#34;%Y-%m-\u003c/span\u003e\u003cspan\u003e%d\u003c/span\u003e\u003cspan\u003e %H:%M:%S\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tcamera\u003cspan\u003e.\u003c/span\u003eannotate_text_size \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e50\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tcamera\u003cspan\u003e.\u003c/span\u003eflash_mode \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#39;auto\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\t\u003cspan\u003e# This produces a monochrome image\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tcamera\u003cspan\u003e.\u003c/span\u003ecolor_effects \u003cspan\u003e=\u003c/span\u003e (\u003cspan\u003e128\u003c/span\u003e, \u003cspan\u003e128\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tcamera\u003cspan\u003e.\u003c/span\u003ecapture(filename)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\tprint(\u003cspan\u003e\u0026#39;capturing \u003c/span\u003e\u003cspan\u003e%s\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e \u003cspan\u003e%\u003c/span\u003e filename)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# rsync to a folder in iCloud Drive\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003esubprocess\u003cspan\u003e.\u003c/span\u003ecall([\u003cspan\u003e\u0026#34;rsync\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;-avrzul\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;/home/pi/Pictures/\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;neutrino.local:/Users/tph/Library/Mobile\\ Documents/com~apple~CloudDocs/zeroone\u0026#34;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI don’t expect any more changes this year but we’ll see what happens.\u003c/p\u003e\n\u003ch3 id=\"for-my-next-trick\"\u003eFor My Next Trick…\u003c/h3\u003e\n\u003cp\u003eI have one more followup post in the works, where I’ll talk about the solar panel-based power setup for the Pi, and the ups and downs I’ve had with that.\u003c/p\u003e\n\u003cp\u003eIn the meantime though, another photo of how things are going so far. The chickadees moved in and have been laying eggs for the past several days. As of today they have six!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://atomicbird.com/blog/birdhouse-software/photo-2022-05-09-07-05-02.jpg#center\" alt=\"Bird nest with six eggs\"/\u003e\u003c/p\u003e\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": "2022-05-09T00:00:00Z",
  "modifiedTime": "2022-05-09T00:00:00Z"
}
