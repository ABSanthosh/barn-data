{
  "id": "40f15472-dc95-4e19-9603-78086578b9a6",
  "title": "SwiftUI Button Image When Pressed",
  "link": "https://useyourloaf.com/blog/swiftui-button-image-when-pressed/",
  "description": "How do you change the image a SwiftUI button shows while the user is pressing the button? Button State A UIKit control like a UIButton has a default normal state and additional states that indicate if it’s highlighted, disabled, selected or focused. You can provide different configurations for each state. You can configure the button to show a different image, title, or background when the user touches (highlights) it. That provides a useful visual feedback to the user. A SwiftUI button lacks a lot of the UIKit customizations. I’ve written about SwiftUI button styles and shapes before. The ButtonStyleConfiguration gives you access to the button label, isPressed state, and button role (cancel or destructive). I wanted to create the equivalent of a UIKit info button that uses the “info.circle” SF Symbol: When the user presses the button I want the image to switch the filled variant of the symbol: Pressed Button Style Since this is something I’m going to want to reuse for other buttons I built a pressed button style that accepts a title, and two images for the default and pressed states: struct PressedButtonStyle: ButtonStyle { let title: String let systemImage: String let pressedImage: String func makeBody(configuration: Configuration) -\u003e some View { let imageName = configuration.isPressed ? pressedImage : systemImage return Label(title, systemImage: imageName) } } In the makeBody method I check the button configuration and return a label with the correct image based on the isPressed state. I don’t like how the style ignores the button’s configured label but I don’t see another way? Then to build my InfoButton: struct InfoButton: View { let action: () -\u003e Void init(_ action: @escaping () -\u003e Void) { self.action = action } var body: some View { Button(\"\") { action() } .buttonStyle( PressedButtonStyle( title: \"Info\", systemImage: \"info.circle\", pressedImage: \"info.circle.fill\") ) .padding() } } Using the button: InfoButton { // Do something } .labelStyle(.iconOnly) .font(.largeTitle) Adding Animation One extra refinement, adding an SF Symbol effect to the PressedButtonStyle to scale the image up when pressed: struct PressedButtonStyle: ButtonStyle { let title: String let systemImage: String let pressedImage: String func makeBody(configuration: Configuration) -\u003e some View { let imageName = configuration.isPressed ? pressedImage : systemImage return Label(title, systemImage: imageName) .symbolEffect(.scale.up, isActive: configuration.isPressed) } } Maybe Apple will improve the button configuration to make this easier but until then that’s the best I can manage. If you have a better approach let me know. Read More SwiftUI Button Styles and Shapes SwiftUI Button Image When Pressed was originally posted 27 Jan 2025 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
  "author": "",
  "published": "Mon, 27 Jan 2025 11:08:45 +0000",
  "source": "https://useyourloaf.com/blog/rss.xml",
  "categories": null,
  "byline": "",
  "length": 2806,
  "excerpt": "How do you change the image a SwiftUI button shows while the user is pressing the button?",
  "siteName": "Use Your Loaf - iOS Development News \u0026 Tips",
  "favicon": "https://useyourloaf.com/apple-touch-icon.png",
  "text": "How do you change the image a SwiftUI button shows while the user is pressing the button? Button State A UIKit control like a UIButton has a default normal state and additional states that indicate if it’s highlighted, disabled, selected or focused. You can provide different configurations for each state. You can configure the button to show a different image, title, or background when the user touches (highlights) it. That provides a useful visual feedback to the user. A SwiftUI button lacks a lot of the UIKit customizations. I’ve written about SwiftUI button styles and shapes before. The ButtonStyleConfiguration gives you access to the button label, isPressed state, and button role (cancel or destructive). I wanted to create the equivalent of a UIKit info button that uses the “info.circle” SF Symbol: When the user presses the button I want the image to switch the filled variant of the symbol: Pressed Button Style Since this is something I’m going to want to reuse for other buttons I built a pressed button style that accepts a title, and two images for the default and pressed states: struct PressedButtonStyle: ButtonStyle { let title: String let systemImage: String let pressedImage: String func makeBody(configuration: Configuration) -\u003e some View { let imageName = configuration.isPressed ? pressedImage : systemImage return Label(title, systemImage: imageName) } } In the makeBody method I check the button configuration and return a label with the correct image based on the isPressed state. I don’t like how the style ignores the button’s configured label but I don’t see another way? Then to build my InfoButton: struct InfoButton: View { let action: () -\u003e Void init(_ action: @escaping () -\u003e Void) { self.action = action } var body: some View { Button(\"\") { action() } .buttonStyle( PressedButtonStyle( title: \"Info\", systemImage: \"info.circle\", pressedImage: \"info.circle.fill\") ) .padding() } } Using the button: InfoButton { // Do something } .labelStyle(.iconOnly) .font(.largeTitle) Adding Animation One extra refinement, adding an SF Symbol effect to the PressedButtonStyle to scale the image up when pressed: struct PressedButtonStyle: ButtonStyle { let title: String let systemImage: String let pressedImage: String func makeBody(configuration: Configuration) -\u003e some View { let imageName = configuration.isPressed ? pressedImage : systemImage return Label(title, systemImage: imageName) .symbolEffect(.scale.up, isActive: configuration.isPressed) } } Maybe Apple will improve the button configuration to make this easier but until then that’s the best I can manage. If you have a better approach let me know. Read More SwiftUI Button Styles and Shapes",
  "image": "https://useyourloaf.com/blog/swiftui-button-image-when-pressed/cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eHow do you change the image a SwiftUI button shows while the user is pressing the button?\u003c/p\u003e\n\u003ch3 id=\"button-state\"\u003eButton State\u003c/h3\u003e\n\u003cp\u003eA UIKit control like a UIButton has a default normal state and additional states that indicate if it’s highlighted, disabled, selected or focused. You can provide different configurations for each state. \u003cstrong\u003eYou can configure the button to show a different image, title, or background when the user touches (highlights) it\u003c/strong\u003e. That provides a useful visual feedback to the user.\u003c/p\u003e\n\u003cp\u003eA SwiftUI button lacks a lot of the UIKit customizations. I’ve written about \u003ca href=\"https://useyourloaf.com/blog/swiftui-button-styles-and-shapes/\"\u003eSwiftUI button styles and shapes\u003c/a\u003e before. The ButtonStyleConfiguration gives you access to the button label, isPressed state, and button role (cancel or destructive).\u003c/p\u003e\n\u003cp\u003eI wanted to create the equivalent of a UIKit info button that uses the “info.circle” SF Symbol:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/swiftui-button-image-when-pressed/001.png\" alt=\"info button, i in a circle\" width=\"163\" height=\"163\" srcset=\"https://useyourloaf.com/blog/swiftui-button-image-when-pressed/001@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhen the user presses the button I want the image to switch the filled variant of the symbol:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/swiftui-button-image-when-pressed/002.png\" alt=\"info button, i in a filled circle\" width=\"163\" height=\"163\" srcset=\"https://useyourloaf.com/blog/swiftui-button-image-when-pressed/002@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"pressed-button-style\"\u003ePressed Button Style\u003c/h3\u003e\n\u003cp\u003eSince this is something I’m going to want to reuse for other buttons I built a pressed button style that accepts a title, and two images for the default and pressed states:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003ePressedButtonStyle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eButtonStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003esystemImage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003epressedImage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003emakeBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eConfiguration\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eimageName\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisPressed\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003epressedImage\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esystemImage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eLabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esystemImage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eimageName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn the makeBody method I check the button configuration and return a label with the correct image based on the isPressed state. I don’t like how the style ignores the button’s configured label but I don’t see another way?\u003c/p\u003e\n\u003cp\u003eThen to build my InfoButton:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eInfoButton\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eaction\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e()\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eVoid\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e \u003cspan\u003eaction\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eescaping\u003c/span\u003e \u003cspan\u003e()\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eVoid\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaction\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eaction\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003eaction\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuttonStyle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003ePressedButtonStyle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Info\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003esystemImage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;info.circle\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003epressedImage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;info.circle.fill\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epadding\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eUsing the button:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eInfoButton\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e// Do something\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elabelStyle\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003eiconOnly\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efont\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003elargeTitle\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"adding-animation\"\u003eAdding Animation\u003c/h3\u003e\n\u003cp\u003eOne extra refinement, adding an SF Symbol effect to the PressedButtonStyle to scale the image up when pressed:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003ePressedButtonStyle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eButtonStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003esystemImage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003epressedImage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003emakeBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eConfiguration\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eimageName\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisPressed\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003epressedImage\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esystemImage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eLabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esystemImage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eimageName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esymbolEffect\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003escale\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eup\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eisActive\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisPressed\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMaybe Apple will improve the button configuration to make this easier but until then that’s the best I can manage. If you have a better approach let me know.\u003c/p\u003e\n\u003ch3 id=\"read-more\"\u003eRead More\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://useyourloaf.com/blog/swiftui-button-styles-and-shapes/\"\u003eSwiftUI Button Styles and Shapes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-01-27T11:08:45Z",
  "modifiedTime": "2025-01-29T19:58:47Z"
}
