{
  "id": "a388ed4b-9dc0-4949-992c-acd4362b100a",
  "title": "Conditional SwiftUI Accessibility Labels",
  "link": "https://useyourloaf.com/blog/conditional-swiftui-accessibility-labels/",
  "description": "In iOS 18, Apple added an optional isEnabled parameter to many of the accessibility modifiers. Conditional Accessibility Modifiers (iOS 18) Apple added the isEnabled parameter to .accessibilityLabel, .accessibilityInputLabels, .accessibilityValue, .accessibilityHint and many other accessibility modifiers. This has the effect of only applying the modifier when the isEnabled parameter is true. This is useful in situations where you need to conditionally override the default accessibility behaviour. For example, this labeled content has a button with a system symbol image: LabeledContent { Button { toggleFavorite(item) } label: { Image(systemName: item.favorite ? \"star.fill\" : \"star\") } } label: { Text(item.name) } I’m using the labeled content in a list of items, the button toggling the favorite status of each item: The button label provides the default accessibility label for the button action. In this example I’m using the “star” SF symbol which has a default (localized) accessibility label of “favorite”. That’s great but I’d like to change the label based on favorite status of the item. Favorited items show the filled version of the “star” symbol and I’d like the accessibility label for the button action to be “unfavorite”. One way is with an accessibility label that is conditional on the favorite status of the item: Image(systemName: item.favorite ? \"star.fill\" : \"star\") .accessibilityLabel(item.favorite ? \"Favorite\" : \"Unfavorite\") That works, but in situatons like this where we already have a suitable default label we can use the isEnabled variant of the modifier: Image(systemName: item.favorite ? \"star.fill\" : \"star\") .accessibilityLabel(\"Unfavorite\", isEnabled: item.favorite) It’s a small improvement but I think still useful to avoid having to repeat (and localize) the default label. Learn More WWDC24 Catch up on accessibility in SwiftUI Conditional SwiftUI Accessibility Labels was originally posted 21 Oct 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
  "author": "",
  "published": "Mon, 21 Oct 2024 11:08:21 +0100",
  "source": "https://useyourloaf.com/blog/rss.xml",
  "categories": null,
  "byline": "",
  "length": 1913,
  "excerpt": "In iOS 18, Apple added an optional isEnabled parameter to many of the accessibility modifiers.",
  "siteName": "Use Your Loaf - iOS Development News \u0026 Tips",
  "favicon": "https://useyourloaf.com/apple-touch-icon.png",
  "text": "In iOS 18, Apple added an optional isEnabled parameter to many of the accessibility modifiers. Conditional Accessibility Modifiers (iOS 18) Apple added the isEnabled parameter to .accessibilityLabel, .accessibilityInputLabels, .accessibilityValue, .accessibilityHint and many other accessibility modifiers. This has the effect of only applying the modifier when the isEnabled parameter is true. This is useful in situations where you need to conditionally override the default accessibility behaviour. For example, this labeled content has a button with a system symbol image: LabeledContent { Button { toggleFavorite(item) } label: { Image(systemName: item.favorite ? \"star.fill\" : \"star\") } } label: { Text(item.name) } I’m using the labeled content in a list of items, the button toggling the favorite status of each item: The button label provides the default accessibility label for the button action. In this example I’m using the “star” SF symbol which has a default (localized) accessibility label of “favorite”. That’s great but I’d like to change the label based on favorite status of the item. Favorited items show the filled version of the “star” symbol and I’d like the accessibility label for the button action to be “unfavorite”. One way is with an accessibility label that is conditional on the favorite status of the item: Image(systemName: item.favorite ? \"star.fill\" : \"star\") .accessibilityLabel(item.favorite ? \"Favorite\" : \"Unfavorite\") That works, but in situatons like this where we already have a suitable default label we can use the isEnabled variant of the modifier: Image(systemName: item.favorite ? \"star.fill\" : \"star\") .accessibilityLabel(\"Unfavorite\", isEnabled: item.favorite) It’s a small improvement but I think still useful to avoid having to repeat (and localize) the default label. Learn More WWDC24 Catch up on accessibility in SwiftUI",
  "image": "https://useyourloaf.com/assets/images/banner.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eIn iOS 18, Apple added an optional \u003ccode\u003eisEnabled\u003c/code\u003e parameter to many of the accessibility modifiers.\u003c/p\u003e\n\u003ch3 id=\"conditional-accessibility-modifiers-ios-18\"\u003eConditional Accessibility Modifiers (iOS 18)\u003c/h3\u003e\n\u003cp\u003eApple added the \u003ccode\u003eisEnabled\u003c/code\u003e parameter to \u003ccode\u003e.accessibilityLabel\u003c/code\u003e, \u003ccode\u003e.accessibilityInputLabels\u003c/code\u003e, \u003ccode\u003e.accessibilityValue\u003c/code\u003e, \u003ccode\u003e.accessibilityHint\u003c/code\u003e and many other accessibility modifiers. \u003cstrong\u003eThis has the effect of only applying the modifier when the \u003ccode\u003eisEnabled\u003c/code\u003e parameter is \u003ccode\u003etrue\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eThis is useful in situations where you need to conditionally override the default accessibility behaviour. For example, this labeled content has a button with a system symbol image:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eLabeledContent\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eButton\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003etoggleFavorite\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003elabel\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esystemName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efavorite\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e\u0026#34;star.fill\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;star\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003elabel\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI’m using the labeled content in a list of items, the button toggling the favorite status of each item:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/conditional-swiftui-accessibility-labels/001.png\" alt=\"Three rows in a list of items, red, orange, and yellow. The orange item has a filled star, the others unfilled stars.\" width=\"589\" height=\"220\" srcset=\"https://useyourloaf.com/blog/conditional-swiftui-accessibility-labels/001@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eThe button label provides the default accessibility label for the button action. In this example I’m using the “star” SF symbol which has a default (localized) accessibility label of “favorite”.\u003c/p\u003e\n\u003cp\u003eThat’s great but I’d like to change the label based on favorite status of the item. Favorited items show the filled version of the “star” symbol and I’d like the accessibility label for the button action to be “unfavorite”.\u003c/p\u003e\n\u003cp\u003eOne way is with an accessibility label that is conditional on the favorite status of the item:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esystemName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efavorite\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e\u0026#34;star.fill\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;star\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaccessibilityLabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efavorite\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e\u0026#34;Favorite\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Unfavorite\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat works, but in situatons like this where we already have a suitable default label we can use the \u003ccode\u003eisEnabled\u003c/code\u003e variant of the modifier:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esystemName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efavorite\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e\u0026#34;star.fill\u0026#34;\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;star\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaccessibilityLabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Unfavorite\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eisEnabled\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eitem\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efavorite\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt’s a small improvement but I think still useful to avoid having to repeat (and localize) the default label.\u003c/p\u003e\n\u003ch3 id=\"learn-more\"\u003eLearn More\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024/10073?time=650\"\u003eWWDC24 Catch up on accessibility in SwiftUI\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-10-21T11:08:21+01:00",
  "modifiedTime": "2024-10-23T13:47:23+01:00"
}
