{
  "id": "c0004352-3393-4238-85a5-cb17d2b560f7",
  "title": "SwiftUI transitions with distortion effect and Metal Shaders",
  "link": "https://nerdyak.tech/development/2023/06/16/distortionEffect-with-Metal-shaders-for-better-transitions.html",
  "description": "This year DubDub is over and I am very excited about the new developer treats that iOS17 will bring us that expand the animation possibilities of SwiftUI. I am talking mainly about the PhaseAnimator, KeyframeAnimator and the ability to utilize Metal shaders on SwiftUI views through modifiers .distortionEffect, .layerEffect, and .colorEffect (docs).",
  "author": "Pavel Zak",
  "published": "2023-06-16T00:00:00+00:00",
  "source": "https://nerdyak.tech/atom.xml",
  "categories": [
    "development",
    "SwiftUI",
    "distortionEffect",
    "Metal",
    "Shaders",
    "transitions"
  ],
  "byline": "Pavel Zak",
  "length": 7398,
  "excerpt": "This year DubDub is over and I am very excited about the new developer treats that iOS17 will bring us that expand the animation possibilities of SwiftUI. I am talking mainly about the PhaseAnimator, KeyframeAnimator and the ability to utilize Metal shaders on SwiftUI views through modifiers .distortionEffect, .layerEffect, and .colorEffect (docs).",
  "siteName": "Pavel Zak",
  "favicon": "",
  "text": "This year DubDub is over and I am very excited about the new developer treats that iOS17 will bring us that expand the animation possibilities of SwiftUI. I am talking mainly about the PhaseAnimator, KeyframeAnimator and the ability to utilize Metal shaders on SwiftUI views through modifiers .distortionEffect, .layerEffect, and .colorEffect (docs). In this post, we will play with the .distortionEffect and learn, how to utilize it for creating custom transitions, like this: Kickstart Let’s start with the simple Hello world view and set a basic .distortion effect for the view: struct DemoView: View { var shader: Shader { let shaderLibrary = ShaderLibrary.default return Shader(function: ShaderFunction(library: shaderLibrary, name: \"demoShader\"), arguments: []) } var body: some View { VStack { Image(systemName: \"globe\") .imageScale(.large) Text(\"Hello, distortionEffect!\") } .padding() .background(Color.blue.opacity(0.1)) .distortionEffect(self.shader, maxSampleOffset: CGSize(width: 500, height: 500)) .overlay(Rectangle().stroke(Color.blue)) // adding stroke so we see bounds of our view } } We need to add a new Metal file to our Xcode project and define the shader function there. As the documentation says: For a shader function to act as a distortion effect it must have a function signature matching: [[ stitchable ]] float2 name(float2 position, args...) which tells us, that the function can “alter” the position of every pixel of our View. So in the minimum variation, the Shader can look like this #include \u003cmetal_stdlib\u003e using namespace metal; [[ stitchable ]] float2 demoShader(float2 position) { return position; } This is a fully working shader, but you cannot see any effect on the view as it is basically an identity function that just returns the input positions. But with just a few simple alterations to the return value, you start seeing how the view image changes. For example, you can switch the x and y axis and get transposed view. [[ stitchable ]] float2 demoShader(float2 position) { return float2(position.y, position.x); } Notice, that the shader cannot extend our view dimensions, so if we are transposing the rectangular view, the result will be cropped. But we learned an important lesson here: if we are returning an invalid position from the shader, it just leaves the pixel transparent. And this fact we are gonna utilize for the transitions later. But before we move to that, let’s see, how to extend the shader with more parameters. From the initial function signature we see, that the shader is not aware of the view frame, so naturally, we want to provide at least that parameter. Adding a new param is simple as that, just extend the function with more parameters and provide those parameters in the SwiftUI part like so. Very easily, we are now able to create waved distortion effect using the shader: [[ stitchable ]] float2 demoShader(float2 position, float2 size) { float f = sin(position.x/size.x*M_PI_F*2); return float2(position.x, position.y+f*20); } The full view with applied shader with parameter is now: struct DemoView: View { let size: CGPoint = CGPoint(x: 300, y: 200) var shader: Shader { let shaderLibrary = ShaderLibrary.default return Shader(function: ShaderFunction(library: shaderLibrary, name: \"demoShader\"), arguments: [.float2(self.size)]) } var body: some View { VStack { Image(systemName: \"globe\") .imageScale(.large) Text(\"Hello, distortionEffect!\") } .frame(width: size.x, height: size.y) .background(Color.blue.opacity(0.1)) .distortionEffect(self.shader, maxSampleOffset: CGSize(width: 500, height: 500)) .overlay(Rectangle().stroke(Color.blue)) // adding stroke so we see bounds of our view } } Try to experiment with the shader parameters and messing the output with various functions. How fun, right? Transitions Now, let’s utilize what we have learned to build a custom view transition. I want to create an effect, that shifts away the content of the view like so: for that, I extend the shader with one more parameter named effectValue, which controls the offset and the skew of the view content. My shader looks like this: [[ stitchable ]] float2 demoShader(float2 position, float2 size, float effectValue) { float skewF = 0.1*size.x; float yRatio = position.y/size.y; float positiveEffect = effectValue*sign(effectValue); float skewProgress = min(0.5-abs(positiveEffect-0.5), 0.2)/0.2; float skew = effectValue\u003e0 ? yRatio*skewF*skewProgress : (1-yRatio)*skewF*skewProgress; float shift = effectValue*size.x; return float2(position.x+(shift+skew*sign(effectValue)), position.y); } The shader is result of some experimentation session trying to tweak the behavior so it works also for the negative effect values. The goal is to use positive value for insertion transition and negative for removal. While testing, I am using a simple slider just to be sure that it behaves correctly for all effectValues between -1 and 1. Once we are happy with the basic effect, we just wrap it into a view modifier. (I am keeping the size parameter as a constant just for the simplicity of the code snippet. OFC, you can set it dynamically from the actual geometry) struct ShiftTransitionModifier: ViewModifier { let size: CGPoint = CGPoint(x: 300, y: 200) var effectValue: CGFloat = 0 var shader: Shader { let shaderLibrary = ShaderLibrary.default return Shader(function: ShaderFunction(library: shaderLibrary, name: \"demoShader\"), arguments: [.float2(self.size), .float(self.effectValue)]) } func body(content: Content) -\u003e some View { content .frame(width: self.size.x, height: self.size.y) .distortionEffect(self.shader, maxSampleOffset: CGSize(width: 500, height: 500)) } } And the last step is to use the modifier for a custom Transition definition: let insertionTransition: AnyTransition = .modifier(active: ShiftTransitionModifier(effectValue: 1), identity: ShiftTransitionModifier(effectValue: 0)) let removalTransition: AnyTransition = .modifier(active: ShiftTransitionModifier(effectValue: -1), identity: ShiftTransitionModifier(effectValue: 0)) let shiftTransition: AnyTransition = .asymmetric(insertion: insertionTransition, removal: removalTransition) And we are done. One more thing If you are wondering, how does the shader look like for the transition from the beginning of this article, it is here: (Notice, the shader looks much nicer due to after-experimentation optimizations and utilizing vector operations) [[ stitchable ]] float2 slideAwayShader(float2 position, float2 size, float time, float direction) { float2 c = size/2; float2 v = position - c; float f = (direction \u003e 0 ? position.x : (size.x - position.x) )/size.x; if ( time \u003e f ) { float mul = (time-f)/(1-f); return c + v*mul; } else { return float2(-1, -1); } } Your turn! Now it is your time to get creative! Let me know, if you find this article helpful, and send me your animations on Twitter.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\" aria-label=\"Content\"\u003e\n    \u003carticle\u003e\n      \u003cdiv\u003e\n        \u003cp\u003eThis year DubDub is over and I am very excited about the new developer treats that iOS17 will bring us that expand the animation possibilities of SwiftUI. I am talking mainly about the \u003ca href=\"https://developer.apple.com/documentation/swiftui/phaseanimator/\"\u003ePhaseAnimator\u003c/a\u003e, \u003ca href=\"https://developer.apple.com/documentation/swiftui/keyframeanimator\"\u003eKeyframeAnimator\u003c/a\u003e and the ability to utilize Metal shaders on SwiftUI views through modifiers .distortionEffect, .layerEffect, and .colorEffect (\u003ca href=\"https://developer.apple.com/documentation/swiftui/view-graphics-and-rendering#shaders\"\u003edocs\u003c/a\u003e).\u003c/p\u003e\n\n\u003cp\u003eIn this post, we will play with the .distortionEffect and learn, how to utilize it for creating custom transitions, like this:\u003c/p\u003e\n\n\u003ccenter\u003e\n\u003cvideo autoplay=\"\" muted=\"\" loop=\"\" controls=\"controls\"\u003e\n\t\u003csource src=\"https://nerdyak.tech/assets/posts/15_video1.mov\"/\u003e\n\t\u003csource src=\"https://nerdyak.tech/assets/posts/15_video1.webm\" type=\"video/webm\"/\u003e\n\u003c/video\u003e\n\u003c/center\u003e\n\n\u003ch2 id=\"kickstart\"\u003eKickstart\u003c/h2\u003e\n\n\u003cp\u003eLet’s start with the simple Hello world view and set a basic .distortion effect for the view:\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eDemoView\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eshader\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eShader\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eshaderLibrary\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eShaderLibrary\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edefault\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eShader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eShaderFunction\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elibrary\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eshaderLibrary\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;demoShader\u0026#34;\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003earguments\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[])\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eVStack\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esystemName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;globe\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eimageScale\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elarge\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello, distortionEffect!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epadding\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebackground\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eblue\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eopacity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0.1\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edistortionEffect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshader\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003emaxSampleOffset\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCGSize\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e500\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e500\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eoverlay\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eRectangle\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estroke\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eblue\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e \u003cspan\u003e// adding stroke so we see bounds of our view\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003eWe need to add a new Metal file to our Xcode project and define the shader function there. As the documentation says: For a shader function to act as a distortion effect it must have a function signature matching:\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e[[\u003c/span\u003e \u003cspan\u003estitchable\u003c/span\u003e \u003cspan\u003e]]\u003c/span\u003e \u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eargs\u003c/span\u003e\u003cspan\u003e...\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003ewhich tells us, that the function can “alter” the position of every pixel of our View. So in the minimum variation, the Shader can look like this\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e#include \u0026lt;metal_stdlib\u0026gt;\u003c/span\u003e\n\u003cspan\u003eusing\u003c/span\u003e \u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003emetal\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e[[\u003c/span\u003e \u003cspan\u003estitchable\u003c/span\u003e \u003cspan\u003e]]\u003c/span\u003e \u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003edemoShader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003eThis is a fully working shader, but you cannot see any effect on the view as it is basically an identity function that just returns the input positions.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://nerdyak.tech/assets/posts/15_01.png\" alt=\"image1\" title=\"Main view\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eBut with just a few simple alterations to the return value, you start seeing how the view image changes. For example, you can switch the x and y axis and get transposed view.\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e[[\u003c/span\u003e \u003cspan\u003estitchable\u003c/span\u003e \u003cspan\u003e]]\u003c/span\u003e \u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003edemoShader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efloat2\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cimg src=\"https://nerdyak.tech/assets/posts/15_02.png\" alt=\"image2\" title=\"Transposed view\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eNotice, that the shader cannot extend our view dimensions, so if we are transposing the rectangular view, the result will be cropped. But we learned an important lesson here: if we are returning an invalid position from the shader, it just leaves the pixel transparent. And this fact we are gonna utilize for the transitions later.\u003c/p\u003e\n\n\u003cp\u003eBut before we move to that, let’s see, how to extend the shader with more parameters. From the initial function signature we see, that the shader is not aware of the view frame, so naturally, we want to provide at least that parameter. Adding a new param is simple as that, just extend the function with more parameters and provide those parameters in the SwiftUI part like so.\u003c/p\u003e\n\n\u003cp\u003eVery easily, we are now able to create waved distortion effect using the shader:\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e[[\u003c/span\u003e \u003cspan\u003estitchable\u003c/span\u003e \u003cspan\u003e]]\u003c/span\u003e \u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003edemoShader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efloat\u003c/span\u003e \u003cspan\u003ef\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003esin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003eM_PI_F\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efloat2\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003ef\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e20\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cimg src=\"https://nerdyak.tech/assets/posts/15_03.png\" alt=\"image3\" title=\"Flag effect\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThe full view with applied shader with parameter is now:\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eDemoView\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \n    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCGPoint\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eCGPoint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e300\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eshader\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eShader\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eshaderLibrary\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eShaderLibrary\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edefault\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eShader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eShaderFunction\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elibrary\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eshaderLibrary\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;demoShader\u0026#34;\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003earguments\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efloat2\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e)])\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eVStack\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esystemName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;globe\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eimageScale\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elarge\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello, distortionEffect!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eframe\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebackground\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eblue\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eopacity\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0.1\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edistortionEffect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshader\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003emaxSampleOffset\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCGSize\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e500\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e500\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eoverlay\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eRectangle\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estroke\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eblue\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e \u003cspan\u003e// adding stroke so we see bounds of our view\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003eTry to experiment with the shader parameters and messing the output with various functions. \u003cem\u003eHow fun\u003c/em\u003e, right?\u003c/p\u003e\n\n\u003ch2 id=\"transitions\"\u003eTransitions\u003c/h2\u003e\n\n\u003cp\u003eNow, let’s utilize what we have learned to build a custom view transition. I want to create an effect, that shifts away the content of the view like so:\u003c/p\u003e\n\n\u003ccenter\u003e\n\u003cvideo autoplay=\"\" muted=\"\" loop=\"\" controls=\"controls\"\u003e\n\t\u003csource src=\"https://nerdyak.tech/assets/posts/15_video2.mov\"/\u003e\n\t\u003csource src=\"https://nerdyak.tech/assets/posts/15_video2.webm\" type=\"video/webm\"/\u003e\n\u003c/video\u003e\n\u003c/center\u003e\n\n\u003cp\u003efor that, I extend the shader with one more parameter named effectValue, which controls the offset and the skew of the view content. My shader looks like this:\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e[[\u003c/span\u003e \u003cspan\u003estitchable\u003c/span\u003e \u003cspan\u003e]]\u003c/span\u003e \u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003edemoShader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efloat\u003c/span\u003e \u003cspan\u003eeffectValue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efloat\u003c/span\u003e \u003cspan\u003eskewF\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0.1\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003efloat\u003c/span\u003e \u003cspan\u003eyRatio\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \n    \u003cspan\u003efloat\u003c/span\u003e \u003cspan\u003epositiveEffect\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eeffectValue\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003esign\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffectValue\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n    \u003cspan\u003efloat\u003c/span\u003e \u003cspan\u003eskewProgress\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003emin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0.5\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eabs\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003epositiveEffect\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e0.5\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003e0.2\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e0.2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \n    \u003cspan\u003efloat\u003c/span\u003e \u003cspan\u003eskew\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eeffectValue\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003eyRatio\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003eskewF\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003eskewProgress\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eyRatio\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003eskewF\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003eskewProgress\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003efloat\u003c/span\u003e \u003cspan\u003eshift\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eeffectValue\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efloat2\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eshift\u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003eskew\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003esign\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffectValue\u003c/span\u003e\u003cspan\u003e)),\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003eThe shader is result of some experimentation session trying to tweak the behavior so it works also for the negative effect values. The goal is to use positive value for insertion transition and negative for removal. While testing, I am using a simple slider just to be sure that it behaves correctly for all effectValues between -1 and 1.\u003c/p\u003e\n\n\u003ccenter\u003e\n\u003cvideo autoplay=\"\" muted=\"\" loop=\"\" controls=\"controls\"\u003e\n\t\u003csource src=\"https://nerdyak.tech/assets/posts/15_video3.mov\"/\u003e\n\t\u003csource src=\"https://nerdyak.tech/assets/posts/15_video3.webm\" type=\"video/webm\"/\u003e\n\u003c/video\u003e\n\u003c/center\u003e\n\n\u003cp\u003eOnce we are happy with the basic effect, we just wrap it into a view modifier. (I am keeping the size parameter as a constant just for the simplicity of the code snippet. OFC, you can set it dynamically from the actual geometry)\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eShiftTransitionModifier\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eViewModifier\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCGPoint\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eCGPoint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e300\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eeffectValue\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCGFloat\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eshader\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eShader\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eshaderLibrary\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eShaderLibrary\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edefault\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eShader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eShaderFunction\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elibrary\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eshaderLibrary\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;demoShader\u0026#34;\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003earguments\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efloat2\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efloat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eeffectValue\u003c/span\u003e\u003cspan\u003e)])\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eContent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003econtent\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eframe\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ey\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edistortionEffect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshader\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003emaxSampleOffset\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCGSize\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e500\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e500\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003eAnd the last step is to use the modifier for a custom Transition definition:\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003einsertionTransition\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAnyTransition\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emodifier\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eactive\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eShiftTransitionModifier\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffectValue\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003eidentity\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eShiftTransitionModifier\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffectValue\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eremovalTransition\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAnyTransition\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emodifier\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eactive\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eShiftTransitionModifier\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffectValue\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003eidentity\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eShiftTransitionModifier\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffectValue\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n\n\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eshiftTransition\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAnyTransition\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003easymmetric\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003einsertion\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003einsertionTransition\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eremoval\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eremovalTransition\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003eAnd we are done.\u003c/p\u003e\n\n\u003ccenter\u003e\n\u003cvideo autoplay=\"\" muted=\"\" loop=\"\" controls=\"controls\"\u003e\n\t\u003csource src=\"https://nerdyak.tech/assets/posts/15_video2.mov\"/\u003e\n\t\u003csource src=\"https://nerdyak.tech/assets/posts/15_video2.webm\" type=\"video/webm\"/\u003e\n\u003c/video\u003e\n\u003c/center\u003e\n\n\u003ch2 id=\"one-more-thing\"\u003eOne more thing\u003c/h2\u003e\n\n\u003cp\u003eIf you are wondering, how does the shader look like for the transition from the beginning of this article, it is here:\n(Notice, the shader looks much nicer due to after-experimentation optimizations and utilizing vector operations)\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e[[\u003c/span\u003e \u003cspan\u003estitchable\u003c/span\u003e \u003cspan\u003e]]\u003c/span\u003e \u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003eslideAwayShader\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efloat\u003c/span\u003e \u003cspan\u003etime\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efloat\u003c/span\u003e \u003cspan\u003edirection\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003ec\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003efloat2\u003c/span\u003e \u003cspan\u003ev\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \n    \u003cspan\u003efloat\u003c/span\u003e \u003cspan\u003ef\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edirection\u003c/span\u003e \u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003eposition\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ex\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e \u003cspan\u003etime\u003c/span\u003e \u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003ef\u003c/span\u003e \u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003efloat\u003c/span\u003e \u003cspan\u003emul\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etime\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003ef\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003ef\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003ec\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003ev\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003emul\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efloat2\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"your-turn\"\u003eYour turn!\u003c/h2\u003e\n\n\u003cp\u003eNow it is \u003cstrong\u003eyour time\u003c/strong\u003e to get creative!\u003c/p\u003e\n\n\u003cp\u003eLet me know, if you find this article helpful, and send me your animations on \u003ca href=\"https://twitter.com/myridiphis\"\u003eTwitter\u003c/a\u003e.\u003c/p\u003e\n\n\n      \u003c/div\u003e\n      \n    \u003c/article\u003e\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2023-06-16T00:00:00Z",
  "modifiedTime": null
}
