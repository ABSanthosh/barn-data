{
  "id": "4bb6505c-ee27-4531-b679-51fabf56a11e",
  "title": "SwiftData Predicates For Parent Relationships",
  "link": "https://useyourloaf.com/blog/swiftdata-predicates-for-parent-relationships/",
  "description": "How do you write SwiftData predicates to query for parent relationships? SwiftData Relationships Suppose I have a SwiftData model with a parent Project class that contains a collection of Topic children: @Model class Project { var name: String ... @Relationship(deleteRule: .cascade, inverse: \\Topic.project) var topics: [Topic]? = [] } @Model class Topic { var name: String ... var project: Project? = nil } The relationship properties are optional for compatibility with CloudKit sync. Query All Topics In A Project In a TopicList view I want to query for all topics owned by a parent project. I’m passing the identifier of the parent project as a parameter to the view and constructing the predicate and query in the view init: struct TopicList: View { let project: Project.ID @Binding var selectedTopic: Topic.ID? @Query(sort: \\Topic.name) private var topics: [Topic] init(project: Project.ID) { self.project = project let predicate = #Predicate\u003cTopic\u003e { topic in topic.project?.persistentModelID == project } self._topics = Query(filter: predicate, sort: \\Topic.name) var body: some View { List(selection: $selectedTopic) { ForEach(topics) { topic in Text(topic.name) } } } Focussing on just the predicate to match the identifier of the topic project. The project attribute of the Topic is an optional so we need to use optional chaining. let predicate = #Predicate\u003cTopic\u003e { topic in topic.project?.persistentModelID == project } That gives me all the topics in a single parent project. What if I want to query for topics in several projects? Query For Children In Set Of Parents Assuming my view is now passed a set of project identifiers to match: let projects: Set\u003cProject.ID\u003e I want to write the following predicate: let predicate = #Predicate\u003cTopic\u003e { topic in projects.contains(topic.project?.persistentModelID) } That doesn’t compile as the contains method doesn’t expect an optional identifier: Cannot convert value of type ‘PersistentIdentifier?’ to expected argument type ‘Project.ID’ (aka ‘PersistentIdentifier’) This article on predicates with optional values gave me some ideas. First using an if-let: let predicate = #Predicate\u003cTopic\u003e { topic in if let parent = topic.project { return projects.contains(parent.persistentModelID) } else { return false } } That works but is clumsy to write. I think I slightly prefer the flatMap version: let predicate = #Predicate\u003cTopic\u003e { $0.project.flatMap { projects.contains($0.persistentModelID) } ?? false } Neither is intuitive and I know I’m going to have to look this up again the next time I need it. KeyPaths Not Supported One other caveat. The #Predicate macro doesn’t handle accessing properties via a keypath. Suppose my set of project identifiers is a property on an observable navigation state class: @Observable NavigationState { let projects: Set\u003cProject.ID\u003e } Attempting to access the projects via the navigation state causes a runtime crash: @Bindable var state: NavigationState let predicate = #Predicate\u003cTopic\u003e { $0.project.flatMap { state.projects.contains($0.persistentModelID) } ?? false } Fatal error: Predicate does not support keypaths with multiple components The workaround is to introduce a temporary variable, outside of the macro, when constructing the predicate: let projects = state.projects let predicate = #Predicate\u003cTopic\u003e { $0.project.flatMap { projects.contains($0.persistentModelID) } ?? false } SwiftData Predicates For Parent Relationships was originally posted 05 May 2025 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
  "author": "",
  "published": "Mon, 05 May 2025 10:31:41 +0100",
  "source": "https://useyourloaf.com/blog/rss.xml",
  "categories": null,
  "byline": "",
  "length": 3515,
  "excerpt": "How do you write SwiftData predicates to query for parent relationships.",
  "siteName": "Use Your Loaf - iOS Development News \u0026 Tips",
  "favicon": "https://useyourloaf.com/apple-touch-icon.png",
  "text": "How do you write SwiftData predicates to query for parent relationships? SwiftData Relationships Suppose I have a SwiftData model with a parent Project class that contains a collection of Topic children: @Model class Project { var name: String ... @Relationship(deleteRule: .cascade, inverse: \\Topic.project) var topics: [Topic]? = [] } @Model class Topic { var name: String ... var project: Project? = nil } The relationship properties are optional for compatibility with CloudKit sync. Query All Topics In A Project In a TopicList view I want to query for all topics owned by a parent project. I’m passing the identifier of the parent project as a parameter to the view and constructing the predicate and query in the view init: struct TopicList: View { let project: Project.ID @Binding var selectedTopic: Topic.ID? @Query(sort: \\Topic.name) private var topics: [Topic] init(project: Project.ID) { self.project = project let predicate = #Predicate\u003cTopic\u003e { topic in topic.project?.persistentModelID == project } self._topics = Query(filter: predicate, sort: \\Topic.name) var body: some View { List(selection: $selectedTopic) { ForEach(topics) { topic in Text(topic.name) } } } Focussing on just the predicate to match the identifier of the topic project. The project attribute of the Topic is an optional so we need to use optional chaining. let predicate = #Predicate\u003cTopic\u003e { topic in topic.project?.persistentModelID == project } That gives me all the topics in a single parent project. What if I want to query for topics in several projects? Query For Children In Set Of Parents Assuming my view is now passed a set of project identifiers to match: let projects: Set\u003cProject.ID\u003e I want to write the following predicate: let predicate = #Predicate\u003cTopic\u003e { topic in projects.contains(topic.project?.persistentModelID) } That doesn’t compile as the contains method doesn’t expect an optional identifier: Cannot convert value of type ‘PersistentIdentifier?’ to expected argument type ‘Project.ID’ (aka ‘PersistentIdentifier’) This article on predicates with optional values gave me some ideas. First using an if-let: let predicate = #Predicate\u003cTopic\u003e { topic in if let parent = topic.project { return projects.contains(parent.persistentModelID) } else { return false } } That works but is clumsy to write. I think I slightly prefer the flatMap version: let predicate = #Predicate\u003cTopic\u003e { $0.project.flatMap { projects.contains($0.persistentModelID) } ?? false } Neither is intuitive and I know I’m going to have to look this up again the next time I need it. KeyPaths Not Supported One other caveat. The #Predicate macro doesn’t handle accessing properties via a keypath. Suppose my set of project identifiers is a property on an observable navigation state class: @Observable NavigationState { let projects: Set\u003cProject.ID\u003e } Attempting to access the projects via the navigation state causes a runtime crash: @Bindable var state: NavigationState let predicate = #Predicate\u003cTopic\u003e { $0.project.flatMap { state.projects.contains($0.persistentModelID) } ?? false } Fatal error: Predicate does not support keypaths with multiple components The workaround is to introduce a temporary variable, outside of the macro, when constructing the predicate: let projects = state.projects let predicate = #Predicate\u003cTopic\u003e { $0.project.flatMap { projects.contains($0.persistentModelID) } ?? false }",
  "image": "https://useyourloaf.com/blog/swiftdata-predicates-for-parent-relationships/cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eHow do you write SwiftData predicates to query for parent relationships?\u003c/p\u003e\n\u003ch3 id=\"swiftdata-relationships\"\u003eSwiftData Relationships\u003c/h3\u003e\n\u003cp\u003eSuppose I have a SwiftData model with a parent \u003ccode\u003eProject\u003c/code\u003e class that contains a collection of \u003ccode\u003eTopic\u003c/code\u003e children:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eModel\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eProject\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eRelationship\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edeleteRule\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecascade\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003einverse\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\u003cspan\u003eTopic\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproject\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003etopics\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eTopic\u003c/span\u003e\u003cspan\u003e]?\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eModel\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eTopic\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eproject\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eProject\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe relationship properties are optional for compatibility with CloudKit sync.\u003c/p\u003e\n\u003ch3 id=\"query-all-topics-in-a-project\"\u003eQuery All Topics In A Project\u003c/h3\u003e\n\u003cp\u003eIn a TopicList view I want to query for all topics owned by a parent project. I’m passing the identifier of the parent project as a parameter to the view and constructing the predicate and query in the view init:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eTopicList\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eproject\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eProject\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eID\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eBinding\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eselectedTopic\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eTopic\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eID\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eQuery\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esort\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\u003cspan\u003eTopic\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003etopics\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eTopic\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eproject\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eProject\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eID\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproject\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eproject\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003epredicate\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e#\u003c/span\u003e\u003cspan\u003ePredicate\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eTopic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003etopic\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003etopic\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproject\u003c/span\u003e\u003cspan\u003e?.\u003c/span\u003e\u003cspan\u003epersistentModelID\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003eproject\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003e_topics\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eQuery\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003epredicate\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esort\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\\\u003c/span\u003e\u003cspan\u003eTopic\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eList\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eselection\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003eselectedTopic\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003eForEach\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etopics\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003etopic\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etopic\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFocussing on just the predicate to match the identifier of the topic project. The project attribute of the \u003ccode\u003eTopic\u003c/code\u003e is an optional so we need to use optional chaining.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003epredicate\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e#\u003c/span\u003e\u003cspan\u003ePredicate\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eTopic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003etopic\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003etopic\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproject\u003c/span\u003e\u003cspan\u003e?.\u003c/span\u003e\u003cspan\u003epersistentModelID\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003eproject\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat gives me all the topics in a single parent project. What if I want to query for topics in several projects?\u003c/p\u003e\n\u003ch3 id=\"query-for-children-in-set-of-parents\"\u003eQuery For Children In Set Of Parents\u003c/h3\u003e\n\u003cp\u003eAssuming my view is now passed a set of project identifiers to match:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eprojects\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSet\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eProject\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eID\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI want to write the following predicate:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003epredicate\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e#\u003c/span\u003e\u003cspan\u003ePredicate\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eTopic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003etopic\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eprojects\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etopic\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproject\u003c/span\u003e\u003cspan\u003e?.\u003c/span\u003e\u003cspan\u003epersistentModelID\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat doesn’t compile as the contains method doesn’t expect an optional identifier:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCannot convert value of type ‘PersistentIdentifier?’ to expected argument type ‘Project.ID’ (aka ‘PersistentIdentifier’)\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eThis \u003ca href=\"https://fatbobman.com/en/posts/how-to-handle-optional-values-in-swiftdata-predicates/\"\u003earticle on predicates with optional values\u003c/a\u003e gave me some ideas. First using an \u003ccode\u003eif-let\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003epredicate\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e#\u003c/span\u003e\u003cspan\u003ePredicate\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eTopic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003etopic\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eparent\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etopic\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproject\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eprojects\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eparent\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epersistentModelID\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat works but is clumsy to write. I think I slightly prefer the \u003ccode\u003eflatMap\u003c/code\u003e version:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003epredicate\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e#\u003c/span\u003e\u003cspan\u003ePredicate\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eTopic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e$0\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproject\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eflatMap\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprojects\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e$0\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epersistentModelID\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e??\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNeither is intuitive and I know I’m going to have to look this up again the next time I need it.\u003c/p\u003e\n\u003ch3 id=\"keypaths-not-supported\"\u003eKeyPaths Not Supported\u003c/h3\u003e\n\u003cp\u003eOne other caveat. The \u003ccode\u003e#Predicate\u003c/code\u003e macro doesn’t handle accessing properties via a keypath. Suppose my set of project identifiers is a property on an observable navigation state class:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eObservable\u003c/span\u003e \u003cspan\u003eNavigationState\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eprojects\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSet\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eProject\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eID\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAttempting to access the projects via the navigation state causes a runtime crash:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eBindable\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eNavigationState\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003epredicate\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e#\u003c/span\u003e\u003cspan\u003ePredicate\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eTopic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e$0\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproject\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eflatMap\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprojects\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e$0\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epersistentModelID\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e??\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003eFatal error: Predicate does not support keypaths with multiple components\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eThe workaround is to introduce a temporary variable, outside of the macro, when constructing the predicate:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eprojects\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprojects\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003epredicate\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e#\u003c/span\u003e\u003cspan\u003ePredicate\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eTopic\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e$0\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproject\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eflatMap\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprojects\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e$0\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epersistentModelID\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e??\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-05-05T10:31:41+01:00",
  "modifiedTime": "2025-05-05T15:51:31+01:00"
}
