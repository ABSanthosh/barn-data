{
  "id": "10f3f060-a62c-45cd-ae1d-19d4f5a91761",
  "title": "Focus not on the task, but on the problem behind the task",
  "link": "https://swiftrocks.com/focus-not-on-the-task-but-on-the-problem-behind-the-task",
  "description": "Consider the following situation: A team is asked by their Product Manager to implement features X, Y, and Z into an existing system. The team then organizes itself and executes the project. After a certain amount of time, they delivered exactly what was asked of them. But then, one of these things happens (choose at least one): The features work only for the happy path, failing miserably at any sort of edge-case The features work as expected, but were designed so badly they are immediately considered tech debt The features work as expected, but are considered useless by the users of the system and end up completely unused (they do not solve those users' problems) What do you think happened here? Is this the Product Manager's fault for giving wrong requests, or the engineering team's fault for not understanding what was asked of them? Some people will say this is the PM's fault, and in some cases it might be true. But the situation I want to cover here is the scenario where this is the engineers' fault, because it's something I've seen countless times throughout my career. The reason the scenario above happened (when the PM is not the one at fault) is because the engineers focused too much on the immediate task they were given, when what they should've done is focus on the problem behind the task, by asking themselves questions such as: What's the context behind this ask? Is this a larger project that includes other features and tasks? Who exactly is asking for this? (Does anyone actually need this?) What problem are these users facing that led to this ask? Did someone attempt to solve this problem before? What did they try to do? Who is going to benefit from this ask being executed? How would they use the solution? It's only after understanding this context that you can consider yourself ready to come up with a technical solution to it. But what happens a lot is that some engineers tend to immediately jump into problem-solving as soon as they are presented with a task, leading to solutions that despite being \"accurate\" when evaluating the task in isolation, completely miss the mark when looking at the bigger picture. In short, the issue was that the engineers in that situation had too much tunnel vision. Understanding the context behind tasks allows you to come up with a solution that fits the bigger picture, making it possible not only to solve your users' problems, but also to do so in a way that is clean, scalable, easy to maintain, and that benefits everyone (as opposed to being beneficial to you and your team, but a pain in the ass for everyone else in the company). In The Staff Engineer's Path, Tanya Reilly describes this as the Local vs Global Maxima problem, where the Local maxima means focusing on what's good for you or your team in an individual sense (the tunnel vision situation above), and the Global maxima means focusing on what's good for the company as a whole, regardless of whether or not it would be ideal for you as an individual (the big picture situation). In the book, she presents this idea to argue that this focus and ability to gather context about the bigger picture is a core ability of Staff+ level engineers and a minimum requirement for those aspiring to reach that level. Although I agree with her that only Staff+ engineers should be expected to be masters at this, I do also believe that this is something everyone should attempt to do, regardless of level. Doing so not only improves your knowledge of how your company works and is structured, but also teaches you how to better determine what does and doesn't matter when trying to solve a particular problem, enabling you to be more effective both at coding and at providing value for your company.",
  "author": "Bruno Rocha",
  "published": "Mon, 18 Nov 2024 13:00:00 GMT+1",
  "source": "https://swiftrocks.com/rss.xml",
  "categories": null,
  "byline": "Bruno Rocha",
  "length": 3820,
  "excerpt": "Being able to look at the bigger picture is critical when writing code. In this article, I took a shot at explaining what this means and how you can do it.",
  "siteName": "SwiftRocks",
  "favicon": "https://swiftrocks.com/images/favicon/iconsmall2.png",
  "text": "Consider the following situation: A team is asked by their Product Manager to implement features X, Y, and Z into an existing system. The team then organizes itself and executes the project. After a certain amount of time, they delivered exactly what was asked of them. But then, one of these things happens (choose at least one): The features work only for the happy path, failing miserably at any sort of edge-case The features work as expected, but were designed so badly they are immediately considered tech debt The features work as expected, but are considered useless by the users of the system and end up completely unused (they do not solve those users' problems) What do you think happened here? Is this the Product Manager's fault for giving wrong requests, or the engineering team's fault for not understanding what was asked of them? Some people will say this is the PM's fault, and in some cases it might be true. But the situation I want to cover here is the scenario where this is the engineers' fault, because it's something I've seen countless times throughout my career. The reason the scenario above happened (when the PM is not the one at fault) is because the engineers focused too much on the immediate task they were given, when what they should've done is focus on the problem behind the task, by asking themselves questions such as: What's the context behind this ask? Is this a larger project that includes other features and tasks? Who exactly is asking for this? (Does anyone actually need this?) What problem are these users facing that led to this ask? Did someone attempt to solve this problem before? What did they try to do? Who is going to benefit from this ask being executed? How would they use the solution? It's only after understanding this context that you can consider yourself ready to come up with a technical solution to it. But what happens a lot is that some engineers tend to immediately jump into problem-solving as soon as they are presented with a task, leading to solutions that despite being \"accurate\" when evaluating the task in isolation, completely miss the mark when looking at the bigger picture. In short, the issue was that the engineers in that situation had too much tunnel vision. Understanding the context behind tasks allows you to come up with a solution that fits the bigger picture, making it possible not only to solve your users' problems, but also to do so in a way that is clean, scalable, easy to maintain, and that benefits everyone (as opposed to being beneficial to you and your team, but a pain in the ass for everyone else in the company). In The Staff Engineer's Path, Tanya Reilly describes this as the Local vs Global Maxima problem, where the Local maxima means focusing on what's good for you or your team in an individual sense (the tunnel vision situation above), and the Global maxima means focusing on what's good for the company as a whole, regardless of whether or not it would be ideal for you as an individual (the big picture situation). In the book, she presents this idea to argue that this focus and ability to gather context about the bigger picture is a core ability of Staff+ level engineers and a minimum requirement for those aspiring to reach that level. Although I agree with her that only Staff+ engineers should be expected to be masters at this, I do also believe that this is something everyone should attempt to do, regardless of level. Doing so not only improves your knowledge of how your company works and is structured, but also teaches you how to better determine what does and doesn't matter when trying to solve a particular problem, enabling you to be more effective both at coding and at providing value for your company.",
  "image": "https://swiftrocks.com/images/thumbs/thumb.jpg?4",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n    \n  \n\u003cp\u003eConsider the following situation: A team is asked by their Product Manager to implement features X, Y, and Z into an existing system.\u003c/p\u003e\n\u003cp\u003eThe team then organizes itself and executes the project. After a certain amount of time, they delivered exactly what was asked of them. But then, one of these things happens (choose at least one):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe features work only for the happy path, failing miserably at any sort of edge-case\u003c/li\u003e\n\u003cli\u003eThe features work as expected, but were designed so badly they are immediately considered tech debt\u003c/li\u003e\n\u003cli\u003eThe features work as expected, but are considered useless by the users of the system and end up completely unused (they do not solve those users\u0026#39; problems)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhat do you think happened here? Is this the Product Manager\u0026#39;s fault for giving wrong requests, or the engineering team\u0026#39;s fault for not understanding what was asked of them?\u003c/p\u003e\n\n\u003cp\u003eSome people will say this is the PM\u0026#39;s fault, and in some cases it might be true. But the situation I want to cover here is the scenario where this is the \u003cb\u003eengineers\u0026#39; fault\u003c/b\u003e, because it\u0026#39;s something I\u0026#39;ve seen countless times throughout my career.\u003c/p\u003e\n\u003cp\u003eThe reason the scenario above happened (when the PM is not the one at fault) is because the engineers focused too much on the \u003ci\u003eimmediate\u003c/i\u003e task they were given, when what they should\u0026#39;ve done is \u003cb\u003efocus on the problem behind the task\u003c/b\u003e, by asking themselves questions such as:\n\u003c/p\u003e\u003cul\u003e\n\u003cli\u003eWhat\u0026#39;s the \u003cb\u003econtext\u003c/b\u003e behind this ask? Is this a larger project that includes other features and tasks?\u003c/li\u003e\n\u003cli\u003eWho exactly is asking for this? (Does anyone actually need this?)\u003c/li\u003e\n\u003cli\u003eWhat \u003cb\u003eproblem\u003c/b\u003e are these users facing that led to this ask?\u003c/li\u003e\n\u003cli\u003eDid someone attempt to solve this problem before? What did they try to do?\u003c/li\u003e\n\u003cli\u003eWho is going to benefit from this ask being executed? How would they use the solution?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cb\u003eIt\u0026#39;s only after understanding this context that you can consider yourself ready to come up with a technical solution to it.\u003c/b\u003e But what happens a lot is that some engineers tend to \u003cb\u003eimmediately\u003c/b\u003e jump into problem-solving as soon as they are presented with a task, leading to solutions that despite being \u0026#34;accurate\u0026#34; when evaluating the task in isolation, completely miss the mark when looking at the bigger picture. In short, the issue was that the engineers in that situation had \u003cb\u003etoo much tunnel vision.\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/BfKDQC5.png\" alt=\"Alt\"/\u003e                                    \n\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/IHGr3P5.png\" alt=\"Alt\"/\u003e                                    \n\u003c/p\u003e\n\u003cp\u003eUnderstanding the context behind tasks allows you to come up with a solution that fits the bigger picture, making it possible not only to solve your users\u0026#39; problems, but also to do so in a way that is clean, scalable, easy to maintain, and that benefits everyone (as opposed to being beneficial to you and your team, but a pain in the ass for everyone else in the company).\u003c/p\u003e\n\u003cp\u003eIn \u003ca href=\"https://www.oreilly.com/library/view/the-staff-engineers/9781098118723/\"\u003eThe Staff Engineer\u0026#39;s Path\u003c/a\u003e, Tanya Reilly describes this as the \u003cb\u003eLocal vs Global Maxima\u003c/b\u003e problem, where the Local maxima means focusing on what\u0026#39;s good for you or your team in an individual sense (the tunnel vision situation above), and the Global maxima means focusing on what\u0026#39;s good \u003cb\u003efor the company as a whole\u003c/b\u003e, regardless of whether or not it would be ideal for you as an individual (the big picture situation). In the book, she presents this idea to argue that this focus and ability to gather context about the bigger picture is a \u003cb\u003ecore ability of Staff+ level engineers\u003c/b\u003e and a minimum requirement for those aspiring to reach that level.\u003c/p\u003e\n\n\u003cp\u003eAlthough I agree with her that only Staff+ engineers should be \u003ci\u003eexpected\u003c/i\u003e to be masters at this, I do also believe that this is something everyone should attempt to do, regardless of level. Doing so not only improves your knowledge of how your company works and is structured, but also teaches you how to better determine what does and doesn\u0026#39;t matter when trying to solve a particular problem, enabling you to be more effective both at coding and at providing value for your company.\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-11-18T14:00:00+02:00",
  "modifiedTime": null
}
