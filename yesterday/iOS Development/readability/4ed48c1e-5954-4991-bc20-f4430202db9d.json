{
  "id": "4ed48c1e-5954-4991-bc20-f4430202db9d",
  "title": "Tapping on Stack Views",
  "link": "https://useyourloaf.com/blog/tapping-on-stack-views/",
  "description": "A quick tip on using the contentShape view modifier to solve a SwiftUI gesture problem that often catches me out. Container Views and Gestures Here’s a typical scenario with nested vertical stack views: VStack { Text(\"Action\") .font(.title) Spacer() VStack(spacing: 8) { Label(\"Attention\", systemImage: \"alarm\") .font(.headline) Text(\"Something went wrong!\") } .padding() Spacer() } .frame(maxHeight: 250) .padding() .border(.black, width: 4) .onTapGesture(count: 2) { print(\"doubleTap\") } This is how that looks: I attached the double tap gesture to the outer stack view. I want to be able to tap anywhere inside that outer stack view and have the double-tap gesture fire. The problem is that container views like VStack or HStack don’t automatically act as hit targets for gestures. In my example, the double-tap gesture only fires when I tap on one of the text or label views (coloured yellow below): Nothing happens if I double-tap on the surrounding space not covered by a content view. Adding a background view to my inner stack view does improve the situation: VStack(spacing: 8) { } .padding() .background(.yellow.gradient, in: RoundedRectangle(cornerRadius: 8)) Now a double-tap anywhere on the yellow background works but there’s a better way to tell SwiftUI that I want the whole outer stack view to act as a tap target. Content Shape for Hit Testing The contentShape view modifier defines the content shape used for hit testing gestures. Applying this to my outer VStack using a rectangle shape makes the full bounds of the stack view a hit target for taps: VStack { } .contentShape(Rectangle()) .onTapGesture(count: 2) { print(\"doubleTap\") } A double-tap anywhere in the outer stack view now triggers my tap gesture action. Tapping on Stack Views was originally posted 24 Feb 2025 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
  "author": "",
  "published": "Mon, 24 Feb 2025 11:01:09 +0000",
  "source": "https://useyourloaf.com/blog/rss.xml",
  "categories": null,
  "byline": "",
  "length": 1805,
  "excerpt": "The contentShape view modifier changes the shape that responds to gestures.",
  "siteName": "Use Your Loaf - iOS Development News \u0026 Tips",
  "favicon": "https://useyourloaf.com/apple-touch-icon.png",
  "text": "A quick tip on using the contentShape view modifier to solve a SwiftUI gesture problem that often catches me out. Container Views and Gestures Here’s a typical scenario with nested vertical stack views: VStack { Text(\"Action\") .font(.title) Spacer() VStack(spacing: 8) { Label(\"Attention\", systemImage: \"alarm\") .font(.headline) Text(\"Something went wrong!\") } .padding() Spacer() } .frame(maxHeight: 250) .padding() .border(.black, width: 4) .onTapGesture(count: 2) { print(\"doubleTap\") } This is how that looks: I attached the double tap gesture to the outer stack view. I want to be able to tap anywhere inside that outer stack view and have the double-tap gesture fire. The problem is that container views like VStack or HStack don’t automatically act as hit targets for gestures. In my example, the double-tap gesture only fires when I tap on one of the text or label views (coloured yellow below): Nothing happens if I double-tap on the surrounding space not covered by a content view. Adding a background view to my inner stack view does improve the situation: VStack(spacing: 8) { } .padding() .background(.yellow.gradient, in: RoundedRectangle(cornerRadius: 8)) Now a double-tap anywhere on the yellow background works but there’s a better way to tell SwiftUI that I want the whole outer stack view to act as a tap target. Content Shape for Hit Testing The contentShape view modifier defines the content shape used for hit testing gestures. Applying this to my outer VStack using a rectangle shape makes the full bounds of the stack view a hit target for taps: VStack { } .contentShape(Rectangle()) .onTapGesture(count: 2) { print(\"doubleTap\") } A double-tap anywhere in the outer stack view now triggers my tap gesture action.",
  "image": "https://useyourloaf.com/blog/tapping-on-stack-views/cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eA quick tip on using the contentShape view modifier to solve a SwiftUI gesture problem that often catches me out.\u003c/p\u003e\n\u003ch3 id=\"container-views-and-gestures\"\u003eContainer Views and Gestures\u003c/h3\u003e\n\u003cp\u003eHere’s a typical scenario with nested vertical stack views:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eVStack\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Action\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efont\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eSpacer\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eVStack\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003espacing\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eLabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Attention\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esystemImage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;alarm\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efont\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003eheadline\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Something went wrong!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epadding\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eSpacer\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eframe\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emaxHeight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e250\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epadding\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eborder\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003eblack\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e4\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonTapGesture\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;doubleTap\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is how that looks:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/tapping-on-stack-views/001.png\" alt=\"White rectangle with action label at top and attention, something went wrong text in the middle.\" width=\"260\" height=\"300\" srcset=\"https://useyourloaf.com/blog/tapping-on-stack-views/001@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eI attached the double tap gesture to the outer stack view. I want to be able to tap anywhere inside that outer stack view and have the double-tap gesture fire.\u003c/p\u003e\n\u003cp\u003eThe problem is that container views like VStack or HStack don’t automatically act as hit targets for gestures. In my example, the double-tap gesture only fires when I tap on one of the text or label views (coloured yellow below):\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/tapping-on-stack-views/002.png\" alt=\"Three text labels with yellow background in a white rectangle\" width=\"260\" height=\"300\" srcset=\"https://useyourloaf.com/blog/tapping-on-stack-views/002@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eNothing happens if I double-tap on the surrounding space not covered by a content view. Adding a background view to my inner stack view does improve the situation:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eVStack\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003espacing\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epadding\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebackground\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003eyellow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egradient\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e              \u003cspan\u003ein\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eRoundedRectangle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecornerRadius\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e8\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/tapping-on-stack-views/003.png\" alt=\"\" width=\"260\" height=\"300\" srcset=\"https://useyourloaf.com/blog/tapping-on-stack-views/003@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eNow a double-tap anywhere on the yellow background works but there’s a better way to tell SwiftUI that I want the whole outer stack view to act as a tap target.\u003c/p\u003e\n\u003ch3 id=\"content-shape-for-hit-testing\"\u003eContent Shape for Hit Testing\u003c/h3\u003e\n\u003cp\u003eThe contentShape view modifier defines the content shape used for hit testing gestures. Applying this to my outer VStack using a rectangle shape makes the full bounds of the stack view a hit target for taps:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eVStack\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtentShape\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eRectangle\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonTapGesture\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;doubleTap\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA double-tap anywhere in the outer stack view now triggers my tap gesture action.\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-02-24T11:01:09Z",
  "modifiedTime": "2025-02-24T16:54:22Z"
}
