[
  {
    "id": "e66a9f71-ccd8-442f-a381-5a096a4d475f",
    "title": "Little Known macOS Sequoia System Extensions",
    "link": "https://tyler.io/2024/09/little-known-macos-sequoia-system-extensions/",
    "description": "macOS Sequoia has added a surprising number of new and curious warning prompts for third-party apps.",
    "author": "Tyler",
    "published": "Wed, 18 Sep 2024 15:33:49 +0000",
    "image": "https://cdn.tyler.io/wp-content/uploads/2024/09/arc-extension.jpeg",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "7c091214-4dea-4b61-9dbc-c1a5fad49e0e",
    "title": "Here",
    "link": "https://tyler.io/2024/07/here/",
    "description": "Yesterday, we entered a new timeline. I don’t know if it’s a better one or a much worse one. But it’s something new.",
    "author": "Tyler",
    "published": "Mon, 15 Jul 2024 04:40:31 +0000",
    "image": "",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "a0befba6-65f4-426a-89fb-55c4465f00bc",
    "title": "Scalable Continuous Integration for iOS",
    "link": "https://albertodebortoli.com/2024/01/03/scalable-continuous-integration-for-ios/",
    "description": "How Just Eat Takeaway.com leverage AWS, Packer, Terraform and GitHub Actions to manage a CI stack of macOS runners.",
    "author": "Alberto De Bortoli",
    "published": "Wed, 03 Jan 2024 22:26:50 GMT",
    "image": "https://albertodebortoli.com/content/images/2024/01/1_SaGE67XSSeflkTKknVOHbg.webp",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "CI",
      "mobile",
      "iOS",
      "AWS",
      "macOS"
    ]
  },
  {
    "id": "9f55e84a-5e01-453e-b038-476d229863fa",
    "title": "The idea of a Fastlane replacement",
    "link": "https://albertodebortoli.com/2023/10/29/the-idea-of-a-fastlane-replacement/",
    "description": "PreludeFastlane is widely used by iOS teams all around the world. It became the standard de facto to automate common tasks such as building apps, running tests, and uploading builds to App Store Connect. Fastlane has been recently moved under the Mobile Native Foundation which is amazing as Google",
    "author": "Alberto De Bortoli",
    "published": "Sun, 29 Oct 2023 22:57:38 GMT",
    "image": "https://images.unsplash.com/photo-1647118762210-393b52e96fbc?crop=entropy\u0026cs=tinysrgb\u0026fit=max\u0026fm=jpg\u0026ixid=M3wxMTc3M3wwfDF8c2VhcmNofDE4fHxzdGVsbGFyfGVufDB8fHx8MTY5ODYxODcwNXww\u0026ixlib=rb-4.0.3\u0026q=80\u0026w=2000",
    "source": "https://albertodebortoli.com/rss/",
    "categories": null
  },
  {
    "id": "5509ffae-ee09-4862-9afe-fc7943f48763",
    "title": "AnyView is everywhere in Xcode 16",
    "link": "https://augmentedcode.io/2024/10/21/anyview-is-everywhere-in-xcode-16/",
    "description": "Xcode 16 introduces a new execution engine for Previews, enhancing project configuration support and improving performance by up to 30%. However, it wraps SwiftUI views in AnyView for debug builds, which can hinder optimization. Users can override this behavior with a custom build setting to maintain performance in debugging.",
    "author": "Toomas Vahter",
    "published": "Mon, 21 Oct 2024 15:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "iOS",
      "Xcode",
      "Swift"
    ]
  },
  {
    "id": "f663d1e2-7caa-4a6d-aa24-8e076002fee9",
    "title": "Sorting arrays in Swift: multi-criteria",
    "link": "https://augmentedcode.io/2024/10/07/sorting-arrays-in-swift-multi-criteria/",
    "description": "Swift’s foundation library provides a sorted(by:) function for sorting arrays. The areInIncreasingOrder closure needs to return true if the closure’s arguments are increasing, false otherwise. How to use the closure for sorting by multiple criteria? Let’s take a look at an example of sorting an array of Player structs. As said before, the closure should […]",
    "author": "Toomas Vahter",
    "published": "Mon, 07 Oct 2024 15:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "Foundation",
      "iOS",
      "Swift",
      "localizedCaseInsensitiveCompare",
      "sort",
      "sorted(by:)"
    ]
  },
  {
    "id": "bbd2f28e-b97a-48db-b760-850e556ffea5",
    "title": "iOS Accessibility Values",
    "link": "https://mobilea11y.com/blog/accessibility-values/",
    "description": "For iOS, Accessibility values are one of the building blocks of how Accessibility works on the platform, along with traits, labels, hints, and showing/hiding elements. If you’re familiar with WCAG or web accessibility, accessibility values are the value part of WCAG 4.1.2: Name, Role, Value. Values Not every element in your view will have a value - in fact, most won’t. Any element that ‘contains’ some data, data that is not included in the element’s label requires an accessibility value to be set.",
    "author": "",
    "published": "Sun, 19 Jun 2022 10:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "5d598907-934c-4936-a19b-71ef2d3ba471",
    "title": "iOS UIKit Accessibility traits",
    "link": "https://mobilea11y.com/blog/traits/",
    "description": "Accessibility traits on iOS is the system by which assistive technologies know how to present your interface to your users. The exact experience will vary between assistive technologies, in some cases they may change the intonation of what VoiceOver reads, or add additional options for navigation, sometimes they will disable that assistive technology from accessing the element, or change how the assistive tech functions. They are the ‘Role’ part of the fundamental rule of making something accessible to screen readers - WCAG’s 4.",
    "author": "",
    "published": "Fri, 13 Aug 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "424c5f26-0d91-45e2-b14c-a27de14c8cba",
    "title": "From Engineer to Manager: A Year of Growth and Transformation",
    "link": "https://benoitpasquier.com/2023/06/from-engineer-to-manager-a-year-of-growth-and-transformation/",
    "description": "It feels like it was yesterday when I became an engineering manager but it has been almost a year. I want to take this time to reflect on the challenges and learnings from this journey.",
    "author": "",
    "published": "Sun, 11 Jun 2023 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "23371626-3fd0-4185-b05e-38c8face858a",
    "title": "Things to know before becoming an Engineering Manager",
    "link": "https://benoitpasquier.com/2023/02/things-to-know-before-becoming-an-engineering-manager/",
    "description": "The journey from individual contributor to engineering manager isn’t always straightforward. Today, I’ll share what it means to become an engineering manager from my point of view, and a few important points to be aware of before making this transition.",
    "author": "",
    "published": "Sun, 19 Feb 2023 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "8c005267-02f3-4329-bd7d-71a6c6a72808",
    "title": "Upcoming changes to the App Store Receipt Signing Intermediate Certificate",
    "link": "https://developer.apple.com/news/?id=b6tejt6f",
    "description": "As part of ongoing efforts to improve security and privacy on Apple platforms, the App Store receipt signing intermediate certificate is being updated to use the SHA-256 cryptographic algorithm. This certificate is used to sign App Store receipts, which are the proof of purchase for apps and In-App Purchases.This update is being completed in multiple phases and some existing apps on the App Store may be impacted by the next update, depending on how they verify receipts.Starting January 24, 2025, if your app performs on-device receipt validation and doesn't support a SHA-256 algorithm, your app will fail to validate the receipt. If your app prevents customers from accessing the app or premium content when receipt validation fails, your customers may lose access to their content.If your app performs on-device receipt validation, update your app to support certificates that use the SHA-256 algorithm; alternatively, use the AppTransaction and Transaction APIs to verify App Store transactions.For more details, view TN3138: Handling App Store receipt signing certificate change.",
    "author": "",
    "published": "Thu, 31 Oct 2024 07:00:39 PDT",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "b6c47d84-4bf9-4fb3-b8f0-c9842eb556c1",
    "title": "TestFlight enhancements to help you reach testers",
    "link": "https://developer.apple.com/news/?id=fps422ld",
    "description": "Beta testing your apps, games, and App Clips is even better with new enhancements to TestFlight. Updates include: Redesigned invitations. TestFlight invitations now include your beta app description to better highlight new features and content your app or game offers to prospective testers. Apps and games with an approved version that’s ready for distribution can also include their screenshots and app category in their invite. We’ve also added a way for people to leave feedback if they didn’t join your beta, so you can understand why they didn’t participate. Tester enrollment criteria. You can choose to set criteria, such as device type and OS versions, to more easily enroll qualified testers via a public link to provide more relevant feedback on your invite. Public link metrics. Find out how successful your public link is at enrolling testers for your app with new metrics. Understand how many testers viewed your invite in the TestFlight app and chose to accept it. If you’ve set criteria for the public link, you can also view how many testers didn’t meet the criteria. To get started with TestFlight, upload your build, add test information, and invite testers. Learn more about TestFlight",
    "author": "",
    "published": "Thu, 24 Oct 2024 06:00:41 PDT",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/3AEA78D3-11B8-4822-81F5-75EED2409528/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "a3e5b6ca-38c2-48ef-a69f-41bd120b9e43",
    "title": "Building with nightly Swift toolchains on macOS",
    "link": "https://oleb.net/2024/swift-toolchains/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2024-03-05T18:54:44Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "abffd27b-b2dd-4da0-b49a-1506351f2b0c",
    "title": "How the Swift compiler knows that DispatchQueue.main implies @MainActor",
    "link": "https://oleb.net/2024/dispatchqueue-mainactor/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2024-02-29T18:54:47Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "d7cd8413-1687-4c96-9e73-132f1166c979",
    "title": "SwiftUI views versus modifiers",
    "link": "https://www.swiftbysundell.com/articles/swiftui-views-versus-modifiers",
    "description": "What’s really the difference between building a piece of UI as a view versus a modifier, and how to choose between those two solutions?",
    "author": "",
    "published": "Mon, 27 Feb 2023 11:05:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "0b12c0f2-35b6-442e-a180-f2ce05f327f0",
    "title": "Observing the content offset of a SwiftUI ScrollView",
    "link": "https://www.swiftbysundell.com/articles/observing-swiftui-scrollview-content-offset",
    "description": "How the content offset of a SwiftUI ScrollView can be observed without bridging to UIKit.",
    "author": "",
    "published": "Mon, 30 Jan 2023 12:50:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "1402d82a-e159-4fbe-8f93-832c238ea4ea",
    "title": "Working at startups vs large companies",
    "link": "https://swiftrocks.com/working-at-startups-vs-large-companies",
    "description": "Working at a large company like Apple or Google is such a common goal in the tech industry that there's even a market for selling courses and books designed to help people achieve this goal. But one thing that I've learned in my career is that working at such companies is not for everyone. The experience of working at a large company is extremely different from that of a startup, so if you're not aware of those differences, you can end up having a big (negative) surprise down the road that can make you regret your choices. In this article, I'd like to show you the difference between companies of different sizes so that you can determine which one better fits your personal style and interests. Disclaimer: I haven't worked at every company to ever exist in this planet, so this is obviously not a 100% perfect model for every company out there. There are always exceptions, this is just a basic description of the average case. Working at a startup Pros: Great to get experience in a wide variety of topics and areas Growth potential is huge Little to no bureaucracy or politics Generally a great community / vibe overall Cons: Generally crap pay Highly unstable Little to no engineering challenges (startups often prioritize speed) Work is complete chaos Most likely going to work with a product that nobody cares about Working at a startup is the most fun I've had in my career, but I think it takes a special kind of person to thrive in this environment. I feel that working at a startup is ideal if you have an entrepreneurship mindset, because you not only get to be constantly exposed to the organizational side of things, you are likely also involved in it. This allows you to build a lot of experience with how companies work under the hood, which I've found to be really handy overall. Another thing I like about startups is that the vibe is generally very positive. Since there aren't a lot of people in the company, there's basically no bureaucracy and chances are that everyone gets along well. This also makes it so that you can grow quite fast in the company, provided that the company itself is doing well in the first place. In general, startups are a high-risk high-reward situation. While you can win big fast, you can lose big just as fast because any minor setback can destroy the entire company. This is another reason why I find them best for those with an entrepreneurship itch. The work itself also tends to be very chaotic and thus not something that someone looking for stability would enjoy. Another important downside to mention is that the engineering side of things tends to be a bit dull. Since startups often prioritize speed, building things tends to be down-prioritized in favor of going for easy out-of-the-box and / or plug-and-play open-source solutions, making a software engineering job feel more like assembling LEGO than anything else. Every work I had as a mobile engineer at a startup was basically 100% building UI, which became really boring to me after a while. Working at a mid-level company Pros: Generally good pay and benefits Better engineering challenges than the startups Opportunity to work with popular products Mostly stable Cons: Growth potential is not as great when compared to a startup Some bureaucracy / politics Despite the presence of interesting challenges, there aren't many sufficiently skilled engineers to tackle them / the engineering culture is not strong enough The mid-level company is the company that is big enough to overcome the downsides attributed to startups, but nowhere as big enough to have the pros attributed to large companies. In general, the pros/cons of a mid-level company are essentially the averages of the other two cases in this article. The primary problem with mid-level companies is that they try to mimic the processes and objectives of large companies, but have nowhere near as many resources as they do. This results for example in the team being tasked to solve massive engineering infrastructure challenges, because that's what large companies do, even though almost no one in the team is skilled enough to pull it off (likely because most who did have such skills ended up getting poached by the large companies). This puts giant pressure on these select few, which on one side can be seen as a great growth opportunity, but on the other side puts the company into a difficult position, as said people are likely to either burn out or leave in favor of an actual large company. With that said, I find that mid-level companies still offer great growth opportunities. I think they are good choices for people who like the vibe and stability of large companies but can't stand the downsides of working at actual large companies. Working at a large company Pros: Life-changing pay and benefits World-class engineering challenges Opportunity to work with some of the smartest people on the planet In some cases, opportunity to pioneer / define tech trends for the entire planet Opportunity to work with products that are used / loved on the entire planet Apart from potential layoffs, they are extremely stable / too big to fail Cons: Unbearable politics Growth is extremely hard By \"large company\", we're talking about tech giants like Google, Apple, Meta, and so on. Looking at the pros, it's easy to see why people dream of working at such places. But what a lot of people don't know is that there are strong downsides attached to working at such companies, and being able to tolerate them is critical to succeed there. I've met many folks who couldn't and ended up leaving. The first and most critical downside is that everything is covered by a thousand layers of bureaucracy and politics. I cannot overstate how unbearable this is, but it's how things at companies of this size. When you work at a startup, if you want to do something, you just go there and do it. For a mid-level company, it might be slightly more annoying, but still doable. But when you work at a large company, if you want to do something, you're going to have to have a meeting about having a meeting about drafting a document about a meeting about drafting another document, which hopefully will be picked up by the planning season several months later, leading to more meetings and documents until hopefully you get to do some actual work around a year later, unless the company re-orgs sometime during this process, in which case you'll have to drop everything and start from scratch. This boundless bureaucracy extends everywhere, including the promotion process. Growing at such companies can be extremely hard as the process involves considerable amounts of bureaucracy and things that are outside of your control, especially for Staff+ positions. Which team you're part of also plays a big role as some teams are bound to have more opportunities to drive impact than others in a company of this size. I think that thriving at a large company is directly correlated to how much you can tolerate such politics. No one would look at this description and be happy, but if you look at it and feel that you could take it, then working at a large company might be for you. Conclusion As I mentioned in the beginning, this is just a basic description of the average case. There are thousands of exceptions who surely don't fit into these descriptions. But the idea is just to present that the concept of trade-offs also applies to companies and cultural fit. Just because one company is larger than the other doesn't necessarily mean it's best you; depending on what you value, you might find that smaller companies are a better fit for you.",
    "author": "Bruno Rocha",
    "published": "Mon, 14 Oct 2024 21:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "2996dd4f-1f31-4f5f-b6f8-e78422a64261",
    "title": "My process for learning new languages",
    "link": "https://swiftrocks.com/my-process-for-learning-new-languages",
    "description": "Throughout my life, I have met several people who struggle to learn a new language, with some of them being unable to communicate at a basic level despite having studied for several years. I believe that learning a language is not a matter of talent, but that of dedication and following a good process. In this article, I would like to share the process I used more than once (and am still using) to tackle the challenge of learning a new language with great success. I currently speak three languages (native Portuguese, English, Swedish), and am in the process of learning a fourth (Japanese). My process For me, learning a new language consists of three major steps: Learning basic grammar Becoming good at reading and listening Becoming good at speaking Learning basic grammar My first step towards learning a new language consists of understanding the basics of the language. This includes things like learning how sentences are structured, how words should be pronounced, how to count, and any other language-specific basics that may apply (for example, for Swedish, learning the difference between en / ett, or the concept of soft / hard vowels). The word \"basic\" here is very important. I want to have a good understanding of how things work in that language, but I don't want to waste time reasoning about complex grammar rules. Think of the sorts of things a mom would correct a child for; my mom would correct me if I used a word in the wrong place, but she wouldn't lecture me about the theory of participle clauses. Knowledge of basic grammar massively pays off because later on it will simplify the process of expanding the vocabulary. Although at this point I will not know many words, my knowledge of basic grammar will allow me to more easily figure out how to pronounce any new words that I may encounter in the future, to properly classify them (subject? verb? noun? adjective? present? past tense?) based on their format and position in a sentence, and in some cases even accurately guess their meaning based on this information. Although in the next section I'm going to complain about traditional language learning books / schools, I think they are one of the best resources for learning basic grammar. It's also usually straightforward and can be mastered in just a couple of months. Becoming good at reading and listening But this is about as far as those language schools and books will help you out, because in my opinion they massively fuck up pretty much everything beyond this point. In my experience, after learning basic grammar, schools and books usually follow up by teaching advanced grammar. I think this is a complete waste of time and is why in my opinion many adults struggle with learning a language despite attending classes for multiple years. Learning complex grammar rules will not help you learn the language, even natives don't know this stuff! What natives know is vocabulary, and this is what I believe is the right focus at this stage. My goal then becomes to expand my vocabulary as much as possible by immersing myself in the language, consuming as much media as I can and as frequently as possible. This is something that is usually referred to as the immersion method. Here are some examples of things I do in this step: Changing the language of my phone / computer Watching shows with either sound or subtitles in that language, preferably both if available Listening to podcasts, sometimes actively and sometimes passively as background noise Finding internet forums / subreddits / YouTube channels for topics I like Reading the news You might think that this doesn't make sense because you won't understand anything, but that's exactly the point. Children also don't understand anything at first, yet magically they seem to just \"get it\" after one point, simply by being exposed to the language. This is because our brains are big pattern-matching machines; the more you expose yourself to a language, the more patterns / words you discover, which leads to further discoveries until you eventually reach a point where everything just clicks. In other words, the purpose of this step is to try to replicate how a child would learn a language at home. I find watching shows / YouTube videos to be particularly excellent for this because you can usually guess what a word means based on the context of the scene, meaning you don't need to spend as much time translating words as you would when compared to other types of media. Duolingo can also be a good tool to expand your vocabulary, as long as you don't use it in isolation. This is because although Duolingo is a good way to learn new words, it tends to be quite bad at everything else (e.g grammar), so I think it's important to back it up with the other methods mentioned in this section. It's important to note also that the quality of Duolingo's exercises varies greatly between languages, so looking for reviews before getting started is a must here. If you tend to quickly forget things like I do, a spaced repetition system can greatly assist you with fixating all of this new knowledge. In my case I quite enjoyed using Readwise for this, but I know many who have used Anki / traditional flashcards with great success. This entire process is very painful at first, but gets easier with time as your vocabulary improves. The unfortunate part is that this is a lengthy process; it can take several years of doing this before reaching a point where reading / listening to the language becomes effortless, and I think there's no way around it. Becoming good at speaking Although the previous step is excellent at making me good at reading and listening, in my experience it doesn't necessarily help me become good at speaking. When I was learning Swedish for example, although I had an easy time understanding what people were saying and knew in theory what to answer back, I still had a very hard time doing so, mostly because I just wasn't used to it. Although I knew the vocabulary in theory, it would still take several seconds for the right words to emerge in my mind when having a conversation with someone. Unlike the other steps, I don't think there is any special method that one can use to become good at speaking a new language. This is something you just have to keep doing until your brain gets used to it. It's a massive advantage if you actually live in the country in question, but this is doable even if you don't as there are many online services designed around connecting you with native speakers of a particular language. I personally never used them though, so I cannot comment on their efficiency. Another interesting to mention is that nowadays there are websites that connect LLMs to voice recognition models, allowing you to chat with something like ChatGPT with your voice for the purpose of language learning. I've tried one but personally didn't like the experience as talking to a robot felt completely different from talking to a real person, but if you'd like to try it out, you can easily find them on Google (there are hundreds of websites for this as of writing). I think the most important part here is to resist the urge to switch to another language when you start to struggle, especially if you live in a country like Sweden where the natives are good at English. (In fact I would say that the hardest thing about learning a language like Swedish is not the language itself, but rather that Swedes are so good at English that they automatically switch to it when they see you struggling with Swedish, making it almost impossible for you to improve!) Conclusion Although we can divide the process of learning a new language in logical steps, we're still talking about a multi-year effort. That's just how it works, there are no shortcuts. If you struggle with learning a new language, I hope this post was able to teach you something new that can help you in your journey!",
    "author": "Bruno Rocha",
    "published": "Sun, 1 Sep 2024 10:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "c0a63bff-8be9-41c5-ad1a-11c37202c343",
    "title": "SwiftUI views versus modifiers",
    "link": "https://www.swiftbysundell.com/articles/swiftui-views-versus-modifiers",
    "description": "What’s really the difference between building a piece of UI as a view versus a modifier, and how to choose between those two solutions?",
    "author": "",
    "published": "Mon, 27 Feb 2023 11:05:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "6c57fcb1-7f2e-4eb1-8f5f-15e6ec7e2ff1",
    "title": "Observing the content offset of a SwiftUI ScrollView",
    "link": "https://www.swiftbysundell.com/articles/observing-swiftui-scrollview-content-offset",
    "description": "How the content offset of a SwiftUI ScrollView can be observed without bridging to UIKit.",
    "author": "",
    "published": "Mon, 30 Jan 2023 12:50:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "2dbef2df-e3ce-4396-b20f-c97a946fdb0f",
    "title": "Introducing Plinky: My Love Letter To Links",
    "link": "https://fabisevi.ch/2024/05/09/introducing-plinky/",
    "description": "The post below was written by me, originally featured on the Plinky blog. To celebrate the launch of Plinky you can get 50% off of a yearly subscription by redeeming this offer: plinky.app/offer/REDPANDA There are few words I've ever said more excitedly than these: I want to tell you about my latest app, Plinky. Plinky makes it incredibly easy to do something we do every day, save links for later. You may already have a way to save links, I know I've tried every method under the sun, to the point where I decided to build my own app. That app is Plinky, and today it's available to download on the App Store. Over the last 18 months people have been loving Plinky, because it fixes the same problems I ran into when I've tried to save links in the past.",
    "author": "Joe Fabisevich",
    "published": "Thu, 09 May 2024 00:00:00 GMT",
    "image": "/static/c3d9146a8edf380ee267c61558f3a91b/ec7ce/plinky-screenshots.jpg",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "fbd0d62a-b0b6-4a2a-ba66-bb0b75e1b515",
    "title": "The Reasoning Computer",
    "link": "https://fabisevi.ch/2023/11/10/the-reasoning-computer/",
    "description": "The Turing test is dead, and we killed it. The Turing test is a test of a machine's ability to exhibit intelligent behavior equivalent to, or indistinguishable from, that of a human. From the 1940s 1 to the 2010s people programmed computers, and computers could only do what they were programmed to do in a rules-based deterministic manner. Sometimes a person would program the computer and it would do something unexpected, but 100 out of 100 times the computer was doing what it was programmed to do whether the person liked it or not. While there has been experimentation with what today we call AI since the 1950s, those machines were a long ways away from passing the Turing test. Why does using ChatGPT feel more like a conversation with the smartest person you know than a computer? It's because ChatGPT doesn't solve problems deterministically the way a programmed computer does, it solves them probabilistically. 2 ChatGPT demonstrates the ability to think about something in a logical, sensible way, the definition of reasoning. 3 We've created something completely new here, a reasoning computer. 4",
    "author": "Joe Fabisevich",
    "published": "Fri, 10 Nov 2023 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "0a304f6c-3413-475f-a441-5f00c4bfdb12",
    "title": "Solar Powered Birdhouse",
    "link": "https://atomicbird.com/blog/birdhouse-solar-power/",
    "description": "In my last couple of posts I’ve talked about the hardware and software behind my birdhouse camera project. I haven’t previously covered how I’m giving it all enough power to operate, and therein lies a tale. No Power? No Problem If I had a power outlet located anywhere near the bird house, this would have been easy. Pretty much any micro-USB power adapter would plug into the Raspberry Pi, and I’d be set.",
    "author": "",
    "published": "Thu, 19 May 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "d8359986-6e00-45b4-b0ae-3663a89b16b9",
    "title": "Raspberry Pi Birdhouse Software",
    "link": "https://atomicbird.com/blog/birdhouse-software/",
    "description": "In my last post I went over the components of the bird house camera I set up this year to get a better look at the local black-capped chickadees. Today I’ll talk about the software that makes it work. Initial Setup Being relatively new to Raspberry Pi, I started off with a full install of Raspbian Deskop. It’s more than I need, since I won’t have anything like a desktop setup, but with a 64GB SD card I wasn’t concerned about the space.",
    "author": "",
    "published": "Mon, 09 May 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "c867cfcf-a7dd-49ae-9b88-fb1e6a132dc8",
    "title": "304: Onboarding",
    "link": "http://relay.fm/radar/304",
    "description": "Improving the first-run experiences in our apps.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 24 Oct 2024 14:15:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar304.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "db08a670-a008-4f16-9e77-27238b8b004e",
    "title": "303: Raising Prices",
    "link": "http://relay.fm/radar/303",
    "description": "Looking around the App Store, it's clear that we're not charging enough.",
    "author": "Marco Arment and David Smith",
    "published": "Wed, 16 Oct 2024 13:45:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar303.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "5fb1a6f1-eed0-467b-8eb9-da1b0fafa05b",
    "title": "Harris for President",
    "link": "https://inessential.com/2024/10/31/harris_for_president.html",
    "description": "Donald Trump is a gross villain and a traitor to our country. He’s a convicted felon, adjudicated rapist, and head of a criminal organization; he works with criminals and he pardons criminals; he’s a narcissist and violent insurrectionist, racist and misogynist; he’s the master of lies and corruption and self-serving. He plans to rule as a fascist dictator, and this time has the backing to do so, for the benefit of him and his ultra-wealthy friends. Not for you. For everybody else, the various enemies within — everybody who isn’t a straight white male who goes along with the program — there will be concentration camps, deportation, prison, and rumors and threats of each. There will be more deaths in hospital parking lots. I have voted for Kamala Harris. I ask you to vote for her too. I happen to think Harris would be very good, possibly even great, as president. But it hardly matters! Voting for her is how we stop this. And we have to stop this.",
    "author": "",
    "published": "Thu, 31 Oct 2024 13:04:03 -0700",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "3eefc6ca-cfcd-4308-b05b-d4cc99fd4624",
    "title": "Seattle Xcoders 20th Anniversary Meetup",
    "link": "https://inessential.com/2024/10/16/seattle_xcoders_20th_anniversary_meetup.html",
    "description": "This Thursday, Oct. 17, 2024, is the 20th anniversary of the Seattle Xcoders! We’d love to see you there, at 7 pm at Bale Breaker and Yonder Cider taproom in Ballard. Everyone is welcome! It’s not just for people who write code — it’s for designers, testers, support folks, and everyone who helps make Apple-ecosystem apps. Even if you just like those kinds of apps and like talking about them, come join us! We’re usually outside by these propane fire things, but I’m not sure this time — we might have a room or some area or something. We should be easy to find, at any rate. It’s not actually a meeting with presentations — it’s just hanging out and talking. Which we do every first, third, and fifth Thursday (you can subscribe to our calendar). One of these days we’ll get back to presentations — but the social part is valuable, and so we keep it up. PS Looks like the food truck is Impeckable Chicken, which I’ve heard good things about. :) PPS I’m usually easy to spot: quite well into middle age, with nothing like the amount of hair I once had. Black jeans, usually a black sweatshirt. Glasses. Doc Martens. Not tall.",
    "author": "",
    "published": "Wed, 16 Oct 2024 19:13:25 -0700",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "4b744bfc-4d8d-4c73-8d24-18d965a6a4c4",
    "title": "Conditional SwiftUI Accessibility Labels",
    "link": "https://useyourloaf.com/blog/conditional-swiftui-accessibility-labels/",
    "description": "In iOS 18, Apple added an optional isEnabled parameter to many of the accessibility modifiers. Conditional Accessibility Modifiers (iOS 18) Apple added the isEnabled parameter to .accessibilityLabel, .accessibilityInputLabels, .accessibilityValue, .accessibilityHint and many other accessibility modifiers. This has the effect of only applying the modifier when the isEnabled parameter is true. This is useful in situations where you need to conditionally override the default accessibility behaviour. For example, this labeled content has a button with a system symbol image: LabeledContent { Button { toggleFavorite(item) } label: { Image(systemName: item.favorite ? \"star.fill\" : \"star\") } } label: { Text(item.name) } I’m using the labeled content in a list of items, the button toggling the favorite status of each item: The button label provides the default accessibility label for the button action. In this example I’m using the “star” SF symbol which has a default (localized) accessibility label of “favorite”. That’s great but I’d like to change the label based on favorite status of the item. Favorited items show the filled version of the “star” symbol and I’d like the accessibility label for the button action to be “unfavorite”. One way is with an accessibility label that is conditional on the favorite status of the item: Image(systemName: item.favorite ? \"star.fill\" : \"star\") .accessibilityLabel(item.favorite ? \"Favorite\" : \"Unfavorite\") That works, but in situatons like this where we already have a suitable default label we can use the isEnabled variant of the modifier: Image(systemName: item.favorite ? \"star.fill\" : \"star\") .accessibilityLabel(\"Unfavorite\", isEnabled: item.favorite) It’s a small improvement but I think still useful to avoid having to repeat (and localize) the default label. Learn More WWDC24 Catch up on accessibility in SwiftUI Conditional SwiftUI Accessibility Labels was originally posted 21 Oct 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
    "author": "",
    "published": "Mon, 21 Oct 2024 11:08:21 +0100",
    "image": "https://useyourloaf.com/blog/conditional-swiftui-accessibility-labels/001.png",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "947d3b47-b7d0-4911-a04f-46b3e94fe6d0",
    "title": "iPhone 16 Screen Sizes",
    "link": "https://useyourloaf.com/blog/iphone-16-screen-sizes/",
    "description": "Two new sizes as the Pro phones grow in size, and weight, and get even smaller bezels. Here’s what you need to know about the iPhone 16. The New Models in a Nutshell As in earlier years, Apple has discontinued the iPhone 15 Pro models and added features to the base iPhone 16 models. Apple also continues to sell the base iPhone 15, iPhone 14, and the iPhone SE. The Pro models increase in size from last year given us four different screen sizes across the iPhone 16 range: The base models have the same screen sizes as last years iPhone 15 models, but still lack ProMotion and the Always-on display. They keep the aluminium body where the Pro models are Titanium. Support for USB-3 (10Gbp/s) transfer speeds is still limited to the Pro models. The displays have the same peak brightness as last year but now have a 1 nit minimum brightness and the latest generation Ceramic Shield. All models now have the Action button and the new Camera Control button. iPhone 16 The iPhone 16 gains new colours, the Action, and Camera Control buttons, and the A18 chip with support for Apple Intelligence. A18 chip (6-core CPU, 5-core GPU, 16-core Neural Engine) Display: 6.1\" Super Retina XDR OLED with Dynamic Island Screen resolution (points): 393 x 852 Native resolution (pixels): 1179 x 2556 (460 ppi) Native Scale factor: 3x Portrait size classes: w: Compact, h: Regular Landscape size classes: w: Compact, h: Compact There’s no change to the dynamic island design this year so the iPhone 16 keeps the same 54 point high status bar. The top safe area inset is 59 points reducing the height of the safe area in portrait to 759 points: Safe Area Insets (portrait): top: 59, bottom: 34, left: 0, right: 0 Safe Area Insets (landscape): top: 0, bottom: 21, left: 59, right: 59 iPhone 16 Plus Other than the larger screen size (and battery life) the iPhone 16 Plus shares the same specs as the iPhone 16. A18 Bionic chip (6-core CPU, 5-core GPU, 16-core Neural Engine) Display: 6.7\" Super Retina XDR OLED with Dynamic Island Screen resolution (points): 430 x 932 Native resolution (pixels): 1290 x 2796 (460 ppi) Scale factor: 3x Portrait size classes: w: Compact, h: Regular Landscape size classes: w: Regular, h: Compact The status bar is 54 points high with a top safe area inset of 59 points which gives the following safe area insets (same as the iPhone 16): Safe Area Insets (portrait): top: 59, bottom: 34, left: 0, right: 0 Safe Area Insets (landscape): top: 0, bottom: 21, left: 59, right: 59 iPhone 16 Pro The iPhone 16 Pro is 3mm taller, 0.9mm wider, and has smaller bezels than the iPhone 15 Pro. The screen size increases from 6.1\" to 6.3\" and it has the Pro version of the A18 chip: A18 Pro chip (6-core CPU, 6-core GPU, 16-core Neural Engine). Display: 6.3\" Super Retina XDR OLED with ProMotion, Always-On display, and Dynamic Island. Screen resolution (points): 402 x 874 Native resolution (pixels): 1206 x 2622 (460 ppi) Native Scale factor: 3x Portrait size classes: w: Compact, h: Regular Landscape size classes: w: Compact, h: Compact The status bar is 54 points high with a top safe area inset of 62 points which gives the following safe area insets: Safe Area Insets (portrait): top: 62, bottom: 34, left: 0, right: 0 Safe Area Insets (landscape): top: 0, bottom: 21, left: 62, right: 62 iPhone 16 Pro Max The iPhone 16 Pro Max is 3.1mm taller, 0.9mm wider, and has smaller bezels than the iPhone 15 Pro Max. The screen size increases from 6.7\" to 6.9\" and it has the Pro version of the A18 chip: A18 Pro chip (6-core CPU, 6-core GPU, 16-core Neural Engine). Display: 6.9\" Super Retina XDR OLED with ProMotion, Always-On display, and Dynamic Island. Screen resolution (points): 440 x 956 Native resolution (pixels): 1320 x 2868 (460 ppi) Scale factor: 3x Portrait size classes: w: Compact, h: Regular Landscape size classes: w: Regular, h: Compact The status bar is 54 points high with a top safe area inset of 62 points which gives the following safe area insets: Safe Area Insets (portrait): top: 62, bottom: 34, left: 0, right: 0 Safe Area Insets (landscape): top: 0, bottom: 21, left: 62, right: 62 The Complete List of iPhones (and an iPod) Apple added new 6.3\" and 6.9\" Pro model sizes this year. By my count, that means there are 13 different iPhone screen sizes that you need to support with a minimum deployment target of iOS 13 (new models in bold): 6.9\" (440 x 956 points at @3x) iPhone 16 Pro Max 6.7\" (430 x 932 points @3x) iPhone 16 Plus, iPhone 15 Pro Max, iPhone 15 Plus, iPhone 14 Pro Max 6.7\" (428 x 926 points @3x) iPhone 14 Plus, iPhone 13 Pro Max, iPhone 12 Pro Max 6.5\" (414 x 896 points @3x) iPhone 11 Pro Max, iPhone XS Max 6.3\" (402 x 874 points at @3x) iPhone 16 Pro 6.1\" (393 x 852 points @3x) iPhone 16, iPhone 15 Pro, iPhone 15, iPhone 14 Pro 6.1\" (390 x 844 points @3x) iPhone 14, iPhone 13 Pro, iPhone 13, iPhone 12 Pro, iPhone 12 6.1\" (414 x 896 points @2x) iPhone 11, iPhone XR 5.8\" (375 x 812 points @3x) iPhone 11 Pro, iPhone XS, iPhone X 5.5\" (414 x 736 points @3x) iPhone 8 Plus, iPhone 7 Plus, iPhone 6S Plus 5.4\" (375 x 812 points @3x) iPhone 13 mini, iPhone 12 mini 4.7\" (375 x 667 points @2x) iPhone SE (3rd \u0026 2nd Gen), iPhone 8, iPhone 7, iPhone 6S 4\" (320 x 568 @2x) iPhone SE (1st Gen), iPod Touch (7th Gen) App Store Screenshots Apple confirmed during WWDC24 that App Store Connect now requires just one set of screenshots for iPhone (and one for iPad). That screenshot can be for either the 6.9\" or 6.5\" iPhone display. You can upload either of the following sizes for the 6.9\" display (portrait sizes, reverse for landscape): 6.9\" 1320 x 2868 pixels (iPhone 16 Pro Max) 6.7\" 1290 x 2796 pixels (iPhone 16 Plus) If you don’t upload screenshots for the 6.9\" display you can provide either of the following for the 6.5\" display: 6.7\" 1284 x 2778 pixels (iPhone 14 Plus) 6.5\" 1242 x 2688 pixels (iPhone 11 Pro Max) All other iPhone display sizes can use scaled versions of the above. See Also iPhone 15 Screen Sizes Want To Learn More? If you’re struggling to build layouts with UIKit that work across the growing range of iOS devices you might like my book - Modern Auto Layout. iPhone 16 Screen Sizes was originally posted 16 Sep 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
    "author": "",
    "published": "Mon, 16 Sep 2024 10:44:39 +0100",
    "image": "https://useyourloaf.com/blog/iphone-16-screen-sizes/001.png",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "01137dac-cef1-40b1-ad15-5480c4e39e74",
    "title": "Magical Particle Effects with SwiftUI Canvas",
    "link": "https://nerdyak.tech/development/2024/06/27/particle-effects-with-SwiftUI-Canvas.html",
    "description": "In one of the previous posts, I shared a simple way of Creating particle effects in SwiftUI. The approach is super easy and utilizes the power of viewModifiers, but I would not recommend it for production use as it is performance-greedy when having a bigger amount of particles in place (because each particle is a single view)",
    "author": "Pavel Zak",
    "published": "2024-06-27T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "Canvas",
      "Particles",
      "BlendMode",
      "TimelineView"
    ]
  },
  {
    "id": "b0ed1c3a-80f4-4114-b6b8-a04197f66388",
    "title": "SwiftUI transitions with distortion effect and Metal Shaders",
    "link": "https://nerdyak.tech/development/2023/06/16/distortionEffect-with-Metal-shaders-for-better-transitions.html",
    "description": "This year DubDub is over and I am very excited about the new developer treats that iOS17 will bring us that expand the animation possibilities of SwiftUI. I am talking mainly about the PhaseAnimator, KeyframeAnimator and the ability to utilize Metal shaders on SwiftUI views through modifiers .distortionEffect, .layerEffect, and .colorEffect (docs).",
    "author": "Pavel Zak",
    "published": "2023-06-16T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "distortionEffect",
      "Metal",
      "Shaders",
      "transitions"
    ]
  },
  {
    "id": "5b6318b1-efb4-433b-8f21-cd8ad41db6dc",
    "title": "RUX: JSX-Style Rails View Components - RUBY 517",
    "link": "https://rubyrogues.com/rux-jsx-style-rails-view-components-ruby-517",
    "description": "Cameron Dutro joins the Rogues to discuss RUX, a system for managing your View Components in Rails in a similar way to how React uses JSX to manage its Component views. He discusses how it works, how it goes together, and what inspired it. Panel Charles Max Wood Darren Broemmer Luke Stutters Valentino Stoll Guest Cameron Dutro Sponsors Dev Influencers Accelerator Raygun | Click here to get started on your free 14-day trial PodcastBootcamp.io Links GitHub | camertron/rux Primer Design System ViewComponent GitHub | opal/opal Matestack Reimagined Rails views using Matestack with Jonas Jabari Ruby 2.5 allows creating structs with keyword arguments GitHub: Cameron Dutro ( camertron ) Twitter: Кэмерон Дутро ( @camertron ) Picks Cameron- GitHub | camertron/erb2rux Charles- PodcastBootcamp.io Charles- JavaScript Picks Charles- Ready Player Two Charles- Masters of Doom Charles- Top End Devs Darren- Is Ruby Dead Darren- 16 New ML Gems for Ruby Luke- GitHub | jeremyevans/sequel_postgresql_triggers Luke- DEF CON 29 - James Kettle - HTTP2: The Sequel is Always Worse Luke- The Wire  Valentino- Flux Valentino- Add strict_loading mode to optionally prevent lazy loading Contact Charles: Devchat.tv DevChat.tv | Facebook Twitter: DevChat.tv ( @devchattv ) Contact Darren: Twitter: Darren Broemmer ( @DarrenBroemmer ) Contact Luke: GitHub: Luke Stutters ( lukestuts ) Contact Valentino: Doximity Technology Blog Work @ Doximity GitHub: Valentino Stoll ( codenamev ) Twitter: V ( @thecodenamev )",
    "author": "",
    "published": "Wed, 06 Oct 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/ruby-rogues/RUBY_517.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "eabf5d81-50b0-414b-9b77-ccb07d66bc92",
    "title": "React Do's and Don't's - RRU 158",
    "link": "https://reactroundup.com/react-do-s-and-don-t-s-rru-158",
    "description": "This week the panel discusses several Do's and Don't's for your React Apps that are lessons they've learned building React applications over the years. Panel Jack Herrington Paige Niedringhaus TJ Vantoll Sponsors Dev Influencers Accelerator Raygun | Click here to get started on your free 14-day trial PodcastBootcamp.io Links GitHub | welldone-software/why-did-you-render Picks Jack- Hades Paige- Versailles (TV series) TJ- Land of the Giants Contact Jack: Jack Herrington – YouTube Blue Collar Coder Twitter: Jack Herrington ( @jherr ) Contact Paige: Paige Niedringhaus Paige Niedringhaus – Medium Twitter: Paige Niedringhaus ( @pniedri ) GitHub: Paige Niedringhaus ( paigen11 ) Contact TJ: TJ VanToll's Blog Progress Software KendoReact Twitter: TJ VanToll ( @tjvantoll )",
    "author": "",
    "published": "Wed, 06 Oct 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/reactroundup/RRU_158.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  }
]
