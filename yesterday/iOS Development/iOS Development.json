[
  {
    "id": "e35c1eb2-0f64-4841-ab24-2c0e9a6600d6",
    "title": "minifeed",
    "link": "https://tyler.io/2025/01/minifeed/",
    "description": "I recently discovered minifeed, and it has quickly become one of my favorite things on the internet. Once, maybe twice a day, I load the homepage and browse through the latest posts from real blogs written by real humans. I almost always find something surprising, delightful, weird, or just plain fun to read. Even better, I come away with a new blogger to follow.",
    "author": "Tyler",
    "published": "Wed, 15 Jan 2025 02:47:20 +0000",
    "image": "",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "4cb05b7c-2a69-4d2e-9386-bb30c588abc1",
    "title": "Advice",
    "link": "https://tyler.io/2025/01/advice/",
    "description": "My son turned eleven last month. He reads all the time (fantasy books are his favorite) and has started planning and building his own worlds to write stories about. He made a to-do list in his writing notebook, and I asked him if I could share it here. It's good advice.",
    "author": "Tyler",
    "published": "Fri, 10 Jan 2025 15:41:20 +0000",
    "image": "https://cdn.tyler.io/wp-content/uploads/2025/01/writing-todo-list-860x1024.jpg",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "a29a5ce6-b176-451e-b43f-85ea046fc749",
    "title": "How to setup a Swift Package Registry in Artifactory",
    "link": "https://albertodebortoli.com/2025/06/06/how-to-setup-a-swift-package-registry-in-artifactory/",
    "description": "A quick guide to setting up a Swift Package Registry with Artifactory to speed up builds and streamline dependency management.",
    "author": "Alberto De Bortoli",
    "published": "Fri, 06 Jun 2025 08:00:00 GMT",
    "image": "https://albertodebortoli.com/content/images/2025/06/Gemini_Generated_Image_p2p1t1p2p1t1p2p1.jpeg",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "swift",
      "registry",
      "artifactory"
    ]
  },
  {
    "id": "a5101f42-6d67-4661-9674-1aee841a8114",
    "title": "Scalable Continuous Integration for iOS",
    "link": "https://albertodebortoli.com/2024/01/03/scalable-continuous-integration-for-ios/",
    "description": "How Just Eat Takeaway.com leverage AWS, Packer, Terraform and GitHub Actions to manage a CI stack of macOS runners.",
    "author": "Alberto De Bortoli",
    "published": "Wed, 03 Jan 2024 22:26:50 GMT",
    "image": "https://albertodebortoli.com/content/images/2024/01/1_SaGE67XSSeflkTKknVOHbg.webp",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "CI",
      "mobile",
      "iOS",
      "AWS",
      "macOS"
    ]
  },
  {
    "id": "b8b7b197-be4a-47e8-93ab-96e60745eb8f",
    "title": "Swift 6 suitable notification observers in iOS",
    "link": "https://augmentedcode.io/2024/11/18/swift-6-friendlier-notification-observers/",
    "description": "The author discusses challenges managing side projects, specifically updating SignalPath to Swift 6. They encountered errors related to multiple notification observations but resolved them by shifting to publishers, avoiding sendable closure issues. Although the new approach risks background thread notifications, the compiler is satisfied with the adjustments made to the code.",
    "author": "Toomas Vahter",
    "published": "Mon, 18 Nov 2024 16:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "iOS",
      "Swift"
    ]
  },
  {
    "id": "36ca4432-9bdd-43b5-860e-71d2a4d5c643",
    "title": "AnyClass protocol and Objective-C methods",
    "link": "https://augmentedcode.io/2024/11/04/anyclass-protocol-and-objective-c-methods/",
    "description": "AnyClass is a protocol all classes conform to and it comes with a feature I was not aware of. But first, how to I ended up with using AnyClass. While working on code using CoreData, I needed a way to enumerate all the CoreData entities and call a static function on them. If that function […]",
    "author": "Toomas Vahter",
    "published": "Mon, 04 Nov 2024 16:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "iOS",
      "Swift",
      "AnyClass"
    ]
  },
  {
    "id": "bcc6275a-9539-4637-ab1b-973e80d1f95b",
    "title": "From Engineer to Manager: A Year of Growth and Transformation",
    "link": "https://benoitpasquier.com/2023/06/from-engineer-to-manager-a-year-of-growth-and-transformation/",
    "description": "It feels like it was yesterday when I became an engineering manager but it has been almost a year. I want to take this time to reflect on the challenges and learnings from this journey.",
    "author": "",
    "published": "Sun, 11 Jun 2023 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "f4e9bd3a-6e73-4080-8614-66572884c963",
    "title": "Things to know before becoming an Engineering Manager",
    "link": "https://benoitpasquier.com/2023/02/things-to-know-before-becoming-an-engineering-manager/",
    "description": "The journey from individual contributor to engineering manager isn’t always straightforward. Today, I’ll share what it means to become an engineering manager from my point of view, and a few important points to be aware of before making this transition.",
    "author": "",
    "published": "Sun, 19 Feb 2023 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "a475835b-883e-4a26-9fb4-81c4884c8fdd",
    "title": "You Should Feed Ducks The Good Bread",
    "link": "https://fabisevi.ch/2025/05/12/you-should-feed-ducks-the-good-bread/",
    "description": "Colleen and I were binge-watching Gossip Girl last winter, and there are a few scenes where a stressed and irate Blair Waldorf wanders over to Central Park to feed the ducks. I told Colleen, \"that sounds soothing — we should do that when the weather gets better\". And then, as I’m wont to do, I promptly forgot. But Colleen takes note of moments like that, and a few months later she reminded me: we should actually go feed some ducks. That’s how I found myself in Central Park last weekend, feeding ducks. It was the first beautiful day of spring in New York — the kind of day New Yorkers wait for, when everyone pours out to enjoy sunlight finally breaking through after a long dark winter. We had a picnic, strolled through the park, wandered amidst thousands of New Yorkers — and of course, we fed the ducks. My wife (who I should preface is an extremely kind, caring, and loving person) and I got into a small debate over what kind of bread to feed the ducks. I insisted on buying them a nice loaf, and she felt it was unnecessary — the ducks would happily take our scraps. I argued that buying a good loaf cost us very little but could potentially make their day. Heck, it could even possibly be the best meal they ever have. She replied that there’s no way to know if they’d even notice the difference — to them, it might just be one carb versus another. Three Philosphers Interject I bought the dang bread, and she didn’t mind. I spent the whole afternoon thinking about that moment, and why it meant so much to me. In the end, I came back to three philosophers and their philosophies.",
    "author": "Joe Fabisevich",
    "published": "Mon, 12 May 2025 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "3f0c9d69-945e-4871-a65b-a52b0bb86efd",
    "title": "A Trick For Opening Magic Links in Your RSS Reader",
    "link": "https://fabisevi.ch/2025/03/28/opening-magic-links-in-your-rss-reader/",
    "description": "This blog post is documentation for a very specific problem I run into about once a year. That’s rare enough to forget how I solved it, but frequent enough to waste 15 minutes rediscovering the answer. And let’s be honest: it’s not the big problems that drive you mad — it’s the little ones that feel like their own Sisyphean hell. The Problem Some websites 1 require you to log in using a magic link — a one-time link emailed to you that signs you in when clicked. It’s usually seamless. But on iOS, it can quietly become a headache. 2",
    "author": "Joe Fabisevich",
    "published": "Fri, 28 Mar 2025 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "4a522b6b-f36f-44b0-a172-7cc247eb64d3",
    "title": "iOS Accessibility Values",
    "link": "https://mobilea11y.com/blog/accessibility-values/",
    "description": "For iOS, Accessibility values are one of the building blocks of how Accessibility works on the platform, along with traits, labels, hints, and showing/hiding elements. If you’re familiar with WCAG or web accessibility, accessibility values are the value part of WCAG 4.1.2: Name, Role, Value. Values Not every element in your view will have a value - in fact, most won’t. Any element that ‘contains’ some data, data that is not included in the element’s label requires an accessibility value to be set.",
    "author": "",
    "published": "Sun, 19 Jun 2022 10:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "5302fe65-fca2-46fc-a116-d473f5ecbb4c",
    "title": "iOS UIKit Accessibility traits",
    "link": "https://mobilea11y.com/blog/traits/",
    "description": "Accessibility traits on iOS is the system by which assistive technologies know how to present your interface to your users. The exact experience will vary between assistive technologies, in some cases they may change the intonation of what VoiceOver reads, or add additional options for navigation, sometimes they will disable that assistive technology from accessing the element, or change how the assistive tech functions. They are the ‘Role’ part of the fundamental rule of making something accessible to screen readers - WCAG’s 4.",
    "author": "",
    "published": "Fri, 13 Aug 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "b7d0c187-f5dc-48c2-8ab2-4c19926c7eb5",
    "title": "Find out what’s new for Apple developers",
    "link": "https://developer.apple.com/news/?id=04aq3n93",
    "description": "Discover the latest advancements on all Apple platforms. With incredible new features in iOS, iPadOS, macOS, tvOS, visionOS, and watchOS, and major enhancements across languages, frameworks, tools, and services, you can create even more unique experiences in your apps and games.Explore what’s new",
    "author": "",
    "published": "Mon, 09 Jun 2025 06:10:28 PDT",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "044cd1fc-8a05-49b6-a0a6-2cf699881451",
    "title": "Updated agreements and guidelines now available",
    "link": "https://developer.apple.com/news/?id=r9dcmrvs",
    "description": "The Apple Developer Program License Agreement and App Review Guidelines have been revised to support new features and updated policies, and to provide clarification. Please review the changes below.Apple Developer Program License Agreement Section 3.3.3(D): Updated language on requirements for data and privacy. Section 3.3.3(N): Updated requirements for use of the ID Verifier APIs. Definitions, 3.3.3(P): Specified requirements for use of the Declared Age Range API. Definitions, 3.3.7(G): Specified requirements for use of the Wi-Fi Aware framework. Definitions, 3.3.7(H): Specified requirements for use of the TelephonyMessagingKit APIs. Definitions, 3.3.7(I): Specified requirements for use of the Default Dialer APIs. Definition, Section 3.3.8(H), Attachment 11: Specified requirements for use of EnergyKit. Definitions, 3.3.8(I): Specified requirements for use of the Foundation Models framework. Definitions, Attachment 4: Specified requirements for use of the iCloud Extended Share APIs. Section 6.4: Removed language on Bitcode submissions as it is no longer applicable, and replaced it with terms regarding iOS app widgets on CarPlay. Section 7.4(B): Updated and clarified requirements for TestFlight related to digital purchases and tester invitations. Section 7.7: Updated language on customization of icons and widgets. Section 7.8: Specified terms related to the Apple Games app. Attachment 6: Updated terms regarding the entity that distributes the map in China. App Review Guidelines 3.1.2(a), bullet 2: This language has been deleted (“You may offer a single subscription that is shared across your own apps and services”). 3.1.2(a), bullet 5: This language has been relocated to Guideline 3.2.2(x). 3.2.1(viii): Clarified that financial apps must have necessary licensing and permissions in the locations where developers make them available. 3.2.2(x): This new guideline contains the language relocated from Guideline 3.1.2(a), bullet 5, and permits developers to otherwise incentivize users to take specific actions within app. Please sign in to your account to accept the updated Apple Developer Program License Agreement.Translations of the guidelines will be available on Apple Developer website within one month.",
    "author": "",
    "published": "Mon, 09 Jun 2025 06:00:12 PDT",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "b6f67260-bbae-4267-8aa0-a78f15f5bb7c",
    "title": "Building with nightly Swift toolchains on macOS",
    "link": "https://oleb.net/2024/swift-toolchains/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2024-03-05T18:54:44Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "a7cec531-5132-43bb-840b-815792fe1baa",
    "title": "How the Swift compiler knows that DispatchQueue.main implies @MainActor",
    "link": "https://oleb.net/2024/dispatchqueue-mainactor/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2024-02-29T18:54:47Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "559ecd7c-d52d-4e9c-b8df-5756d53b2847",
    "title": "Magical Particle Effects with SwiftUI Canvas",
    "link": "https://nerdyak.tech/development/2024/06/27/particle-effects-with-SwiftUI-Canvas.html",
    "description": "In one of the previous posts, I shared a simple way of Creating particle effects in SwiftUI. The approach is super easy and utilizes the power of viewModifiers, but I would not recommend it for production use as it is performance-greedy when having a bigger amount of particles in place (because each particle is a single view)",
    "author": "Pavel Zak",
    "published": "2024-06-27T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "Canvas",
      "Particles",
      "BlendMode",
      "TimelineView"
    ]
  },
  {
    "id": "eaa0076f-7dde-4255-8b46-03a530f112e8",
    "title": "SwiftUI transitions with distortion effect and Metal Shaders",
    "link": "https://nerdyak.tech/development/2023/06/16/distortionEffect-with-Metal-shaders-for-better-transitions.html",
    "description": "This year DubDub is over and I am very excited about the new developer treats that iOS17 will bring us that expand the animation possibilities of SwiftUI. I am talking mainly about the PhaseAnimator, KeyframeAnimator and the ability to utilize Metal shaders on SwiftUI views through modifiers .distortionEffect, .layerEffect, and .colorEffect (docs).",
    "author": "Pavel Zak",
    "published": "2023-06-16T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "distortionEffect",
      "Metal",
      "Shaders",
      "transitions"
    ]
  },
  {
    "id": "a01ae18b-16b4-40b7-a8cf-3cb6e05543bd",
    "title": "Tips and tricks for when using SwiftUI’s ViewBuilder",
    "link": "https://www.swiftbysundell.com/articles/swiftui-viewbuilder-tips-and-tricks",
    "description": "Let’s explore how we can use SwiftUI’s ViewBuilder within our own code, and a few things that can be good to keep in mind when doing so.",
    "author": "",
    "published": "Fri, 30 May 2025 14:25:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "743e5f27-0380-4441-a697-c81fc9843c5f",
    "title": "Using Swift’s defer keyword within async and throwing contexts",
    "link": "https://www.swiftbysundell.com/articles/using-defer-within-async-and-throwing-contexts",
    "description": "How Swift’s defer keyword can be incredibly useful when working with code scopes that have multiple exit points, such as throwing or async functions.",
    "author": "",
    "published": "Tue, 15 Apr 2025 16:45:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "d229a9c4-8bc6-4c96-b4ca-815f58d4f3d7",
    "title": "Tips and tricks for when using SwiftUI’s ViewBuilder",
    "link": "https://www.swiftbysundell.com/articles/swiftui-viewbuilder-tips-and-tricks",
    "description": "Let’s explore how we can use SwiftUI’s ViewBuilder within our own code, and a few things that can be good to keep in mind when doing so.",
    "author": "",
    "published": "Fri, 30 May 2025 14:25:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "4c253afb-be1a-4046-a0d6-24a34047431c",
    "title": "Using Swift’s defer keyword within async and throwing contexts",
    "link": "https://www.swiftbysundell.com/articles/using-defer-within-async-and-throwing-contexts",
    "description": "How Swift’s defer keyword can be incredibly useful when working with code scopes that have multiple exit points, such as throwing or async functions.",
    "author": "",
    "published": "Tue, 15 Apr 2025 16:45:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "c2dbfc6b-8003-4273-aec3-40bbb84188c8",
    "title": "How I'm using AI to improve my software engineering productivity (and why it will not steal your job)",
    "link": "https://swiftrocks.com/how-im-using-ai-for-software-engineering",
    "description": "AI has become an important part of my daily software engineering work, so I wanted to write a post sharing how exactly I've been using it in case you're wondering how to use it to improve your productivity as well! Foreword: AI will not steal your software engineering job Before getting to the details of how AI has been helping me to code, I wanted to address the topic of AI replacing software engineers. Recently, my social media feeds have become full of people making predictions about how in X months/years everything in the software engineering industry will be done by AI, via doomsday-style content about how everyone is going to lose their jobs and everything will fall apart. If you look at who's writing these kinds of posts, you'll notice something interesting: they are either executives who have never done any kind of software engineering, or beginners with no industry experience. Honestly, that should tell you everything you need to know about these \"predictions\". But in the interest of being informative, I'll try to explain why they are nonsense. The problem with these \"predictions\" is that the people making them for some reason seem to view software engineering as nothing more than coding and closing tasks on JIRA. You arrive at work, pick a task that is very well defined and requires no clarification whatsoever, code it, close it, pick another task that is once again perfectly defined, and repeat that ad-infimum for the entire duration of your career. But the reality of software engineering is far more complex than that. While there's certainly a good amount of coding, it's extremely rare that the problems a software engineer needs to solve are perfectly defined from the get-go as claimed by the people making these predictions. This means that more often than not the job is not really about coding, but rather figuring out what exactly needs to be coded, by asking yourself questions such as: What problems are we facing right now? What are the current objectives of the company? What is the current state of the company? What is most important for our users? Who will benefit from X problem being solved? What does the codebase looks like today? Are there any patterns or traps I need to be aware of? Are there any political fights going on around me that would affect what I should focus on? What's the current state of the industry? Are there any new tools that can help me solve my problems? The answers to questions like the ones above provide you with context that helps you define how (and when) exactly certain problems should be solved, and is a critical aspect of software engineering even for junior developers. And the interesting part is that the more senior you become, the less coding you do, and the more time you spend answering these types of questions to help your team/company determine which way it should go. This is something I've also written about on my Focus not on the task, but on the problem behind the task blog post. While AI can be quite good at solving very simple and perfectly defined problems, it is exceptionally bad at handling anything that requires taking this level of context into account, which is something that software engineers constantly have to do. This is very easy to confirm if you have doubts about it: Grab any AI agent and project of your choice (or ask the agent to make a new one), and keep asking it to include more features in your project. While it may do relatively well the first time, it is inevitable that the AI will start confusing itself and destroying the codebase on the subsequent requests. This is because AI today doesn't understand context, and as one user on HackerNews wrote, it's like working with a junior developer that has amnesia. Thus, while AI today can be amazing as a coding assistant (which I'll go into more detail further below), the thought of it replacing software engineers is frankly hilarious. One counterargument that some people have is that while this is true today, it doesn't mean that in the future the AI won't be able to understand context and thus be able to do complex tasks. While this is true, what must be noted about this is that an AI capable of understanding context (and gathering it on its own) would be so powerful that it wouldn't just replace software engineers; it would replace all of humanity. If such a thing is achieved then software engineering jobs would be the least of our concerns, so I think it's a sort of weird argument to consider. Our entire lives would change in this scenario. With that out of the way, I'd like to now present my favorite use cases for AI today! Use case 1: Getting simple tasks done quickly One thing that AI is very good as of writing is solving very concrete and straightforward problems. So when I have to do very menial tasks like changing configuration files or writing a simple function that does X and Y, nowadays what I do is simply ask Cursor to do it for me, sit back, and watch the show. Even when taking into account that the AI might not get it 100% correct and that I'll still have to patch the code afterward, this still saves me a massive amount of time overall compared to having me do everything by myself and is definitely my favorite use case of AI today. This is especially true when doing (simple) work on languages that I'm not very familiar with, as the AI in this case is also sparing me from having to do multiple trips to StackOverflow. I still need to do so since the AI will sometimes recommend things that are not correct for my case, but again, even when considering these setbacks, I can get the work done at a much faster pace. It must be noted however that the important keyword here is simple, concrete, and straightforward. As mentioned previously, trying to have the AI solve complex problems that require large amounts of context such as code reviews or designing large features will not work in any meaningful way and is a sure way to waste everyone's time. Use case 2: Understanding complex codebases quickly Another thing that I've found AI to be amazing at is when I'm working on a repository that I'm not familiar with and I need to figure out how certain things are wired together. The way I would do this before AI was to spend hours painstakingly reading through the codebase, but now, with the right questions, it's possible for me to get started in a matter of seconds. Here's a concrete recent example to demonstrate what I mean by this. I was recently attempting to craft a Build Server Protocol that would connect to SourceKit-LSP in order to enable iOS development on my specific non-Xcode conditions. The problem here is that SourceKit-LSP is a very complex project. Even though I know what I have to do in theory, I have no idea what SourceKit-LSP expects me to do in practice. But nowadays, instead of having to spend weeks trying to figure this out by searching keywords on the codebase, I can simply ask Cursor to explain the project to me! Similarly to Use case 1, it's to be expected that the explanation provided by the AI will not be 100% accurate. But once again, even when taking this into consideration, the amount of time these explanations save me is mindblowing. Since Cursor in this case provides shortcuts to the relevant parts of the codebase, I am able to very quickly piece together what I am supposed to do / determine which parts of the explanation are correct and which ones aren't. Use case 3: Searching for things when I don't know what exactly I'm looking for I find that Google tends to provide good results if you know exactly what you're looking for. But if you don't really know what is it that you're trying to find out, you'll have a hard time with it. For example, the other day I was trying to find what the _start function in iOS (the first function called when your app is launched) is, where it's defined, and what it does. But if I go now and search for \"_start function iOS\" on Google, I will not find a straight answer to this question. Google does return somewhat good results (the second search result contains some interesting information about it if you scroll down far enough), but it cannot give me a direct response because I asked the wrong question. I know today that what I should've done is ask it about details of how C programs are linked, but I didn't know this back then, so I couldn't have done that. AI does not have this problem. If you don't know what you're looking for, you can explain your situation to it and it will point you in the right direction: In this example, you can see that ChatGPT immediately pointed out that I asked the wrong question before attempting to explain it! Although the AI's answers won't always be 100% accurate, I find them to be accurate enough to allow me to use Google to find the rest of the information. Just like the previous case, this is not so much about having the AI do everything for me (which it can't), but rather allowing me to save time and get where I want faster. Use case 4: Asking questions that are too specific for Google Even if you know exactly what you're looking for, you may have difficulty using Google if your question is too specific. For example, you cannot search Google on \"how to implement X thing in Swift in my app that is using XYZ frameworks in X iOS version with dependency injection bridging an Obj-C type after the user logged in on my TODO list app using Apple Sign-in from Italy during a rainy day in October\". For cases like this, usually what you need to do is break your problem into multiple, more generic queries, open many tabs that each help you with a specific part of the problem, and then use all of that combined knowledge to come up with the actual answer to your question. AI excels at this. You can be as specific as you want and you'll get a relevant answer. Most coding questions fall into this category, although for these specifically nowadays I prefer using Cursor's code gen features directly as mentioned above. In this case, I could've probably found the answer I was looking for in Google by making a bunch of generic searches about C++ global constructors and good practices, opening a bunch of tabs, and summarizing everything I found. But by asking ChatGPT, I was able to save several hours of my time instead. Use case 5: I want FAST answers It has been getting harder and harder to get fast answers to your questions with Google. Today, it's very unlikely that the answer to a question will lie at the top of a page you've opened. As SEO optimization became more and more important for survival on the web, the amount of stuff you have to endure before getting to the actual content has increased significantly. There will be a lengthy introduction, a pause for sponsors, ten paragraphs about how the question reminds the author about a personal story of how their dog bodyslammed their grandma on Christmas, a call to action for the author's newsletter, some backstory on the question, and only then you'll get to the actual content. I find that there are many cases where this fluff is relevant and worth reading. But there are also many cases when I'm in a hurry and would much rather just get a straight answer to my question. This is also something that I find AI to be quite good at. It generally doesn't try to educate you on things you didn't ask, it just straight up answers your question. By asking follow-up questions regarding one or more things it mentioned in its answer, I can get all of the information I need to learn something new considerably faster than if I had used Google instead. Even though I still need to use Google to double-check if the AI didn't hallucinate particular pieces of information, this ability to quickly gather relevant information saves me an absurd amount of time.",
    "author": "Bruno Rocha",
    "published": "Tue, 15 Apr 2025 11:50:00 GMT+2",
    "image": "https://i.imgur.com/4u0M9kM.png",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "8b4d55f0-4ecf-4d54-9d61-dbf69837d47d",
    "title": "Things that did (and didn't) contribute to Burnout Buddy's success",
    "link": "https://swiftrocks.com/things-that-did-and-didnt-contribute-to-burnout-buddys-success",
    "description": "Back in 2022 I launched Burnout Buddy, and today the app has succeeded far beyond my expectations. Netting between $600 and $1000 each month as of writing, BB has been growing 100% organically with little to no effort on my part. In this post, I'd like to lay out exactly what I've done that I believe contributed (and didn't contribute) to this growth, serving as documentation and inspiration for the indie dev community out there. Things that helped Understanding ASO I cannot understate the value of having a good grasp of App Store Optimization (ASO). The case is simple: It doesn't matter how good your app is, if you don't get eyes on it, it will never succeed. ASO refers to being strategic about how you assemble your app's store listing (keywords, name, subtitle, description, screenshots, etc) so that it ranks well when people search for keywords related to your app. In many cases what you actually want to do is avoid popular keywords in the beginning, focusing on less popular ones where you have more of a fighting chance until you get \"popular\" enough that you can try challenging the real ones. How and when you ask for reviews also plays a big role here as reviews also affect your app's rank. I strongly recommend Appfigures for learning and applying ASO for your apps. The owner, Ariel, has posted many videos explaining different strategies you can take, and that's how I got to know about it. In my case, ASO was only time-intensive in the first few weeks following the app's launch. After it picked up some steam and became no.1 in a couple of important keywords, I was able to leave it alone and enjoy full organic growth ever since. I'm my app's primary user Most indie apps fail because they are trying to solve problems that don't exist. The devs come up with the solution first, and then try to find users who have a problem that match their solution. This rarely works. The easiest way to avoid this is to ignore other people and just focus on your own set of problems. If you can manage to build something that would make your own life better, certainly you'll find other people who will also appreciate it. In my case, I built Burnout Buddy because iOS's default Screen Time feature was too simple for me. I wanted to make more complex scenarios such as schedule or location based conditions, but iOS only allows you to setup simple time limits. You also can't do \"strict\" conditions where there's no way to disable the block once it goes into effect. I searched for other alternatives, but none of them were good enough for me. So I built my own! Once my problem was solved, I figured out that most likely there were others out there who could also make use of it. I made the app public with zero expectations, and sure enough, there were tons of other people with the same problem I had. Being my app's primary user also means that I'm perfectly positioned to know which features the app should and shouldn't have. I don't need things like user interviews, because again, I built this for myself. All I have to do is ask myself what I'd like the app to do, and the result is sure to also be a hit with others with the same problem the app aims to solve. I attribute Pieter Level's Make book for helping me understand this concept. It's also a great resource for learning more about indie development and how to create successful products in general! No backend, everything happens client-side Another decision that I've made that massively simplified things for me is that everything happens on the client. There are no accounts or backend, and I gather zero data from the users. This means I have no backend to manage, and most importantly, no monthly server costs. As long as Apple doesn't push iOS updates that break the APIs I use (unfortunately happens a lot), I can trust that everything is working as it should and focus my attention on other things. People seem to really appreciate this too, since many apps nowadays have accounts for no reason other than wanting to hoard data which is really shady. The app just works After the first couple of releases, I spent a good amount of time building a good suite of tests and architecting the app so that it would be easy to expand and make it even more testable. This means I very rarely have to worry about whether or not I'll push something that will fundamentally break the app. Having no backend-related code also greatly helped here. This doesn't mean that the app is bug-free (there are a bunch of SwiftUI issues I can't seem to solve, and Apple somehow manages to break their APIs on every iOS release as mentioned above), but when it comes to the core experience of the app, I can trust that everything works as it should. This saved a lot of testing / debugging time on my end and also made sure I almost never had to deal with support e-mails regarding broken features and such. I don't extort my users Burnout Buddy is a one-time $9.99 bucks purchase. For a long time it used to be $4.99 even. Why this matters? Because most alternatives are stupidly expensive subscriptions. Most of them also don't have backends and have even less features than BB, why the hell are these apps subscription-based??? Some people justify that subscriptions are necessary even for \"simple\" apps like BB because of things like recurring support work. While I can see the point, I also think there are other ways to tackle these issues. I for example created a FAQ support page, and that reduced 99.9% of the support requests. I'm not trying to extort my users and I believe this was a strong factor for the app's success. Things that didn't help It would be naive of me to claim that everything went right. I've made a couple of bad decisions that worked against the app's success, and I wanted to document them as well. Thinking I could make it big without marketing Like I mentioned in the ASO section, it doesn't matter how good your app is. You need to get the word out, otherwise it will just not work. There is a saying in tech that goes \"if you build something good, people will follow\". Whoever said this has absolutely never attempted to sell something. I'm as a tech nerd as it can get and I can safely say that when it comes to building businesses, marketing is a billion times more important than building the actual product! Unfortunately for me, I hate doing marketing work. I'm fine with putting a sponsorship section on this blog, but reaching out to journalists and hustling on X / LinkedIn is really not my thing. This means that while thankfully I was able to do just enough of it to get some nice results in the beginning, the app is destined to die a slow death as it drops in ranking in the App Store and other similar apps manage to get their word out better than me. Marketing is something you have to do constantly, but unfortunately for me it's something I just don't want to do, so there will always be a hard cap to how far I can go with any given project alone. Making the app too cheap This will sound weird because I mentioned above that not extorting my users was a positive. But allow me to clarify this. One thing I've learned the hard way is that you need to avoid cheapskates like the plague. This means people who expect nothing but the highest quality products, but at the same time are not willing to pay anything for it. You know when you see one because they behave like huge assholes and will do everything in their power to extract as much value from you as possible while giving nothing in return, much like the meme of a Karen screaming at the supermarket cashier because of some worthless coupon. When Burnout Buddy was $4.99, I was constantly having my support e-mail being spammed by such people. They would constantly aggressively complain about different app features and demand refunds, often threatening that they would download a different app if I didn't help them (...why would I care about that?). A lot of these reports didn't even make sense, they were clearly people just searching for excuses to be an asshole and get free stuff. It was such a waste of my time that I even briefly considered abandoning the project entirely / pulling it from the App Store just so I wouldn't have to deal with them anymore. It was only when I read someone complaining about the exact same problem on HackerNews that I realized what my issue was. It's not that giving support is a thankless job, it's that the app was too cheap. The cheapskates are attracted by free (or in this case, almost free) products. If you raise the price of your product just slightly, you can filter out these people without driving way the good (and kind) users. After doing just that, these bizarre e-mails completely vanished without resulting in any loss of revenue. While I of course still get support requests every now and then, they are now all very polite and helpful, which makes everything a breeze! In other words, the \"fail\" here is that I should've made the app cost $9.99 from the get-go to have filtered the cheapskates from the very beginning. Not gathering analytics This is an interesting one because it's both a good and a bad thing depending on how you look at it. I mentioned above that having no accounts was a good thing because it made things easier on my side and was appreciated by the users. But it also meant that I had no information regarding how users were using the app. This made things harder for me because 1) I couldn't determine which features were more popular / worth expanding upon (and which ones weren't), and 2) when people reported bugs, I had no easy way to trace their steps in order to quickly reproduce the issue (or to confirm they misunderstood the app / were doing something wrong). If I could go back, I would probably have gone for a solution that allowed me to gather analytics data for the above reasons. Using SwiftUI This is mostly out-of-topic for this post, so I'll keep it short. I decided to use SwiftUI for this project as a learning opportunity, and I sort of regret it. As mentioned in my SwiftUI vs UIKit post, SwiftUI is good for simple apps, but awful for more complex ones. As BB grew and became more intricate, SwiftUI became more and more of an issue. The app today is full of dirty hacks and visual bugs that are impossible to solve (as of writing) because they originate from SwiftUI itself, in ways that are impossible for me to control without dumping the entire framework.",
    "author": "Bruno Rocha",
    "published": "Thu, 23 Jan 2025 13:00:00 GMT+1",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "81bc5503-5403-40b8-8694-925ab13b75bb",
    "title": "320: Before the Barrier",
    "link": "http://relay.fm/radar/320",
    "description": "Expectations and preparations for WWDC 2025.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 05 Jun 2025 13:30:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar320.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "b9775134-86ba-4ddd-8523-c88a49e00b52",
    "title": "319: Unfreezing Your Brain",
    "link": "http://relay.fm/radar/319",
    "description": "Motivating ourselves to get back into coding after time away.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 22 May 2025 15:00:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar319.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "b61a4a53-5944-479a-9409-7b9cbe17f2fd",
    "title": "Syncing TipKit with CloudKit",
    "link": "https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/",
    "description": "Starting in iOS 18 you can sync the state of TipKit tips across devices with CloudKit. TipKit Tip State Apple introduced TipKit in iOS 17 as a consistent way to show in-context tips to users. TipKit keeps track of how often it displays tips, when it has invalidated tips, and the events/rules that control when it should show tips. Starting in iOS 18, you can opt-in to syncing the TipKit state across devices using CloudKit. That avoids showing the user the same tips on each of their devices. Syncing With CloudKit Enabling CloudKit sync for TipKit follows a similar process to enabling sync for Core Data. Select your App target in Xcode. In the Signing \u0026 Capabilities tab, use the + Capability button, double-click the iCloud capability and select CloudKit in the iCloud section. This also adds the Push Notifications capability: In the iCloud capability section, use the + button, below the list of containers, to add a container identifier for the TipKit datastore: Use a reverse domain name to create the identifier, ending with “.tips”. Xcode automatically includes the “iCloud” prefix. The new container can take a few seconds to show up in the iCloud console. Xcode shows the identifier in red until it’s ready: Repeat the process to add the Background Modes capability to your App target and enable the Remote notifcations option: TipKit does not sync to CloudKit by default. You must enable the CloudKit container when configuring the Tips datastore: try Tips.configure([ .cloudKitContainer(.automatic) ]) Note: The .automatic option uses the first container in your app’s entitlements that ends with “.tips”. You can override the automatic behaviour by passing an identifier: try Tips.configure([ .cloudKitContainer(.named(\"iCloud.com.apple.myapp.tips\")) ]) Core Data Container Identifier Be careful if you’re already syncing a Core Data/SwiftData database with CloudKit. By default, NSPersistentCloudKitContainer looks for the first iCloud Container identifier in the App’s entitlements file. If you’re not careful you may have listed your TipKit identifier first and your Core Data stack can end up trying to use it. Apple recommends you use a separate container for syncing tips. As a workaround, make sure to list your Core Data/SwiftData identifier first in the entitlements file: Alternatively you can explicitly set the container identifier before loading the persistent store when creating your Core Data stack: storeDescription.cloudKitContainerOptions = NSPersistentCloudKitContainerOptions( containerIdentifier: \"com.useyourloaf.myapp\") Learn More WWDC24 Customize feature discovery with TipKit One More Thing If you’re working with UIKit and want to brush up your layout skills make sure to grab a copy of my book Modern Auto Layout. It’s 20% off in the WWDC25 sale!. Syncing TipKit with CloudKit was originally posted 02 Jun 2025 on useyourloaf.com. WWDC25 Sale! Save 20% off Modern Auto Layout",
    "author": "",
    "published": "Mon, 02 Jun 2025 11:43:39 +0100",
    "image": "https://useyourloaf.com/blog/syncing-tipkit-with-cloudkit/001.png",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "f6a646f8-39a7-4836-b047-64b59a804dc6",
    "title": "SwiftUI Picker With Optional Selection",
    "link": "https://useyourloaf.com/blog/swiftui-picker-with-optional-selection/",
    "description": "How do you create a SwiftUI picker that works with optional selection so that not picking a value is possible? SwiftUI Picker A SwiftUI picker expects a binding to a selection. For example, suppose I have a project model that is Identifiable: struct Project: Identifiable { let id = UUID() var name: String ... } To pick a single project from a store of projects: struct ProjectPicker: View { @Binding var project: Project.ID @Environment(ProjectStore.self) private var store var body: some View { Picker(selection: $project) { ForEach(store.projects) { project in Text(project.name) } } label: { Text(\"Project\") } } } The ForEach automatically applies a tag to each Text view using the id of the project. Selecting an item in the picker sets the pickers binding to the identifier of the item. Here’s how that looks when part of a Form to create an item in a project: Optional Selection Sometimes I need a picker to work with an optional binding. Either because I don’t yet have a selection or because not selecting an item is also a valid choice: struct ProjectPicker: View { @Binding var project: Project.ID? ... } Apple provides an example on how to make this work in the documentation for the tag modifier. We need to manually tag each of the picker views with an optional identifier matching the optional type of the picker selection. The tag modifier has a parameter to indicate you want to make it optional: Text(project.name) .tag(project.id, includeOptional: true) Since the includeOptional parameter defaults to true it’s enough to tag the views: Text(project.name) .tag(project.id) Finally, we can also include a None option for when no project is selected. Note we need to cast nil as an optional project ID: Text(\"None\") .tag(nil as Project.ID?) The full project picker with optional selection: struct ProjectPicker: View { @Binding var project: Project.ID? @Environment(ProjectStore.self) private var store var body: some View { Picker(selection: $project) { Text(\"None\") .tag(nil as Project.ID?) ForEach(store.projects) { project in Text(project.name) .tag(project.id) } } label: { Text(\"Project\") } } } SwiftUI Picker With Optional Selection was originally posted 12 May 2025 on useyourloaf.com. WWDC25 Sale! Save 20% off Modern Auto Layout",
    "author": "",
    "published": "Mon, 12 May 2025 11:02:38 +0100",
    "image": "https://useyourloaf.com/blog/swiftui-picker-with-optional-selection/001.png",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "aa31b12f-4dd3-4f6d-97b6-ccf719b20fc2",
    "title": "Retirement Day",
    "link": "https://inessential.com/2025/06/06/retirement-day.html",
    "description": "I wrote in my love letter to my colleagues at Audible that retirement is coming up — and now it’s here. Today’s the day! I’ve attended my last meetings. I’ve said my goodbyes. My laptop’s ready to ship back to Audible HQ. * * * I started working in 1984, while in high school, busing tables part time at Schaefers Canal House in Chesapeake City, MD. And I stopped working this day in 2025, almost 41 years later, as a senior engineer (which is surprisingly a lot like busing tables — lots of cleanup and setting the table just right for the customers to have a great time). Along the way I worked on, among other apps, Userland Frontier, NetNewsWire, MarsEdit, Glassboard, Vesper, OmniFocus, OmniOutliner, and Audible. * * * My immediate plan — Exhale! Breathe. Enjoy a steak. Watch WWDC from the comfort of home next week. Get back to work on NetNewsWire. 🌲",
    "author": "",
    "published": "Fri, 06 Jun 2025 11:20:46 -0700",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "88e04d5a-5c64-4be1-af27-4962ea8534bc",
    "title": "Retirement and NetNewsWire",
    "link": "https://inessential.com/2025/05/24/retirement_and_netnewswire.html",
    "description": "To answer some questions people have asked me about my impending retirement… What does it mean for NetNewsWire? Good things! I’m not retiring from writing apps — which means I’ll have a lot more time for working on NetNewsWire. It’s been 15 years since the last time I could work on NetNewsWire during weekdays (as opposed to just nights and weekends), and I’m super-psyched for this. Will you work on any other apps? Yes. I have several ideas for other apps I’d like to work on, and have made a little progress on one of them. They will all be free and open source. I have no plans to create apps for money. (I’ll be retired — not working for money anymore is the point.) Will you be taking a big trip right after retiring? Every time this comes up, I joke that the first thing I’ll be doing is sleeping. Forty years of work is a long time, and I’ve earned a long nap. We do have some travel plans, but no big trips yet. We will. There’s so much of the world we want to see! My actual first week of retirement will be taken up by WWDC. I won’t be there — I’ll be at home watching the videos like most everyone else. Only this time I won’t have to think about how the changes will affect things at work. Do you have any other hobbies or plans? Are you getting into woodworking? Pizza-making? Yes to other hobbies and plans, though probably not woodworking or pizza (but never say never — those are pretty tempting ideas!). Making apps is important to me — contributing to the public stack is how I can best use my abilities to make the world better — but it’s also not the only thing. I have more ideas than time, which is a good problem to have, and once I have some space to think and feel I’ll be able to start picking and get to work. Will you be blogging more? I hope so! The hard part is, after 25 years, finding things to say that I haven’t already said. Maybe I’ll just decide it’s okay to repeat myself in new ways. 🐥",
    "author": "",
    "published": "Sat, 24 May 2025 11:29:44 -0700",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "b6227f13-ce98-4292-8da3-9c6b8a120662",
    "title": "Solar Powered Birdhouse",
    "link": "https://atomicbird.com/blog/birdhouse-solar-power/",
    "description": "In my last couple of posts I’ve talked about the hardware and software behind my birdhouse camera project. I haven’t previously covered how I’m giving it all enough power to operate, and therein lies a tale. No Power? No Problem If I had a power outlet located anywhere near the bird house, this would have been easy. Pretty much any micro-USB power adapter would plug into the Raspberry Pi, and I’d be set.",
    "author": "",
    "published": "Thu, 19 May 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "cabdee90-669f-4ced-a22c-04ff275a55b7",
    "title": "Raspberry Pi Birdhouse Software",
    "link": "https://atomicbird.com/blog/birdhouse-software/",
    "description": "In my last post I went over the components of the bird house camera I set up this year to get a better look at the local black-capped chickadees. Today I’ll talk about the software that makes it work. Initial Setup Being relatively new to Raspberry Pi, I started off with a full install of Raspbian Deskop. It’s more than I need, since I won’t have anything like a desktop setup, but with a 64GB SD card I wasn’t concerned about the space.",
    "author": "",
    "published": "Mon, 09 May 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  }
]
