{
  "id": "e70d0844-2fec-440f-a1e1-41b79db868ac",
  "title": "How to Use Zero-Width Characters to Hide Secret Messages in Text (\u0026 Even Reveal Leaks)",
  "link": "https://null-byte.wonderhowto.com/how-to/use-zero-width-characters-hide-secret-messages-text-even-reveal-leaks-0198692",
  "description": "You may be familiar with image-based or audio-based steganography, the art of hiding messages or code inside of pictures, but that's not the only way to conceal secret communications. With zero-width characters, we can use text-based steganography to stash hidden information inside of plain text, and we can even figure out who's leaking documents online.Image- and audio-based steganography has been covered severaltimeson Null Byte, which involves changing the least significant digit of individual pixels on a photo or audio file. While plain text characters don't have a least significant digit that we can manipulate in the same fashion, we can still use Unicode to our advantage. Unicode is the standardized encoding format for text, specifically, UTF-8, that most web browsers use for text.Don't Miss: How to Hide Payloads Inside Photo MetadataBecause Unicode needs to support almost all written languages in the world, there are some counterintuitive characters such as zero-width...more",
  "author": "Hoid",
  "published": "Fri, 27 Dec 2024 19:11:23 GMT",
  "source": "https://www.wonderhowto.com/rss.xml",
  "categories": null,
  "byline": "By Hoid",
  "length": 24006,
  "excerpt": "You may be familiar with image-based or audio-based steganography, the art of hiding messages or code inside of pic ...",
  "siteName": "Null Byte",
  "favicon": "",
  "text": "You may be familiar with image-based or audio-based steganography, the art of hiding messages or code inside of pictures, but that's not the only way to conceal secret communications. With zero-width characters, we can use text-based steganography to stash hidden information inside of plain text, and we can even figure out who's leaking documents online.Image- and audio-based steganography has been covered severaltimeson Null Byte, which involves changing the least significant digit of individual pixels on a photo or audio file. While plain text characters don't have a least significant digit that we can manipulate in the same fashion, we can still use Unicode to our advantage. Unicode is the standardized encoding format for text, specifically, UTF-8, that most web browsers use for text.Don't Miss: How to Hide Payloads Inside Photo MetadataBecause Unicode needs to support almost all written languages in the world, there are some counterintuitive characters such as zero-width non-joiners and zero-width spaces. For example, the zero-width non-joiner is used in languages such as Persian, where it's needed to display the correct typographic form of words.In that image, notice how the line is no longer continuous? That's what is meant by a non-joiner. However, for our purposes, the most important part about these character types is that they're not needed in English and aren't normally displayed.That fact allows us to pick two arbitrary zero-width characters and designate them as one and zero. We can then hide any message in plain text by splitting it into single characters and encoding it in binary with zero-width characters acting as the ones and zeros. The best practice is to add the zero-width binary code in the spaces between words. Otherwise, spellcheckers tend to think the word is misspelled.Plain ‌﻿​﻿‌﻿​﻿‌﻿​﻿​﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿​﻿​﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿‌﻿‌﻿‌﻿​﻿‍﻿‌﻿‌﻿​﻿‌﻿​﻿​﻿‌﻿‌﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿​﻿​﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿‌﻿‌﻿‌﻿​﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿​﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿​﻿​﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿‌﻿​﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿‌﻿‌﻿‌﻿​﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿​﻿​﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿​﻿​﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿​﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿‌﻿‌﻿‌﻿​﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿‌﻿​﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿​﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿​﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿‌﻿​﻿​﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿​﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿‌﻿​﻿​﻿‍﻿‌﻿‌﻿​﻿​﻿​﻿​﻿​﻿​﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿​﻿‍﻿‌﻿‌﻿​﻿​﻿​﻿​﻿​﻿​﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿​text, nothing to see hereTo see the concept in action, copy the text \"plain text\" below and paste it an online zero-width detention tool to see what it says.What Can I Use It For?The ability to hide messages in otherwise ordinary-looking text is useful on its own, but what makes the technique really nifty is the fact that it also survives reformatting and goes wherever the text is copied and pasted. The hidden characters don't even show up in text editors like nano.The most apparent use of the technique is as a means of covert communication. You can use the classic spy trick of publishing an article or some type of text document in a public space. For example, you could hide a secret message in a Craigslist ad, then have an individual recipient or group of people periodically check local Craigslist ads for a specific keyword. They would know to check the description for hidden zero-width character messages.It's a beneficial approach to communicating when it's imperative that the two individuals not be seen having direct contact.Don't Miss: How to Easily Generate Hundreds of Phishing DomainsA slightly more sophisticated implementation would be the age-old canary trap. If you've ever read any mystery novel, you may be familiar with how the trap works. When you're suspicious that individuals are leaking information, you go to each person and give them slightly different info, and then you wait for that info to appear where it shouldn't be. Based on the version, you'd know which individual leaked the info.Congressional aides are known to leak data by using intentionally misspelled words or other small grammatical errors in documents provided to other offices and lobbyists. The problem with doing that, though, is that if anyone can get a hold of two different versions, they immediately know what you're up to. That's where zero-width characters can come to the rescue.By using the zero-width characters, the average user is far less likely to notice, even if they do get a hold of two versions of the document or text. And don't think that someone could get off scot-free merely by taking a screenshot of the text or photocopying it on a printer. Both of those come with their own challenges, which could be even more damning, such as the EXIF data that point right back to your device and the microdots employed by many printers that uniquely identify pages printed on them.Lastly, zero-width characters can be used to change URLs. Unfortunately, you can't register a domain name with zero-width characters in it due to ICANN rules. However, it can still be quite useful in homograph attacks on a local network. It can also just be used to break a URL. Just look at my GitHub URLs below.https://github.com/holdTheDoorHoid https://github.com/hold​TheDoorHoidThey may look the same, but the second one has a zero-width character after \"hold,\" which prevents it from working correctly.Now, let's see how to start actually using the technique.Using Real Encryption for Extra SecurityI cannot stress this enough: encoding a message into zero-width binary code is not sufficient encryption if you want to secure your messages. Anyone with the right program can easily decipher your messages without another form of encryption. The most basic thing you can do is alter the source code of whichever program you are using to use different zero-width characters as the one and zero. I'll go over how to do so in a later step.But what you should really be using is a symmetric or asymmetric encryption scheme. An asymmetric encryption scheme like PGP will work best if only one person is the intended recipient. However, you may want to use symmetric encryption if the messages are designed for a group of people. Either way, you can then share a key beforehand and have a much more secure form of communicating.If you chose to use PGP, make sure to read our guide to using PGP. And if you select the symmetric route, check out how to use EncryptPad.More Info: Use PGP for Encrypting Emails on Windows, Mac \u0026 LinuxMore Info: Encrypt Your Notes, Photos \u0026 Archives with EncryptPadMy favorite tactic is based on the theory that no one searches for a secret compartment within a secret compartment. What do I mean by that? Instead of using PGP to encrypt a zero-width message, use zero-width characters within your PGP encrypted emails as an extra layer of verification.You could use this in two ways. The first way would be to have a generic email body with the actual email being hidden within zero-width characters. The second approach would be to hide a particular codeword in the first sentence, then have the person responding use that codeword or a response codeword in their first sentence. I like the second tactic because if anyone does get a hold of the PGP key of the person you're corresponding with, it's highly unlikely that they'll think to look for the zero-width characters, and you'll immediately know they're compromised when they respond without the code.Create Zero-Width Messages on the WebTo get started sending zero-width messages, open up the Steganographr webpage and paste your (preferably encrypted) message in the \"Private Message\" field and a generic or otherwise benign message in the \"Public Message\" field, then click \"Steganographize.\"You'll then be able to copy the new message and do with it as you will. As long as it is copied and pasted, it will still have the hidden message intact.When the message needs to be revealed, you can use the Steganographr webpage for the too. On the site, scroll to the bottom, paste the text into the \"Reveal Private Message\" field, and click \"Desteganographize.\"However, one problem with the online method is that we have to trust that the website isn't saving these messages or doing anything else nefarious. Luckily, the source code is provided for Steganographr, so we can simply copy it and host it on our own website if we want to go the extra mile.Additionally, the source code allows us to edit it. The most useful thing to edit is which characters are used to represent spaces, zeros, and ones in our zero-width binary. To make the change, look for the \"bin2hidden\" and \"hidden2bin\" definitions; we just need to change the hex values to the new characters we want.// Convert the ones, zeros, and spaces of the hidden binary data to their respective zero-width characters function bin2hidden($str) { $str = str_replace(' ', \"\\xE2\\x81\\xA0\", $str); // Unicode Character 'WORD JOINER' (U+2060) 0xE2 0x81 0xA0 $str = str_replace('0', \"\\xE2\\x80\\x8B\", $str); // Unicode Character 'ZERO WIDTH SPACE' (U+200B) 0xE2 0x80 0x8B $str = str_replace('1', \"\\xE2\\x80\\x8C\", $str); // Unicode Character 'ZERO WIDTH NON-JOINER' (U+200C) 0xE2 0x80 0x8C return $str; } // Convert zero-width characters to hidden binary data function hidden2bin($str) { $str = str_replace(\"\\xE2\\x81\\xA0\", ' ', $str); // Unicode Character 'WORD JOINER' (U+2060) 0xE2 0x81 0xA0 $str = str_replace(\"\\xE2\\x80\\x8B\", '0', $str); // Unicode Character 'ZERO WIDTH SPACE' (U+200B) 0xE2 0x80 0x8B $str = str_replace(\"\\xE2\\x80\\x8C\", '1', $str); // Unicode Character 'ZERO WIDTH NON-JOINER' (U+200C) 0xE2 0x80 0x8C return $str; }Below is a list of useful zero-width characters and their hex codes.MONGOLIAN VOWEL SEPARATOR \\xE1 \\xA0 \\x8EZERO-WIDTH SPACE \\xE2 \\x80 \\x8BZERO-WIDTH NON-JOINER \\xE2 \\x80 \\x8CZERO-WIDTH JOINER \\xE2 \\x80 \\x8DLEFT-TO-RIGHT MARK \\xE2 \\x80 \\x8ERIGHT-TO-LEFT MARK \\xE2 \\x80 \\x8FZERO-WIDTH NO-BREAK SPACE \\xEF \\xBB \\xBFFor example, to change from a zero-width non-joiner to a Mongolian vowel separator, we would replace the hex code like so:str_replace('1', \"\\xE1\\xA0\\x8E\", $str)Be sure to change the characters' hex codes the same way in both definitions. That way, it can adequately encode and decode.Create Zero-Width Messages from the Command LineOpening up a webpage every time you want to send and decode a message can get annoying, particularly if you're doing it often enough. Luckily, someone has already created a tool on GitHub, called ZWFP, for encoding zero-width messages, and it works from the command line for extra hacker coolness and convenience.One thing to note, however, is that you won't be able to change the characters being used for the zero-width binary easily. It isn't really anything to worry about as long as you encrypt your message beforehand. But you will not be able to have one person encoding using the website and one decoding using the command line or vice-versa. They use different characters, so be sure that you're using the same one to encode and decode.To start, make sure you have the Go programming language installed on your computer. If you don't have it already, you can visit Go's downloads page to see its options for all major operating systems. The site also has detailed install instructions, which you should not skip if it's the first time using Go, as you need to change the PATH environment variable.Don't Miss: Punchabunch Just Made SSH Local Forwarding Stupid EasyWith Go installed, you can fetch the GitHub repository for ZWFP from your working Go directory.~/go$ go get -u github.com/vedhavyas/zwfp/cmd/zwfp/...The files are so small they'll be done downloading practically before you even press Enter. There will be no indication that you have it except a new command prompt, but it should be there. Now, move to the deepest \"zwfp\" folder, then build the tool.~/go$ cd /go/src/github.com/vedhavyas/zwfp/cmd/zwfp ~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ go buildAgain, nothing will say it worked except you'll get a new command prompt. From here, let's run the test tool.~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ go test ./... ? github.com/vedhavyas/zwfp/cmd/zwfp [no test files]Now, let's see how to use ZWFP. Unfortunately, its usage notes are pretty vague, so let's dive a little deeper into the correct way to use the tool.~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ ./zwfp Usage: ./zwfp CoverText Payload Embeds Payload into CoverText ./zwfp SteganoText Extracts Payload from SteganoTextFirst, let's encode a message with ZWFP using the two arguments. There's the plain-looking cover text, which is what everyone will see, then the hidden message. If we just want \"CoverText\" to be the cover text, and \"Payload\" to be the hidden message, it'd look like:~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ ./zwfp CoverText Payload CoverTextHowever, you'll need to save it inside a file, which you would likely want to do anyway. So, let's try a different cover text and payload out.Let's go with \"You see this right?\" for the cover and \"But this is a hidden message in that text.\" as the payload. (If you're using more than one word for each argument, the sets need to be in quotation marks.) Then, let's save it to a new file in our /Desktop directory. For our example, that would be a new \"secret.txt\" file.~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ ./zwfp \"You see this right?\" \"But this is a hidden message in that text.\" \u003e /home/kali/Desktop/secret.txtTo see what the text file looks like, let's use nano to view it.~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ nano /home/kali/Desktop/secret.txt GNU nano 4.9.2 /home/kali/Desktop/secret.txt You see this right? [ Read 1 line ] ^G Get Help ^O Write Out ^W Where Is ^K Cut Text ^J Justify ^C Cur Pos ^X Exit ^R Read File ^\\ Replace ^U Paste Text ^T To Spell ^_ Go To LineGreat, the cover text is clearly visible. Now, let's try to see what's going on underneath the cover text. For that, we can use vim to see the hidden characters. As you can see below, it's a lot different than what nano showed up. Type :qa and hit Enter to quit vim.Don't Miss: An Intro to Vim, the Unix Text Editor Every Hacker Should Be Familiar WithThen, what ZWFP's usage doesn't tell you is how to decode the message. To do so, we'll cat the file, then use xargs -0 to view the hidden contents.~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ cat /home/kali/Desktop/secret.txt | xargs -0 ./zwfp Cover Text: You see this right? Payload: But this is a hidden message in that text.To understand what xargs -0 did, let's view parts of xargs man page. The below output is condensed to just what you need to see about xargs and the -0 flag.~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ man xargs XARGS(1) General Commands Manual XARGS(1) NAME xargs - build and execute command lines from standard input SYNOPSIS xargs [options] [command [initial-arguments]] DESCRIPTION This manual page documents the GNU version of xargs. xargs reads items from the standard input, delimited by blanks (which can be protected with double or single quotes or a backslash) or newlines, and executes the command (default is /bin/echo) one or more times with any initial-argu‐ ments followed by items read from standard input. Blank lines on the standard input are ignored. The command line for command is built up until it reaches a system-de‐ fined limit (unless the -n and -L options are used). The specified com‐ mand will be invoked as many times as necessary to use up the list of in‐ put items. In general, there will be many fewer invocations of command than there were items in the input. This will normally have significant performance benefits. Some commands can usefully be executed in parallel too; see the -P option. Because Unix filenames can contain blanks and newlines, this default be‐ haviour is often problematic; filenames containing blanks and/or newlines are incorrectly processed by xargs. In these situations it is better to use the -0 option, which prevents such problems. When using this option you will need to ensure that the program which produces the input for xargs also uses a null character as a separator. If that program is GNU find for example, the -print0 option does this for you. If any invocation of the command exits with a status of 255, xargs will stop immediately without reading any further input. An error message is issued on stderr when this happens. OPTIONS -0, --null Input items are terminated by a null character instead of by whitespace, and the quotes and backslash are not special (every character is taken literally). Disables the end of file string, which is treated like any other argument. Useful when input items might contain white space, quote marks, or backslashes. The GNU find -print0 option produces input suitable for this mode.Revealing Zero-Width Characters with a Chrome ExtensionIf you want to defend yourself against zero-width characters, the best way to do so is with a simple Chrome browser extension. The extension we'll be using will replace zero-width characters with various emojis. Go to the Chrome Web Store and add \"Replace zero-width characters with emojis\" to your browser. After that, restart Chrome.Unfortunately, the extension won't run automatically, so you'll need to check each page when you're suspicious or curious. To run the extension, click its button (an \"R\" inside a gray square) to the right of your browser bar, and then click \"Show me the $!\"The tool makes it fairly obvious when a document or webpage in Chrome has hidden messages using zero-width characters. See all of those emojis below. Those aren't there on the foreground, but they show that there are hidden characters in the background.Interestingly, since it does a one-to-one replacement of the zero-width characters to various emojis, you can see the binary nature in emoji form. If you want to explore or modify the tool, you can find the source code on GitHub.As useful as an extension can be, don't let it lure you into a false sense of security. It only detects zero-width characters within a webpage or document and not those that might be lurking in the URL.Copying Text Without the Zero-Width CharactersIf the Chrome extension doesn't work for you, or you want a more powerful tool that will allow you to remove the zero-width characters in a document, then you'll need to use a website called Diffchecker.Diffchecker is a tool designed to highlight the differences between two documents that are similar, which makes it a potent tool for detecting the classic canary trap. Since not everyone knows about zero-width characters, people will sometimes try to use extra spaces and intentional misspellings to achieve the same effect. Diffchecker will both highlight these differences, if you have two versions of the document, and reveal zero-width characters as dots if you have just one version.Simply open the website and copy and paste the text into the \"Original Text\" field. If there are any zero-width characters in the document, they'll start showing up as dots, usually grouped if it's some kind of message, like a username. If you have a second version, paste in the \"Changed Text\" field, then click \"Find Difference\" at the bottom of the page. Diffchecker is also perfect for finding zero-width characters in URLs and should be a go-to when investigating suspicious domains.If you find zero-width characters, removing them is a simple matter of highlighting the block of dots and pressing Backspace or Delete. Now, you can then safely copy the text. As you can see below, decryptors will no longer be able to find a hidden message.If you do happen to get hold of two versions the same document where they're trying to use the canary trap, It's possible to use the other version as a scapegoat and point the finger at its owner so that the document can't be traced back to you.If you prefer something on your local computer, then you can use a program called Notepad++, which can be installed on Kali and other Linux distros. In Notepad++, copy and paste the text in, then on the top bar, click \"Encoding,\" then \"Encode in ANSI.\"Confidential Announcement: â€Œï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€‹This is some confidential text that you really shouldn't be sharing anywhere else.By changing the encoding of the document, you essentially break the zero-width characters, which rely on Unicode and UTF-8. The zero-width characters now look like complete gibberish and can easily be found when reading a document.Zero-Width Characters Are Great for Hidden MessagesZero-width characters are a useful tool to have. However, it's essential never to forget their limitations. If you're using them as a covert means of communication, you should always remember to encrypt it. Otherwise, you're relying purely on the fact that no one will look for the hidden message.And if you're using it as a means of flushing out leakers, it may not work if they're savvy and attempt to use screenshots or physically print out the documents. However, those methods also bring their own risks, and when employed all together, you still might be able to catch the culprit.Thanks for reading! If you have any questions, you can ask here or on Twitter @The_Hoid.Don't Miss: How to Use Private Encrypted Messaging Over TorCover image by buntewelt/123RF (edited); Screenshots by Hoid/Null Byte.",
  "image": "https://assets.content.technologyadvice.com/637263493835297420_24844f6006.webp",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"contents\" itemprop=\"articleBody\"\u003e \u003cp\u003eYou may be familiar with \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/steganography-hide-secret-data-inside-image-audio-file-seconds-0180936/\"\u003eimage-based\u003c/a\u003e or \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/hacks-mr-robot-hide-data-audio-files-0164136/\"\u003eaudio-based steganography\u003c/a\u003e, the art of hiding messages or code inside of pictures, but that\u0026#39;s not the only way to conceal secret communications. With zero-width characters, we can use text-based steganography to stash hidden information inside of plain text, and we can even figure out who\u0026#39;s leaking documents online.\u003c/p\u003e\u003cp\u003eImage- and audio-based steganography has been covered \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/steganography-hide-secret-data-inside-image-audio-file-seconds-0180936/\"\u003eseveral\u003c/a\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/introduction-steganography-its-uses-0155310/\"\u003etimes\u003c/a\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/hacks-mr-robot-hide-data-audio-files-0164136/\"\u003eon Null Byte\u003c/a\u003e, which involves changing the least significant digit of individual pixels on a photo or audio file. While plain text characters don\u0026#39;t have a least significant digit that we can manipulate in the same fashion, we can still use \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://unicode.org/standard/WhatIsUnicode.html\"\u003eUnicode\u003c/a\u003e to our advantage. Unicode is the standardized encoding format for text, specifically, UTF-8, that most web browsers use for text.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003cstrong\u003eDon\u0026#39;t Miss: \u003c/strong\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/hacking-macos-hide-payloads-inside-photo-metadata-0196815/\"\u003e\u003cstrong\u003eHow to Hide Payloads Inside Photo Metadata\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eBecause Unicode needs to support almost all written languages in the world, there are some counterintuitive characters such as \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://en.wikipedia.org/wiki/Zero-width_non-joiner\"\u003ezero-width non-joiners\u003c/a\u003e and \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://en.wikipedia.org/wiki/Zero-width_space\"\u003ezero-width spaces\u003c/a\u003e. For example, the zero-width non-joiner is used in languages such as Persian, where it\u0026#39;s needed to display the correct typographic form of words.\u003c/p\u003e\u003castro-island uid=\"ltLL1\" prefix=\"v6\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/CarouselArticleImages.MVRQ0M-e.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;images\u0026#34;:[1,[[0,\u0026#34;\u0026lt;img src=\\\u0026#34;https://assets.content.technologyadvice.com/637218414490213484_a32a90359b.webp\\\u0026#34; alt=\\\u0026#34;637218414490213484.jpg\\\u0026#34; srcset=\\\u0026#34;https://assets.content.technologyadvice.com/xsmall_637218414490213484_a32a90359b.webp 64w, https://assets.content.technologyadvice.com/thumbnail_637218414490213484_a32a90359b.webp 245w, https://assets.content.technologyadvice.com/small_637218414490213484_a32a90359b.webp 500w, https://assets.content.technologyadvice.com/medium_637218414490213484_a32a90359b.webp 750w, https://assets.content.technologyadvice.com/large_637218414490213484_a32a90359b.webp 1000w, https://assets.content.technologyadvice.com/xlarge_637218414490213484_a32a90359b.webp 1920w\\\u0026#34; sizes=\\\u0026#34;(min-width: 768px) 80vw, 100vw\\\u0026#34; data-id=\\\u0026#34;382888\\\u0026#34;\u0026gt;\u0026#34;]]]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;CarouselArticleImages\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003cp\u003eIn that image, notice how the line is no longer continuous? That\u0026#39;s what is meant by a non-joiner. However, for our purposes, the most important part about these character types is that they\u0026#39;re not needed in English and aren\u0026#39;t normally displayed.\u003c/p\u003e\u003cp\u003eThat fact allows us to pick two arbitrary zero-width characters and designate them as one and zero. We can then hide any message in plain text by splitting it into single characters and encoding it in binary with zero-width characters acting as the ones and zeros. The best practice is to add the zero-width binary code in the spaces between words. Otherwise, spellcheckers tend to think the word is misspelled.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ePlain ‌﻿​﻿‌﻿​﻿‌﻿​﻿​﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿​﻿​﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿‌﻿‌﻿‌﻿​﻿‍﻿‌﻿‌﻿​﻿‌﻿​﻿​﻿‌﻿‌﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿​﻿​﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿‌﻿‌﻿‌﻿​﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿​﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿​﻿​﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿‌﻿​﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿‌﻿‌﻿‌﻿​﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿​﻿​﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿​﻿​﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿​﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿‌﻿‌﻿‌﻿​﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿‌﻿​﻿​﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿​﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿​﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿‌﻿​﻿​﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿‌﻿‍﻿‌﻿​﻿​﻿‌﻿​﻿‌﻿‌﻿​﻿‍﻿‌﻿​﻿​﻿​﻿‌﻿‌﻿​﻿​﻿‍﻿‌﻿‌﻿​﻿​﻿​﻿​﻿​﻿​﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿​﻿‍﻿‌﻿‌﻿​﻿​﻿​﻿​﻿​﻿​﻿‍﻿‌﻿‌﻿​﻿‌﻿‌﻿‌﻿‌﻿​text, nothing to see here\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo see the concept in action, copy the text \u0026#34;plain text\u0026#34; below and paste it an \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://www.umpox.com/zero-width-detection/\"\u003eonline zero-width detention tool\u003c/a\u003e to see what it says.\u003c/p\u003e\u003ch2\u003eWhat Can I Use It For?\u003c/h2\u003e\u003cp\u003eThe ability to hide messages in otherwise ordinary-looking text is useful on its own, but what makes the technique really nifty is the fact that it also survives reformatting and goes wherever the text is copied and pasted. The hidden characters don\u0026#39;t even show up in text editors like nano.\u003c/p\u003e\u003cp\u003eThe most apparent use of the technique is as a means of covert communication. You can use the classic spy trick of publishing an article or some type of text document in a public space. For example, you could hide a secret message in a Craigslist ad, then have an individual recipient or group of people periodically check local Craigslist ads for a specific keyword. They would know to check the description for hidden zero-width character messages.\u003c/p\u003e\u003cp\u003eIt\u0026#39;s a beneficial approach to communicating when it\u0026#39;s imperative that the two individuals not be seen having direct contact.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003cstrong\u003eDon\u0026#39;t Miss: \u003c/strong\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/easily-generate-hundreds-phishing-domains-0184206/\"\u003e\u003cstrong\u003eHow to Easily Generate Hundreds of Phishing Domains\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eA slightly more sophisticated implementation would be the age-old canary trap. If you\u0026#39;ve ever read any mystery novel, you may be familiar with how the trap works. When you\u0026#39;re suspicious that individuals are leaking information, you go to each person and give them slightly different info, and then you wait for that info to appear where it shouldn\u0026#39;t be. Based on the version, you\u0026#39;d know which individual leaked the info.\u003c/p\u003e\u003cp\u003eCongressional aides are known to leak data by using intentionally misspelled words or other small grammatical errors in documents provided to other offices and lobbyists. The problem with doing that, though, is that if anyone can get a hold of two different versions, they immediately know what you\u0026#39;re up to. That\u0026#39;s where zero-width characters can come to the rescue.\u003c/p\u003e\u003cp\u003eBy using the zero-width characters, the average user is far less likely to notice, even if they do get a hold of two versions of the document or text. And don\u0026#39;t think that someone could get off scot-free merely by taking a screenshot of the text or photocopying it on a printer. Both of those come with their own challenges, which could be even more damning, such as the \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/news/finding-hidden-metadata-images-oh-possibilities-0133701/\"\u003eEXIF data\u003c/a\u003e that point right back to your device and the \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://www.snopes.com/fact-check/household-printers-tracking-code/\"\u003emicrodots employed by many printers\u003c/a\u003e that uniquely identify pages printed on them.\u003c/p\u003e\u003cp\u003eLastly, zero-width characters can be used to change URLs. Unfortunately, you can\u0026#39;t register a domain name with zero-width characters in it due to \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://en.wikipedia.org/wiki/ICANN\"\u003eICANN rules\u003c/a\u003e. However, it can still be quite useful in \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/easily-generate-hundreds-phishing-domains-0184206/\"\u003ehomograph attacks\u003c/a\u003e on a local network. It can also just be used to break a URL. Just look at my GitHub URLs below.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ehttps://github.com/holdTheDoorHoid\nhttps://github.com/hold​TheDoorHoid\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThey may look the same, but the second one has a zero-width character after \u0026#34;hold,\u0026#34; which prevents it from working correctly.\u003c/p\u003e\u003castro-island uid=\"1fHRo2\" prefix=\"v7\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/CarouselArticleImages.MVRQ0M-e.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;images\u0026#34;:[1,[[0,\u0026#34;\u0026lt;img src=\\\u0026#34;https://assets.content.technologyadvice.com/637262744750610344_4d8b1b1143.webp\\\u0026#34; alt=\\\u0026#34;637262744750610344.jpg\\\u0026#34; srcset=\\\u0026#34;https://assets.content.technologyadvice.com/xsmall_637262744750610344_4d8b1b1143.webp 43w, https://assets.content.technologyadvice.com/thumbnail_637262744750610344_4d8b1b1143.webp 105w, https://assets.content.technologyadvice.com/small_637262744750610344_4d8b1b1143.webp 337w, https://assets.content.technologyadvice.com/medium_637262744750610344_4d8b1b1143.webp 506w, https://assets.content.technologyadvice.com/large_637262744750610344_4d8b1b1143.webp 675w, https://assets.content.technologyadvice.com/xlarge_637262744750610344_4d8b1b1143.webp 1295w\\\u0026#34; sizes=\\\u0026#34;(min-width: 768px) 80vw, 100vw\\\u0026#34; data-id=\\\u0026#34;382948\\\u0026#34;\u0026gt;\u0026#34;],[0,\u0026#34;\u0026lt;img src=\\\u0026#34;https://assets.content.technologyadvice.com/637262744859672837_00f2a8c656.webp\\\u0026#34; alt=\\\u0026#34;637262744859672837.jpg\\\u0026#34; srcset=\\\u0026#34;https://assets.content.technologyadvice.com/xsmall_637262744859672837_00f2a8c656.webp 43w, https://assets.content.technologyadvice.com/thumbnail_637262744859672837_00f2a8c656.webp 105w, https://assets.content.technologyadvice.com/small_637262744859672837_00f2a8c656.webp 337w, https://assets.content.technologyadvice.com/medium_637262744859672837_00f2a8c656.webp 506w, https://assets.content.technologyadvice.com/large_637262744859672837_00f2a8c656.webp 675w, https://assets.content.technologyadvice.com/xlarge_637262744859672837_00f2a8c656.webp 1295w\\\u0026#34; sizes=\\\u0026#34;(min-width: 768px) 80vw, 100vw\\\u0026#34; data-id=\\\u0026#34;382959\\\u0026#34;\u0026gt;\u0026#34;]]]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;CarouselArticleImages\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003cp\u003eNow, let\u0026#39;s see how to start actually using the technique.\u003c/p\u003e\u003castro-island uid=\"Z1Q6IN9\" prefix=\"v8\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/AdPlacement.ilSXxxuw.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;name\u0026#34;:[0,\u0026#34;inline-article-{n}-banner\u0026#34;],\u0026#34;suffix\u0026#34;:[0,\u0026#34;1\u0026#34;]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;AdPlacement\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003ch2\u003eUsing Real Encryption for Extra Security\u003c/h2\u003e\u003cp\u003eI cannot stress this enough: encoding a message into zero-width binary code is not sufficient encryption if you want to secure your messages. Anyone with the right program can easily decipher your messages without another form of encryption. The most basic thing you can do is alter the source code of whichever program you are using to use different zero-width characters as the one and zero. I\u0026#39;ll go over how to do so in a later step.\u003c/p\u003e\u003cp\u003eBut what you should really be using is a symmetric or asymmetric encryption scheme. An asymmetric encryption scheme like PGP will work best if only one person is the intended recipient. However, you may want to use symmetric encryption if the messages are designed for a group of people. Either way, you can then share a key beforehand and have a much more secure form of communicating.\u003c/p\u003e\u003cp\u003eIf you chose to use PGP, make sure to read \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/easy-way-use-pgp-for-encrypting-emails-windows-mac-linux-0183879/\"\u003eour guide to using PGP\u003c/a\u003e. And if you select the symmetric route, check out \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/encrypt-your-notes-photos-archives-with-encryptpad-0190898/\"\u003ehow to use EncryptPad\u003c/a\u003e.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003cstrong\u003eMore Info: \u003c/strong\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/easy-way-use-pgp-for-encrypting-emails-windows-mac-linux-0183879/\"\u003e\u003cstrong\u003eUse PGP for Encrypting Emails on Windows, Mac \u0026amp; Linux\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003cstrong\u003eMore Info: \u003c/strong\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/encrypt-your-notes-photos-archives-with-encryptpad-0190898/\"\u003e\u003cstrong\u003eEncrypt Your Notes, Photos \u0026amp; Archives with EncryptPad\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eMy favorite tactic is based on the theory that no one searches for a secret compartment within a secret compartment. What do I mean by that? Instead of using PGP to encrypt a zero-width message, use zero-width characters within your PGP encrypted emails as an extra layer of verification.\u003c/p\u003e\u003cp\u003eYou could use this in two ways. The first way would be to have a generic email body with the actual email being hidden within zero-width characters. The second approach would be to hide a particular codeword in the first sentence, then have the person responding use that codeword or a response codeword in their first sentence. I like the second tactic because if anyone does get a hold of the PGP key of the person you\u0026#39;re corresponding with, it\u0026#39;s highly unlikely that they\u0026#39;ll think to look for the zero-width characters, and you\u0026#39;ll immediately know they\u0026#39;re compromised when they respond without the code.\u003c/p\u003e\u003castro-island uid=\"ZGghDQ\" prefix=\"v9\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/AdPlacement.ilSXxxuw.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;name\u0026#34;:[0,\u0026#34;inline-article-{n}-native\u0026#34;],\u0026#34;suffix\u0026#34;:[0,\u0026#34;1\u0026#34;]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;AdPlacement\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003ch2 data-ordered=\"\" data-prefix=\"Option\"\u003eCreate Zero-Width Messages on the Web\u003c/h2\u003e\u003cp\u003eTo get started sending zero-width messages, open up the \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://neatnik.net/steganographr/\"\u003eSteganographr\u003c/a\u003e webpage and paste your (preferably encrypted) message in the \u0026#34;Private Message\u0026#34; field and a generic or otherwise benign message in the \u0026#34;Public Message\u0026#34; field, then click \u0026#34;Steganographize.\u0026#34;\u003c/p\u003e\u003castro-island uid=\"Z1tkNM0\" prefix=\"v10\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/CarouselArticleImages.MVRQ0M-e.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;images\u0026#34;:[1,[[0,\u0026#34;\u0026lt;img src=\\\u0026#34;https://assets.content.technologyadvice.com/636960315166858396_d5e2de3c25.webp\\\u0026#34; alt=\\\u0026#34;636960315166858396.jpg\\\u0026#34; srcset=\\\u0026#34;https://assets.content.technologyadvice.com/xsmall_636960315166858396_d5e2de3c25.webp 64w, https://assets.content.technologyadvice.com/thumbnail_636960315166858396_d5e2de3c25.webp 245w, https://assets.content.technologyadvice.com/small_636960315166858396_d5e2de3c25.webp 500w, https://assets.content.technologyadvice.com/medium_636960315166858396_d5e2de3c25.webp 750w, https://assets.content.technologyadvice.com/large_636960315166858396_d5e2de3c25.webp 1000w\\\u0026#34; sizes=\\\u0026#34;(min-width: 768px) 80vw, 100vw\\\u0026#34; data-id=\\\u0026#34;382966\\\u0026#34;\u0026gt;\u0026#34;]]]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;CarouselArticleImages\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003cp\u003eYou\u0026#39;ll then be able to copy the new message and do with it as you will. As long as it is copied and pasted, it will still have the hidden message intact.\u003c/p\u003e\u003cp\u003eWhen the message needs to be revealed, you can use the Steganographr webpage for the too. On the site, scroll to the bottom, paste the text into the \u0026#34;Reveal Private Message\u0026#34; field, and click \u0026#34;Desteganographize.\u0026#34;\u003c/p\u003e\u003castro-island uid=\"TqB29\" prefix=\"v11\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/CarouselArticleImages.MVRQ0M-e.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;images\u0026#34;:[1,[[0,\u0026#34;\u0026lt;img src=\\\u0026#34;https://assets.content.technologyadvice.com/636960315780764331_d8b93e3609.webp\\\u0026#34; alt=\\\u0026#34;636960315780764331.jpg\\\u0026#34; srcset=\\\u0026#34;https://assets.content.technologyadvice.com/xsmall_636960315780764331_d8b93e3609.webp 64w, https://assets.content.technologyadvice.com/thumbnail_636960315780764331_d8b93e3609.webp 245w, https://assets.content.technologyadvice.com/small_636960315780764331_d8b93e3609.webp 500w, https://assets.content.technologyadvice.com/medium_636960315780764331_d8b93e3609.webp 750w, https://assets.content.technologyadvice.com/large_636960315780764331_d8b93e3609.webp 1000w\\\u0026#34; sizes=\\\u0026#34;(min-width: 768px) 80vw, 100vw\\\u0026#34; data-id=\\\u0026#34;382976\\\u0026#34;\u0026gt;\u0026#34;]]]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;CarouselArticleImages\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003cp\u003eHowever, one problem with the online method is that we have to trust that the website isn\u0026#39;t saving these messages or doing anything else nefarious. Luckily, the \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://neatnik.net/steganographr/?source\"\u003esource code is provided\u003c/a\u003e for Steganographr, so we can simply copy it and host it on our own website if we want to go the extra mile.\u003c/p\u003e\u003cp\u003eAdditionally, the source code allows us to edit it. The most useful thing to edit is which characters are used to represent spaces, zeros, and ones in our zero-width binary. To make the change, look for the \u0026#34;bin2hidden\u0026#34; and \u0026#34;hidden2bin\u0026#34; definitions; we just need to change the hex values to the new characters we want.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e// Convert the ones, zeros, and spaces of the hidden binary data to their respective zero-width characters\nfunction bin2hidden($str) {\n    $str = str_replace(\u0026#39; \u0026#39;, \u0026#34;\\xE2\\x81\\xA0\u0026#34;, $str); // Unicode Character \u0026#39;WORD JOINER\u0026#39; (U+2060) 0xE2 0x81 0xA0\n    $str = str_replace(\u0026#39;0\u0026#39;, \u0026#34;\\xE2\\x80\\x8B\u0026#34;, $str); // Unicode Character \u0026#39;ZERO WIDTH SPACE\u0026#39; (U+200B) 0xE2 0x80 0x8B\n    $str = str_replace(\u0026#39;1\u0026#39;, \u0026#34;\\xE2\\x80\\x8C\u0026#34;, $str); // Unicode Character \u0026#39;ZERO WIDTH NON-JOINER\u0026#39; (U+200C) 0xE2 0x80 0x8C\n    return $str;\n}\n\n// Convert zero-width characters to hidden binary data\nfunction hidden2bin($str) {\n    $str = str_replace(\u0026#34;\\xE2\\x81\\xA0\u0026#34;, \u0026#39; \u0026#39;, $str); // Unicode Character \u0026#39;WORD JOINER\u0026#39; (U+2060) 0xE2 0x81 0xA0\n    $str = str_replace(\u0026#34;\\xE2\\x80\\x8B\u0026#34;, \u0026#39;0\u0026#39;, $str); // Unicode Character \u0026#39;ZERO WIDTH SPACE\u0026#39; (U+200B) 0xE2 0x80 0x8B\n    $str = str_replace(\u0026#34;\\xE2\\x80\\x8C\u0026#34;, \u0026#39;1\u0026#39;, $str); // Unicode Character \u0026#39;ZERO WIDTH NON-JOINER\u0026#39; (U+200C) 0xE2 0x80 0x8C\n    return $str;\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBelow is a list of useful zero-width characters and their hex codes.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://www.fileformat.info/info/unicode/char/180e/index.htm\"\u003eMONGOLIAN VOWEL SEPARATOR\u003c/a\u003e \\xE1 \\xA0 \\x8E\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://www.fileformat.info/info/unicode/char/200b/index.htm\"\u003eZERO-WIDTH SPACE\u003c/a\u003e \\xE2 \\x80 \\x8B\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://www.fileformat.info/info/unicode/char/200c/index.htm\"\u003eZERO-WIDTH NON-JOINER\u003c/a\u003e \\xE2 \\x80 \\x8C\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://www.fileformat.info/info/unicode/char/200d/index.htm\"\u003eZERO-WIDTH JOINER\u003c/a\u003e \\xE2 \\x80 \\x8D\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://www.fileformat.info/info/unicode/char/200e/index.htm\"\u003eLEFT-TO-RIGHT MARK\u003c/a\u003e \\xE2 \\x80 \\x8E\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://www.fileformat.info/info/unicode/char/200f/index.htm\"\u003eRIGHT-TO-LEFT MARK\u003c/a\u003e \\xE2 \\x80 \\x8F\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://www.fileformat.info/info/unicode/char/feff/index.htm\"\u003eZERO-WIDTH NO-BREAK SPACE\u003c/a\u003e \\xEF \\xBB \\xBF\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eFor example, to change from a zero-width non-joiner to a Mongolian vowel separator, we would replace the hex code like so:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003estr_replace(\u0026#39;1\u0026#39;, \u0026#34;\\xE1\\xA0\\x8E\u0026#34;, $str)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBe sure to change the characters\u0026#39; hex codes the same way in both definitions. That way, it can adequately encode and decode.\u003c/p\u003e\u003castro-island uid=\"2sM8lg\" prefix=\"v12\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/AdPlacement.ilSXxxuw.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;name\u0026#34;:[0,\u0026#34;inline-article-{n}-banner\u0026#34;],\u0026#34;suffix\u0026#34;:[0,\u0026#34;2\u0026#34;]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;AdPlacement\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003ch2 data-ordered=\"\" data-prefix=\"Option\"\u003eCreate Zero-Width Messages from the Command Line\u003c/h2\u003e\u003cp\u003eOpening up a webpage every time you want to send and decode a message can get annoying, particularly if you\u0026#39;re doing it often enough. Luckily, someone has already created a tool on GitHub, called \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/vedhavyas/zwfp\"\u003eZWFP\u003c/a\u003e, for encoding zero-width messages, and it works from the command line for extra hacker coolness and convenience.\u003c/p\u003e\u003cp\u003eOne thing to note, however, is that you won\u0026#39;t be able to change the characters being used for the zero-width binary easily. It isn\u0026#39;t really anything to worry about as long as you encrypt your message beforehand. But you will not be able to have one person encoding using the website and one decoding using the command line or vice-versa. They use different characters, so be sure that you\u0026#39;re using the same one to encode and decode.\u003c/p\u003e\u003cp\u003eTo start, make sure you have the Go programming language installed on your computer. If you don\u0026#39;t have it already, you can visit \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://golang.org/dl/\"\u003eGo\u0026#39;s downloads page\u003c/a\u003e to see its options for all major operating systems. The site also has \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://golang.org/doc/install\"\u003edetailed install instructions\u003c/a\u003e, which you should not skip if it\u0026#39;s the first time using Go, as you need to change the PATH environment variable.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003cstrong\u003eDon\u0026#39;t Miss: \u003c/strong\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/punchabunch-just-made-ssh-local-forwarding-stupid-easy-0175686/\"\u003e\u003cstrong\u003ePunchabunch Just Made SSH Local Forwarding Stupid Easy\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWith Go installed, you can fetch the GitHub repository for ZWFP from your working Go directory.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e~/go$ go get -u github.com/vedhavyas/zwfp/cmd/zwfp/...\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe files are so small they\u0026#39;ll be done downloading practically before you even press \u003cem\u003eEnter\u003c/em\u003e. There will be no indication that you have it except a new command prompt, but it should be there. Now, move to the deepest \u0026#34;zwfp\u0026#34; folder, then build the tool.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e~/go$ cd /go/src/github.com/vedhavyas/zwfp/cmd/zwfp\n~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ go build\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAgain, nothing will say it worked except you\u0026#39;ll get a new command prompt. From here, let\u0026#39;s run the test tool.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ go test ./...\n\n?       github.com/vedhavyas/zwfp/cmd/zwfp      [no test files]\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow, let\u0026#39;s see how to use ZWFP. Unfortunately, its usage notes are pretty vague, so let\u0026#39;s dive a little deeper into the correct way to use the tool.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ ./zwfp\n\nUsage:\n         ./zwfp CoverText Payload\n                 Embeds Payload into CoverText\n\n         ./zwfp SteganoText\n                 Extracts Payload from SteganoText\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFirst, let\u0026#39;s encode a message with ZWFP using the two arguments. There\u0026#39;s the plain-looking cover text, which is what everyone will see, then the hidden message. If we just want \u0026#34;CoverText\u0026#34; to be the cover text, and \u0026#34;Payload\u0026#34; to be the hidden message, it\u0026#39;d look like:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ ./zwfp CoverText Payload\n\nCoverText\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHowever, you\u0026#39;ll need to save it inside a file, which you would likely want to do anyway. So, let\u0026#39;s try a different cover text and payload out.\u003c/p\u003e\u003cp\u003eLet\u0026#39;s go with \u0026#34;You see this right?\u0026#34; for the cover and \u0026#34;But this is a hidden message in that text.\u0026#34; as the payload. (If you\u0026#39;re using more than one word for each argument, the sets need to be in quotation marks.) Then, let\u0026#39;s save it to a new file in our /Desktop directory. For our example, that would be a new \u0026#34;secret.txt\u0026#34; file.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ ./zwfp \u0026#34;You see this right?\u0026#34; \u0026#34;But this is a hidden message in that text.\u0026#34; \u0026gt; /home/kali/Desktop/secret.txt\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo see what the text file looks like, let\u0026#39;s use nano to view it.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ nano /home/kali/Desktop/secret.txt\n\n  GNU nano 4.9.2                /home/kali/Desktop/secret.txt\nYou see this right?\n\n                                    [ Read 1 line ]\n^G Get Help   ^O Write Out  ^W Where Is   ^K Cut Text   ^J Justify    ^C Cur Pos\n^X Exit       ^R Read File  ^\\ Replace    ^U Paste Text ^T To Spell   ^_ Go To Line\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eGreat, the cover text is clearly visible. Now, let\u0026#39;s try to see what\u0026#39;s going on underneath the cover text. For that, we can use \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/intro-vim-unix-text-editor-every-hacker-should-be-familiar-with-0174674/\"\u003evim\u003c/a\u003e to see the hidden characters. As you can see below, it\u0026#39;s a lot different than what nano showed up. Type \u003cstrong\u003e:qa\u003c/strong\u003e and hit \u003cem\u003eEnter\u003c/em\u003e to quit vim.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003cstrong\u003eDon\u0026#39;t Miss: \u003c/strong\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/intro-vim-unix-text-editor-every-hacker-should-be-familiar-with-0174674/\"\u003e\u003cstrong\u003eAn Intro to Vim, the Unix Text Editor Every Hacker Should Be Familiar With\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003castro-island uid=\"ZMNCzl\" prefix=\"v13\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/CarouselArticleImages.MVRQ0M-e.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;images\u0026#34;:[1,[[0,\u0026#34;\u0026lt;img src=\\\u0026#34;https://assets.content.technologyadvice.com/637263451629883520_b7b07bd8a3.webp\\\u0026#34; alt=\\\u0026#34;637263451629883520.jpg\\\u0026#34; srcset=\\\u0026#34;https://assets.content.technologyadvice.com/xsmall_637263451629883520_b7b07bd8a3.webp 64w, https://assets.content.technologyadvice.com/thumbnail_637263451629883520_b7b07bd8a3.webp 245w, https://assets.content.technologyadvice.com/small_637263451629883520_b7b07bd8a3.webp 500w, https://assets.content.technologyadvice.com/medium_637263451629883520_b7b07bd8a3.webp 750w, https://assets.content.technologyadvice.com/large_637263451629883520_b7b07bd8a3.webp 1000w\\\u0026#34; sizes=\\\u0026#34;(min-width: 768px) 80vw, 100vw\\\u0026#34; data-id=\\\u0026#34;383007\\\u0026#34;\u0026gt;\u0026#34;]]]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;CarouselArticleImages\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003cp\u003eThen, what ZWFP\u0026#39;s usage doesn\u0026#39;t tell you is how to decode the message. To do so, we\u0026#39;ll \u003cstrong\u003ecat\u003c/strong\u003e the file, then use \u003cstrong\u003exargs -0\u003c/strong\u003e to view the hidden contents.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ cat /home/kali/Desktop/secret.txt | xargs -0 ./zwfp\n\nCover Text: You see this right?\n\nPayload: But this is a hidden message in that text.\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo understand what \u003cstrong\u003exargs -0\u003c/strong\u003e did, let\u0026#39;s view parts of xargs man page. The below output is condensed to just what you need to see about xargs and the -0 flag.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e~/go/src/github.com/vedhavyas/zwfp/cmd/zwfp$ man xargs\n\nXARGS(1)                     General Commands Manual                    XARGS(1)\n\nNAME\n       xargs - build and execute command lines from standard input\n\nSYNOPSIS\n       xargs [options] [command [initial-arguments]]\n\nDESCRIPTION\n       This  manual  page documents the GNU version of xargs.  xargs reads items\n       from the standard input, delimited by blanks (which can be protected with\n       double  or  single  quotes  or a backslash) or newlines, and executes the\n       command (default is /bin/echo) one or more times with  any  initial-argu‐\n       ments  followed  by  items  read from standard input.  Blank lines on the\n       standard input are ignored.\n\n       The command line for command is built up until it  reaches  a  system-de‐\n       fined  limit (unless the -n and -L options are used).  The specified com‐\n       mand will be invoked as many times as necessary to use up the list of in‐\n       put  items.   In general, there will be many fewer invocations of command\n       than there were items in the input.  This will normally have  significant\n       performance benefits.  Some commands can usefully be executed in parallel\n       too; see the -P option.\n\n       Because Unix filenames can contain blanks and newlines, this default  be‐\n       haviour is often problematic; filenames containing blanks and/or newlines\n       are incorrectly processed by xargs.  In these situations it is better  to\n       use the -0 option, which prevents such problems.   When using this option\n       you will need to ensure that the program which  produces  the  input  for\n       xargs  also uses a null character as a separator.  If that program is GNU\n       find for example, the -print0 option does this for you.\n\n       If any invocation of the command exits with a status of 255,  xargs  will\n       stop  immediately without reading any further input.  An error message is\n       issued on stderr when this happens.\n\nOPTIONS\n       -0, --null\n              Input items are terminated by  a  null  character  instead  of  by\n              whitespace,  and  the  quotes and backslash are not special (every\n              character is taken literally).  Disables the end of  file  string,\n              which is treated like any other argument.  Useful when input items\n              might contain white space, quote marks, or backslashes.   The  GNU\n              find -print0 option produces input suitable for this mode.\u003c/code\u003e\u003c/pre\u003e\u003castro-island uid=\"Z1ryyjn\" prefix=\"v14\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/AdPlacement.ilSXxxuw.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;name\u0026#34;:[0,\u0026#34;inline-article-{n}-native\u0026#34;],\u0026#34;suffix\u0026#34;:[0,\u0026#34;2\u0026#34;]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;AdPlacement\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003ch2\u003eRevealing Zero-Width Characters with a Chrome Extension\u003c/h2\u003e\u003cp\u003eIf you want to defend yourself against zero-width characters, the best way to do so is with a simple Chrome browser extension. The extension we\u0026#39;ll be using will replace zero-width characters with various emojis. Go to the Chrome Web Store and add \u0026#34;\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://chrome.google.com/webstore/detail/replace-zero-width-charac/lgaiigbekmcejmhenhhleeaicbcjjddi\"\u003eReplace zero-width characters with emojis\u003c/a\u003e\u0026#34; to your browser. After that, restart Chrome.\u003c/p\u003e\u003castro-island uid=\"ZVmuGw\" prefix=\"v15\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/CarouselArticleImages.MVRQ0M-e.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;images\u0026#34;:[1,[[0,\u0026#34;\u0026lt;img src=\\\u0026#34;https://assets.content.technologyadvice.com/636959390769983441_4e4fee68c0.webp\\\u0026#34; alt=\\\u0026#34;636959390769983441.jpg\\\u0026#34; srcset=\\\u0026#34;https://assets.content.technologyadvice.com/xsmall_636959390769983441_4e4fee68c0.webp 64w, https://assets.content.technologyadvice.com/thumbnail_636959390769983441_4e4fee68c0.webp 245w, https://assets.content.technologyadvice.com/small_636959390769983441_4e4fee68c0.webp 500w, https://assets.content.technologyadvice.com/medium_636959390769983441_4e4fee68c0.webp 750w, https://assets.content.technologyadvice.com/large_636959390769983441_4e4fee68c0.webp 1000w\\\u0026#34; sizes=\\\u0026#34;(min-width: 768px) 80vw, 100vw\\\u0026#34; data-id=\\\u0026#34;383014\\\u0026#34;\u0026gt;\u0026#34;]]]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;CarouselArticleImages\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003cp\u003eUnfortunately, the extension won\u0026#39;t run automatically, so you\u0026#39;ll need to check each page when you\u0026#39;re suspicious or curious. To run the extension, click its button (an \u0026#34;R\u0026#34; inside a gray square) to the right of your browser bar, and then click \u0026#34;Show me the $!\u0026#34;\u003c/p\u003e\u003cp\u003eThe tool makes it fairly obvious when a document or webpage in Chrome has hidden messages using zero-width characters. See all of those emojis below. Those aren\u0026#39;t there on the foreground, but they show that there are hidden characters in the background.\u003c/p\u003e\u003castro-island uid=\"Z2fHFeg\" prefix=\"v16\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/CarouselArticleImages.MVRQ0M-e.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;images\u0026#34;:[1,[[0,\u0026#34;\u0026lt;img src=\\\u0026#34;https://assets.content.technologyadvice.com/636960177484102162_fd86012285.webp\\\u0026#34; alt=\\\u0026#34;636960177484102162.jpg\\\u0026#34; srcset=\\\u0026#34;https://assets.content.technologyadvice.com/xsmall_636960177484102162_fd86012285.webp 64w, https://assets.content.technologyadvice.com/thumbnail_636960177484102162_fd86012285.webp 239w, https://assets.content.technologyadvice.com/small_636960177484102162_fd86012285.webp 500w, https://assets.content.technologyadvice.com/medium_636960177484102162_fd86012285.webp 750w, https://assets.content.technologyadvice.com/large_636960177484102162_fd86012285.webp 1000w\\\u0026#34; sizes=\\\u0026#34;(min-width: 768px) 80vw, 100vw\\\u0026#34; data-id=\\\u0026#34;383073\\\u0026#34;\u0026gt;\u0026#34;]]]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;CarouselArticleImages\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003cp\u003eInterestingly, since it does a one-to-one replacement of the zero-width characters to various emojis, you can see the binary nature in emoji form. If you want to explore or modify the tool, you can find \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/chpmrc/zero-width-chrome-extension\"\u003ethe source code on GitHub\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAs useful as an extension can be, don\u0026#39;t let it lure you into a false sense of security. It only detects zero-width characters within a webpage or document and not those that might be lurking in the URL.\u003c/p\u003e\u003castro-island uid=\"1HtQFJ\" prefix=\"v17\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/AdPlacement.ilSXxxuw.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;name\u0026#34;:[0,\u0026#34;inline-article-{n}-banner\u0026#34;],\u0026#34;suffix\u0026#34;:[0,\u0026#34;3\u0026#34;]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;AdPlacement\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003ch2\u003eCopying Text Without the Zero-Width Characters\u003c/h2\u003e\u003cp\u003eIf the Chrome extension doesn\u0026#39;t work for you, or you want a more powerful tool that will allow you to remove the zero-width characters in a document, then you\u0026#39;ll need to use a website called \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://www.diffchecker.com/\"\u003eDiffchecker\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eDiffchecker is a tool designed to highlight the differences between two documents that are similar, which makes it a potent tool for detecting the classic canary trap. Since not everyone knows about zero-width characters, people will sometimes try to use extra spaces and intentional misspellings to achieve the same effect. Diffchecker will both highlight these differences, if you have two versions of the document, and reveal zero-width characters as dots if you have just one version.\u003c/p\u003e\u003cp\u003eSimply open the website and copy and paste the text into the \u0026#34;Original Text\u0026#34; field. If there are any zero-width characters in the document, they\u0026#39;ll start showing up as dots, usually grouped if it\u0026#39;s some kind of message, like a username. If you have a second version, paste in the \u0026#34;Changed Text\u0026#34; field, then click \u0026#34;Find Difference\u0026#34; at the bottom of the page. Diffchecker is also perfect for finding zero-width characters in URLs and should be a go-to when investigating suspicious domains.\u003c/p\u003e\u003castro-island uid=\"ZYgkP0\" prefix=\"v18\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/CarouselArticleImages.MVRQ0M-e.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;images\u0026#34;:[1,[[0,\u0026#34;\u0026lt;img src=\\\u0026#34;https://assets.content.technologyadvice.com/636959382163420473_a3ac3fdce9.webp\\\u0026#34; alt=\\\u0026#34;636959382163420473.jpg\\\u0026#34; srcset=\\\u0026#34;https://assets.content.technologyadvice.com/xsmall_636959382163420473_a3ac3fdce9.webp 64w, https://assets.content.technologyadvice.com/thumbnail_636959382163420473_a3ac3fdce9.webp 245w, https://assets.content.technologyadvice.com/small_636959382163420473_a3ac3fdce9.webp 500w, https://assets.content.technologyadvice.com/medium_636959382163420473_a3ac3fdce9.webp 750w, https://assets.content.technologyadvice.com/large_636959382163420473_a3ac3fdce9.webp 1000w\\\u0026#34; sizes=\\\u0026#34;(min-width: 768px) 80vw, 100vw\\\u0026#34; data-id=\\\u0026#34;383087\\\u0026#34;\u0026gt;\u0026#34;]]]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;CarouselArticleImages\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003cp\u003eIf you find zero-width characters, removing them is a simple matter of highlighting the block of dots and pressing \u003cem\u003eBackspace\u003c/em\u003e or \u003cem\u003eDelete\u003c/em\u003e. Now, you can then safely copy the text. As you can see below, decryptors will no longer be able to find a hidden message.\u003c/p\u003e\u003castro-island uid=\"ZHIyU6\" prefix=\"v19\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/CarouselArticleImages.MVRQ0M-e.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;images\u0026#34;:[1,[[0,\u0026#34;\u0026lt;img src=\\\u0026#34;https://assets.content.technologyadvice.com/636959381254983208_f6f7a8455e.webp\\\u0026#34; alt=\\\u0026#34;636959381254983208.jpg\\\u0026#34; srcset=\\\u0026#34;https://assets.content.technologyadvice.com/xsmall_636959381254983208_f6f7a8455e.webp 64w, https://assets.content.technologyadvice.com/thumbnail_636959381254983208_f6f7a8455e.webp 245w, https://assets.content.technologyadvice.com/small_636959381254983208_f6f7a8455e.webp 500w, https://assets.content.technologyadvice.com/medium_636959381254983208_f6f7a8455e.webp 750w, https://assets.content.technologyadvice.com/large_636959381254983208_f6f7a8455e.webp 1000w\\\u0026#34; sizes=\\\u0026#34;(min-width: 768px) 80vw, 100vw\\\u0026#34; data-id=\\\u0026#34;383105\\\u0026#34;\u0026gt;\u0026#34;]]]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;CarouselArticleImages\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003cp\u003eIf you do happen to get hold of two versions the same document where they\u0026#39;re trying to use the canary trap, It\u0026#39;s possible to use the other version as a scapegoat and point the finger at its owner so that the document can\u0026#39;t be traced back to you.\u003c/p\u003e\u003cp\u003eIf you prefer something on your local computer, then you can use a program called \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://notepad-plus-plus.org/\"\u003eNotepad++\u003c/a\u003e, which can be installed on Kali and other Linux distros. In Notepad++, copy and paste the text in, then on the top bar, click \u0026#34;Encoding,\u0026#34; then \u0026#34;Encode in ANSI.\u0026#34;\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eConfidential Announcement: â€Œï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€‹ï»¿â€ï»¿â€Œï»¿â€Œï»¿â€‹ï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€Œï»¿â€‹This is some confidential text that you really shouldn\u0026#39;t be sharing anywhere else.\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBy changing the encoding of the document, you essentially break the zero-width characters, which rely on Unicode and UTF-8. The zero-width characters now look like complete gibberish and can easily be found when reading a document.\u003c/p\u003e\u003castro-island uid=\"Z2cQOXT\" prefix=\"v20\" component-url=\"https://static.null-byte.wonderhowto.com/_astro/AdPlacement.ilSXxxuw.js\" component-export=\"default\" renderer-url=\"https://static.null-byte.wonderhowto.com/_astro/client.BnuuToML.js\" props=\"{\u0026#34;name\u0026#34;:[0,\u0026#34;inline-article-{n}-native\u0026#34;],\u0026#34;suffix\u0026#34;:[0,\u0026#34;3\u0026#34;]}\" ssr=\"\" client=\"visible\" opts=\"{\u0026#34;name\u0026#34;:\u0026#34;AdPlacement\u0026#34;,\u0026#34;value\u0026#34;:true}\" await-children=\"\"\u003e\u003c/astro-island\u003e\u003ch2\u003eZero-Width Characters Are Great for Hidden Messages\u003c/h2\u003e\u003cp\u003eZero-width characters are a useful tool to have. However, it\u0026#39;s essential never to forget their limitations. If you\u0026#39;re using them as a covert means of communication, you should always remember to encrypt it. Otherwise, you\u0026#39;re relying purely on the fact that no one will look for the hidden message.\u003c/p\u003e\u003cp\u003eAnd if you\u0026#39;re using it as a means of flushing out leakers, it may not work if they\u0026#39;re savvy and attempt to use screenshots or physically print out the documents. However, those methods also bring their own risks, and when employed all together, you still might be able to catch the culprit.\u003c/p\u003e\u003cp\u003eThanks for reading! If you have any questions, you can ask here or on Twitter \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://twitter.com/The_Hoid\"\u003e@The_Hoid\u003c/a\u003e.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003eDon\u0026#39;t Miss: \u003c/strong\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://null-byte.wonderhowto.com/how-to/use-private-encrypted-messaging-over-tor-0180208/\"\u003e\u003cstrong\u003eHow to Use Private Encrypted Messaging Over Tor\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eCover image by \u003ca target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://www.123rf.com/photo_95316958_craft-paper-ripped-open-at-two-places.html\"\u003ebuntewelt/123RF\u003c/a\u003e (edited); Screenshots by Hoid/Null Byte.\u003c/p\u003e \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "25 min read",
  "publishedTime": "2024-12-27T19:11:23.051Z",
  "modifiedTime": "2024-12-27T19:11:22.911Z"
}
